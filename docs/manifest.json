{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v7.json", "dbt_version": "1.3.0", "generated_at": "2022-10-26T16:29:16.082813Z", "invocation_id": "9109541f-7fbc-46e5-9be0-ca4b706cbc1e", "env": {}, "project_id": "eb4f71033fe45cc065e80cddb4b06583", "user_id": "8268eefe-e8f7-472e-ab2a-a92f0135d76d", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"seed.asana_integration_tests.project_task_data": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "project_id": "int64", "task_id": "int64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests", "fqn": ["asana_integration_tests", "project_task_data"], "unique_id": "seed.asana_integration_tests.project_task_data", "raw_code": "", "language": "sql", "package_name": "asana_integration_tests", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests", "path": "project_task_data.csv", "original_file_path": "seeds/project_task_data.csv", "name": "project_task_data", "alias": "project_task_data", "checksum": {"name": "sha256", "checksum": "b8ae363c3ab40609f8b5b0eee30e198bd124d781198ecda72e5409178aab17cd"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"project_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "task_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1666801517.096425, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`asana_integration_tests`.`project_task_data`"}, "seed.asana_integration_tests.story_data": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "int64", "created_by_id": "int64", "target_id": "int64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests", "fqn": ["asana_integration_tests", "story_data"], "unique_id": "seed.asana_integration_tests.story_data", "raw_code": "", "language": "sql", "package_name": "asana_integration_tests", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests", "path": "story_data.csv", "original_file_path": "seeds/story_data.csv", "name": "story_data", "alias": "story_data", "checksum": {"name": "sha256", "checksum": "207847a91c60ba0de1269fd0aef2a0e1f9d2c3e2b0fbae231ce69fce909dd15a"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "created_by_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "target_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1666801517.1020968, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`asana_integration_tests`.`story_data`"}, "seed.asana_integration_tests.task_tag_data": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "tag_id": "int64", "task_id": "int64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests", "fqn": ["asana_integration_tests", "task_tag_data"], "unique_id": "seed.asana_integration_tests.task_tag_data", "raw_code": "", "language": "sql", "package_name": "asana_integration_tests", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests", "path": "task_tag_data.csv", "original_file_path": "seeds/task_tag_data.csv", "name": "task_tag_data", "alias": "task_tag_data", "checksum": {"name": "sha256", "checksum": "0209673eda201e499fc6c588fbc799e08b44a60168cabaa4dc3cee39bb250cbd"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"tag_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "task_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1666801517.103328, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`asana_integration_tests`.`task_tag_data`"}, "seed.asana_integration_tests.task_section_data": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "section_id": "int64", "task_id": "int64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests", "fqn": ["asana_integration_tests", "task_section_data"], "unique_id": "seed.asana_integration_tests.task_section_data", "raw_code": "", "language": "sql", "package_name": "asana_integration_tests", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests", "path": "task_section_data.csv", "original_file_path": "seeds/task_section_data.csv", "name": "task_section_data", "alias": "task_section_data", "checksum": {"name": "sha256", "checksum": "d0aab9b6565fdb541b9ed5122d66cc9fad61287d3374d8af41c25eaf9bcd5805"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"section_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "task_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1666801517.104511, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`asana_integration_tests`.`task_section_data`"}, "seed.asana_integration_tests.task_data": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "int64", "assignee_id": "int64", "completed_by_id": "int64", "parent_id": "int64", "workspace_id": "int64", "completed_at": "timestamp", "created_at": "timestamp", "due_on": "timestamp", "due_at": "timestamp", "modified_at": "timestamp", "start_on": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests", "fqn": ["asana_integration_tests", "task_data"], "unique_id": "seed.asana_integration_tests.task_data", "raw_code": "", "language": "sql", "package_name": "asana_integration_tests", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests", "path": "task_data.csv", "original_file_path": "seeds/task_data.csv", "name": "task_data", "alias": "task_data", "checksum": {"name": "sha256", "checksum": "dc304269ae0d5003e65aa0b8f5be6093ec114874b7bca0bf4784ffed187338cd"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "assignee_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "completed_by_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "parent_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "workspace_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "completed_at": "timestamp", "created_at": "timestamp", "due_on": "timestamp", "due_at": "timestamp", "modified_at": "timestamp", "start_on": "timestamp", "_fivetran_synced": "timestamp"}}, "created_at": 1666801517.105814, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`asana_integration_tests`.`task_data`"}, "seed.asana_integration_tests.task_follower_data": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "user_id": "int64", "task_id": "int64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests", "fqn": ["asana_integration_tests", "task_follower_data"], "unique_id": "seed.asana_integration_tests.task_follower_data", "raw_code": "", "language": "sql", "package_name": "asana_integration_tests", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests", "path": "task_follower_data.csv", "original_file_path": "seeds/task_follower_data.csv", "name": "task_follower_data", "alias": "task_follower_data", "checksum": {"name": "sha256", "checksum": "6171210df6abad2ffba8ff8d10c1feb73c13c41c8e86b32e59f5aa29a4571678"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"user_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "task_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1666801517.107001, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`asana_integration_tests`.`task_follower_data`"}, "seed.asana_integration_tests.tag_data": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "int64", "workspace_id": "int64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests", "fqn": ["asana_integration_tests", "tag_data"], "unique_id": "seed.asana_integration_tests.tag_data", "raw_code": "", "language": "sql", "package_name": "asana_integration_tests", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests", "path": "tag_data.csv", "original_file_path": "seeds/tag_data.csv", "name": "tag_data", "alias": "tag_data", "checksum": {"name": "sha256", "checksum": "e74c86b7fda7a484687ac7e16fd759233a2066632e6dd27acb481b0afa852548"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "workspace_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1666801517.108153, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`asana_integration_tests`.`tag_data`"}, "seed.asana_integration_tests.project_data": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "int64", "owner_id": "int64", "team_id": "int64", "workspace_id": "int64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests", "fqn": ["asana_integration_tests", "project_data"], "unique_id": "seed.asana_integration_tests.project_data", "raw_code": "", "language": "sql", "package_name": "asana_integration_tests", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests", "path": "project_data.csv", "original_file_path": "seeds/project_data.csv", "name": "project_data", "alias": "project_data", "checksum": {"name": "sha256", "checksum": "cf12cd38b9bdb3ec36cac1757ae4a17e7a8dc4182cb65995ec3fc9b7c2668378"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "owner_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "team_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "workspace_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1666801517.109327, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`asana_integration_tests`.`project_data`"}, "seed.asana_integration_tests.user_data": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "int64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests", "fqn": ["asana_integration_tests", "user_data"], "unique_id": "seed.asana_integration_tests.user_data", "raw_code": "", "language": "sql", "package_name": "asana_integration_tests", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests", "path": "user_data.csv", "original_file_path": "seeds/user_data.csv", "name": "user_data", "alias": "user_data", "checksum": {"name": "sha256", "checksum": "237db906018d65bbeeb08bd57c3cd23a91428412a882a0b59994658d564a9ad3"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1666801517.1106188, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`asana_integration_tests`.`user_data`"}, "seed.asana_integration_tests.team_data": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "int64", "organization_id": "int64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests", "fqn": ["asana_integration_tests", "team_data"], "unique_id": "seed.asana_integration_tests.team_data", "raw_code": "", "language": "sql", "package_name": "asana_integration_tests", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests", "path": "team_data.csv", "original_file_path": "seeds/team_data.csv", "name": "team_data", "alias": "team_data", "checksum": {"name": "sha256", "checksum": "96c14731f1382783fd83b114321e23b5c2813b94f96a6e5422a5aca66157a1cd"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "organization_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1666801517.1117709, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`asana_integration_tests`.`team_data`"}, "seed.asana_integration_tests.section_data": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "int64", "project_id": "int64"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": false, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests", "fqn": ["asana_integration_tests", "section_data"], "unique_id": "seed.asana_integration_tests.section_data", "raw_code": "", "language": "sql", "package_name": "asana_integration_tests", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests", "path": "section_data.csv", "original_file_path": "seeds/section_data.csv", "name": "section_data", "alias": "section_data", "checksum": {"name": "sha256", "checksum": "ca6f6bf502e9d65fcbe59590756a42979e31af8bf1db841a9292b56512252bde"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type == 'redshift' else false }}", "column_types": {"id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}", "project_id": "{{ 'int64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1666801517.1129332, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`asana_integration_tests`.`section_data`"}, "model.asana_source.stg_asana__user": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.asana_source.get_user_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.asana_source.stg_asana__user_tmp", "model.asana_source.stg_asana__user_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_asana", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests_stg_asana", "fqn": ["asana_source", "stg_asana__user"], "unique_id": "model.asana_source.stg_asana__user", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_asana__user_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_asana__user_tmp')),\n                staging_columns=get_user_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as user_id,\n        email,\n        name as user_name\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "stg_asana__user.sql", "original_file_path": "models/stg_asana__user.sql", "name": "stg_asana__user", "alias": "stg_asana__user", "checksum": {"name": "sha256", "checksum": "4e7279a7f3d7b9754c574de24021781c98bbbc1c0a99e0c7b3495c57a6d33e18"}, "tags": [], "refs": [["stg_asana__user_tmp"], ["stg_asana__user_tmp"]], "sources": [], "metrics": [], "description": "Table of all accounts in the organization", "columns": {"user_id": {"name": "user_id", "description": "System generated unique ID for each user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "The user's email", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_name": {"name": "user_name", "description": "The name of the user as it appears in the UI", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "asana_source://models/stg_asana.yml", "compiled_path": "target/compiled/asana_source/models/stg_asana__user.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_asana", "materialized": "table"}, "created_at": 1666801517.406728, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as user_id,\n        email,\n        name as user_name\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`"}, "model.asana_source.stg_asana__task": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.asana_source.get_task_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.asana_source.stg_asana__task_tmp", "model.asana_source.stg_asana__task_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_asana", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests_stg_asana", "fqn": ["asana_source", "stg_asana__task"], "unique_id": "model.asana_source.stg_asana__task", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_asana__task_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_asana__task_tmp')),\n                staging_columns=get_task_columns()\n            )\n        }}\n\n        --The below script allows for pass through columns.\n        {% if var('task_pass_through_columns') %}\n        ,\n        {{ var('task_pass_through_columns') | join (\", \") }}\n\n        {% endif %}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as task_id,\n        assignee_id as assignee_user_id,\n        completed as is_completed,\n        cast(completed_at as {{ dbt.type_timestamp() }}) as completed_at,\n        completed_by_id as completed_by_user_id,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at,\n        cast(coalesce(due_on, due_at) as {{ dbt.type_timestamp() }}) as due_date,\n        cast(modified_at as {{ dbt.type_timestamp() }}) as modified_at,\n        name as task_name,\n        parent_id as parent_task_id,\n        cast(start_on as {{ dbt.type_timestamp() }}) as start_date,\n        notes as task_description,\n        liked as is_liked,\n        num_likes as number_of_likes,\n        workspace_id\n\n        --The below script allows for pass through columns.\n        {% if var('task_pass_through_columns') %}\n        ,\n        {{ var('task_pass_through_columns') | join (\", \") }}\n\n        {% endif %}\n\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "stg_asana__task.sql", "original_file_path": "models/stg_asana__task.sql", "name": "stg_asana__task", "alias": "stg_asana__task", "checksum": {"name": "sha256", "checksum": "e47fb0deb8252314befe05ea75c1fb10b1a73e483e7bcad705c042eefa2d9a3b"}, "tags": [], "refs": [["stg_asana__task_tmp"], ["stg_asana__task_tmp"]], "sources": [], "metrics": [], "description": "Table containing all created tasks", "columns": {"task_id": {"name": "task_id", "description": "System generated unique ID of the task", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assignee_user_id": {"name": "assignee_user_id", "description": "Foreign key referencing the USER that is currently assigned the task.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assignee_status": {"name": "assignee_status", "description": "Scheduling status for the assignee that the task is or will eventually be assigned to. This maps to the sections of \"My Tasks\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_completed": {"name": "is_completed", "description": "Boolean that is true if the task is currently marked complete.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "completed_at": {"name": "completed_at", "description": "Timestamp of when the task was marked complete.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "completed_by_user_id": {"name": "completed_by_user_id", "description": "Foreign key referencing the USER who completed the task.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the task was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "Date the task is due, if provided.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modified_at": {"name": "modified_at", "description": "Timestamp of when the task was last modified", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_name": {"name": "task_name", "description": "User-facing name of the task.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_task_id": {"name": "parent_task_id", "description": "Self-referential id of the parent TASK that this is a subtask of.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_date": {"name": "start_date", "description": "The start date of the task, if a date range is given.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_description": {"name": "task_description", "description": "Free-form text describing the task, as seen in the UI.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_liked": {"name": "is_liked", "description": "A boolean that's true if the task has been liked.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number_of_likes": {"name": "number_of_likes", "description": "An integer indicating the number of likes on a task.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "workspace_id": {"name": "workspace_id", "description": "ID of the organization's Asana workspace. Irrelevant unless working with multiple companies.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "asana_source://models/stg_asana.yml", "compiled_path": "target/compiled/asana_source/models/stg_asana__task.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_asana", "materialized": "table"}, "created_at": 1666801517.403455, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    cast(null as TIMESTAMP) as \n    \n    _fivetran_synced\n    \n , \n    \n    \n    assignee_id\n    \n as \n    \n    assignee_id\n    \n, \n    \n    \n    completed\n    \n as \n    \n    completed\n    \n, \n    \n    \n    completed_at\n    \n as \n    \n    completed_at\n    \n, \n    \n    \n    completed_by_id\n    \n as \n    \n    completed_by_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    due_at\n    \n as \n    \n    due_at\n    \n, \n    \n    \n    due_on\n    \n as \n    \n    due_on\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    modified_at\n    \n as \n    \n    modified_at\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    notes\n    \n as \n    \n    notes\n    \n, \n    cast(null as boolean) as \n    \n    liked\n    \n , \n    cast(null as INT64) as \n    \n    num_likes\n    \n , \n    \n    \n    parent_id\n    \n as \n    \n    parent_id\n    \n, \n    \n    \n    start_on\n    \n as \n    \n    start_on\n    \n, \n    \n    \n    workspace_id\n    \n as \n    \n    workspace_id\n    \n\n\n\n\n        --The below script allows for pass through columns.\n        \n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as task_id,\n        assignee_id as assignee_user_id,\n        completed as is_completed,\n        cast(completed_at as TIMESTAMP) as completed_at,\n        completed_by_id as completed_by_user_id,\n        cast(created_at as TIMESTAMP) as created_at,\n        cast(coalesce(due_on, due_at) as TIMESTAMP) as due_date,\n        cast(modified_at as TIMESTAMP) as modified_at,\n        name as task_name,\n        parent_id as parent_task_id,\n        cast(start_on as TIMESTAMP) as start_date,\n        notes as task_description,\n        liked as is_liked,\n        num_likes as number_of_likes,\n        workspace_id\n\n        --The below script allows for pass through columns.\n        \n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task`"}, "model.asana_source.stg_asana__task_section": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.asana_source.get_task_section_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.asana_source.stg_asana__task_section_tmp", "model.asana_source.stg_asana__task_section_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_asana", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests_stg_asana", "fqn": ["asana_source", "stg_asana__task_section"], "unique_id": "model.asana_source.stg_asana__task_section", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_asana__task_section_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_asana__task_section_tmp')),\n                staging_columns=get_task_section_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        section_id,\n        task_id\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "stg_asana__task_section.sql", "original_file_path": "models/stg_asana__task_section.sql", "name": "stg_asana__task_section", "alias": "stg_asana__task_section", "checksum": {"name": "sha256", "checksum": "4ead107e3627f57920f45d190c273a0fe706c9f911998f67769818fcd1bb4797"}, "tags": [], "refs": [["stg_asana__task_section_tmp"], ["stg_asana__task_section_tmp"]], "sources": [], "metrics": [], "description": "Table of tasks and the section that they live under. Section-less tasks within projects appear here, but project-less tasks do not", "columns": {"task_id": {"name": "task_id", "description": "Foreign key referencing the ID of the TASK", "meta": {}, "data_type": null, "quote": null, "tags": []}, "section_id": {"name": "section_id", "description": "Foreign key referencing the ID of the SECTION housing the task", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "asana_source://models/stg_asana.yml", "compiled_path": "target/compiled/asana_source/models/stg_asana__task_section.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_asana", "materialized": "table"}, "created_at": 1666801517.404791, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task_section_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    section_id\n    \n as \n    \n    section_id\n    \n, \n    \n    \n    task_id\n    \n as \n    \n    task_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        section_id,\n        task_id\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task_section`"}, "model.asana_source.stg_asana__section": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.asana_source.get_section_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.asana_source.stg_asana__section_tmp", "model.asana_source.stg_asana__section_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_asana", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests_stg_asana", "fqn": ["asana_source", "stg_asana__section"], "unique_id": "model.asana_source.stg_asana__section", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_asana__section_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_asana__section_tmp')),\n                staging_columns=get_section_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as section_id,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at,\n        name as section_name,\n        project_id\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "stg_asana__section.sql", "original_file_path": "models/stg_asana__section.sql", "name": "stg_asana__section", "alias": "stg_asana__section", "checksum": {"name": "sha256", "checksum": "4c0310af5b1832f35eef93c4ab66969242ffeecc545c6b27510c81534786b2cd"}, "tags": [], "refs": [["stg_asana__section_tmp"], ["stg_asana__section_tmp"]], "sources": [], "metrics": [], "description": "Table of all sections within projects. If tasks in a project are not in an explicit user-made section, a default section called \"(no section)\" is created here", "columns": {"section_id": {"name": "section_id", "description": "System-generated unique ID of the section", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the section was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "section_name": {"name": "section_name", "description": "User-facing name of the section.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_id": {"name": "project_id", "description": "Foreign key referencing the id of the PROJECT the section lives in.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "asana_source://models/stg_asana.yml", "compiled_path": "target/compiled/asana_source/models/stg_asana__section.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_asana", "materialized": "table"}, "created_at": 1666801517.399313, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__section_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    project_id\n    \n as \n    \n    project_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as section_id,\n        cast(created_at as TIMESTAMP) as created_at,\n        name as section_name,\n        project_id\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__section`"}, "model.asana_source.stg_asana__team": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.asana_source.get_team_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.asana_source.stg_asana__team_tmp", "model.asana_source.stg_asana__team_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_asana", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests_stg_asana", "fqn": ["asana_source", "stg_asana__team"], "unique_id": "model.asana_source.stg_asana__team", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_asana__team_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_asana__team_tmp')),\n                staging_columns=get_team_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as team_id,\n        name as team_name\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "stg_asana__team.sql", "original_file_path": "models/stg_asana__team.sql", "name": "stg_asana__team", "alias": "stg_asana__team", "checksum": {"name": "sha256", "checksum": "d2a65dca096a0320f59cc16346eb1854a1bc78135e11eb6b010fcc41fc49e4a0"}, "tags": [], "refs": [["stg_asana__team_tmp"], ["stg_asana__team_tmp"]], "sources": [], "metrics": [], "description": "Table of the teams within the organization", "columns": {"team_id": {"name": "team_id", "description": "System generated unique ID for each team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_name": {"name": "team_name", "description": "User-facing name of the team", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "asana_source://models/stg_asana.yml", "compiled_path": "target/compiled/asana_source/models/stg_asana__team.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_asana", "materialized": "table"}, "created_at": 1666801517.405967, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__team_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    organization_id\n    \n as \n    \n    organization_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as team_id,\n        name as team_name\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__team`"}, "model.asana_source.stg_asana__task_tag": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.asana_source.get_task_tag_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.asana_source.stg_asana__task_tag_tmp", "model.asana_source.stg_asana__task_tag_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_asana", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests_stg_asana", "fqn": ["asana_source", "stg_asana__task_tag"], "unique_id": "model.asana_source.stg_asana__task_tag", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_asana__task_tag_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_asana__task_tag_tmp')),\n                staging_columns=get_task_tag_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        tag_id,\n        task_id\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "stg_asana__task_tag.sql", "original_file_path": "models/stg_asana__task_tag.sql", "name": "stg_asana__task_tag", "alias": "stg_asana__task_tag", "checksum": {"name": "sha256", "checksum": "7eba4b0f2dabd68e0a77d515c8406bb57bd6263b9ef551de3f06eded4c085de8"}, "tags": [], "refs": [["stg_asana__task_tag_tmp"], ["stg_asana__task_tag_tmp"]], "sources": [], "metrics": [], "description": "Table of tasks with the tags attached to them. Tasks without tags (and vice versa) do not appear here.", "columns": {"tag_id": {"name": "tag_id", "description": "Foreign key referencing the ID of the TAG attached to the task", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_id": {"name": "task_id", "description": "Foreign key referencing the ID of the TASK", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "asana_source://models/stg_asana.yml", "compiled_path": "target/compiled/asana_source/models/stg_asana__task_tag.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_asana", "materialized": "table"}, "created_at": 1666801517.405338, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task_tag_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    tag_id\n    \n as \n    \n    tag_id\n    \n, \n    \n    \n    task_id\n    \n as \n    \n    task_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        tag_id,\n        task_id\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task_tag`"}, "model.asana_source.stg_asana__story": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.asana_source.get_story_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.asana_source.stg_asana__story_tmp", "model.asana_source.stg_asana__story_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_asana", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests_stg_asana", "fqn": ["asana_source", "stg_asana__story"], "unique_id": "model.asana_source.stg_asana__story", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_asana__story_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_asana__story_tmp')),\n                staging_columns=get_story_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as story_id,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at,\n        created_by_id as created_by_user_id,\n        target_id as target_task_id,\n        text as story_content,\n        type as event_type\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "stg_asana__story.sql", "original_file_path": "models/stg_asana__story.sql", "name": "stg_asana__story", "alias": "stg_asana__story", "checksum": {"name": "sha256", "checksum": "099c294f4f7a424d61579bc6cc3ec84860097149701eac404a71c07ca3f0e2b0"}, "tags": [], "refs": [["stg_asana__story_tmp"], ["stg_asana__story_tmp"]], "sources": [], "metrics": [], "description": "Table containing all stories -- stories are actions taken on tasks", "columns": {"story_id": {"name": "story_id", "description": "System generated unique ID of the story/action taken on a task.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the story occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_user_id": {"name": "created_by_user_id", "description": "Foreign key referencing the USER who took the action (sometimes null)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_task_id": {"name": "target_task_id", "description": "Foreign key referencing the TASK that the action was taken on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "story_content": {"name": "story_content", "description": "Free-form text that is either the content of a comment (event_type=comment) or the description of an action (event_type=system)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_type": {"name": "event_type", "description": "The origin type of the story - a comment or change to the backend (ie altering a task somehow)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "asana_source://models/stg_asana.yml", "compiled_path": "target/compiled/asana_source/models/stg_asana__story.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_asana", "materialized": "table"}, "created_at": 1666801517.400396, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__story_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    hearted\n    \n as \n    \n    hearted\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    num_hearts\n    \n as \n    \n    num_hearts\n    \n, \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    target_id\n    \n as \n    \n    target_id\n    \n, \n    \n    \n    text\n    \n as \n    \n    text\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as story_id,\n        cast(created_at as TIMESTAMP) as created_at,\n        created_by_id as created_by_user_id,\n        target_id as target_task_id,\n        text as story_content,\n        type as event_type\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__story`"}, "model.asana_source.stg_asana__tag": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.asana_source.get_tag_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.asana_source.stg_asana__tag_tmp", "model.asana_source.stg_asana__tag_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_asana", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests_stg_asana", "fqn": ["asana_source", "stg_asana__tag"], "unique_id": "model.asana_source.stg_asana__tag", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_asana__tag_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_asana__tag_tmp')),\n                staging_columns=get_tag_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as tag_id,\n        name as tag_name,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at\n    from fields\n    where not _fivetran_deleted\n)\n\nselect * \nfrom final", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "stg_asana__tag.sql", "original_file_path": "models/stg_asana__tag.sql", "name": "stg_asana__tag", "alias": "stg_asana__tag", "checksum": {"name": "sha256", "checksum": "5e2b49fc8c3d6c591b03b5c689d05423d6f9b798f79197e398690f9180459f2c"}, "tags": [], "refs": [["stg_asana__tag_tmp"], ["stg_asana__tag_tmp"]], "sources": [], "metrics": [], "description": "Table of the custom tags made in the organization", "columns": {"tag_id": {"name": "tag_id", "description": "System generated unique ID of the tag", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tag_name": {"name": "tag_name", "description": "User-facing name of the tag.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the tag was created", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "asana_source://models/stg_asana.yml", "compiled_path": "target/compiled/asana_source/models/stg_asana__tag.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_asana", "materialized": "table"}, "created_at": 1666801517.401031, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__tag_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    color\n    \n as \n    \n    color\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    message\n    \n as \n    \n    message\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    notes\n    \n as \n    \n    notes\n    \n, \n    \n    \n    workspace_id\n    \n as \n    \n    workspace_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as tag_id,\n        name as tag_name,\n        cast(created_at as TIMESTAMP) as created_at\n    from fields\n    where not _fivetran_deleted\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__tag`"}, "model.asana_source.stg_asana__project_task": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.asana_source.get_project_task_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.asana_source.stg_asana__project_task_tmp", "model.asana_source.stg_asana__project_task_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_asana", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests_stg_asana", "fqn": ["asana_source", "stg_asana__project_task"], "unique_id": "model.asana_source.stg_asana__project_task", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_asana__project_task_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_asana__project_task_tmp')),\n                staging_columns=get_project_task_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        project_id,\n        task_id\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "stg_asana__project_task.sql", "original_file_path": "models/stg_asana__project_task.sql", "name": "stg_asana__project_task", "alias": "stg_asana__project_task", "checksum": {"name": "sha256", "checksum": "95153bcb4c7e9ccc7302710d14cf8d8120817eece7378f1f7c26f27b48129469"}, "tags": [], "refs": [["stg_asana__project_task_tmp"], ["stg_asana__project_task_tmp"]], "sources": [], "metrics": [], "description": "Table of tasks and the project(s) they each belong to. If a project doesn't have a task, it won't be in here (and vice versa)", "columns": {"project_id": {"name": "project_id", "description": "Foreign key referencing the ID of the PROJECT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_id": {"name": "task_id", "description": "Foreign key referencing the ID of the TASK", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "asana_source://models/stg_asana.yml", "compiled_path": "target/compiled/asana_source/models/stg_asana__project_task.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_asana", "materialized": "table"}, "created_at": 1666801517.3984342, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project_task_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    project_id\n    \n as \n    \n    project_id\n    \n, \n    \n    \n    task_id\n    \n as \n    \n    task_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        project_id,\n        task_id\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project_task`"}, "model.asana_source.stg_asana__project": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.asana_source.get_project_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp"], "nodes": ["model.asana_source.stg_asana__project_tmp", "model.asana_source.stg_asana__project_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_asana", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests_stg_asana", "fqn": ["asana_source", "stg_asana__project"], "unique_id": "model.asana_source.stg_asana__project", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_asana__project_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_asana__project_tmp')),\n                staging_columns=get_project_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as project_id,\n        archived as is_archived,\n        cast(created_at as {{ dbt.type_timestamp() }}) as created_at,\n        current_status,\n        cast(due_date as {{ dbt.type_timestamp() }}) as due_date,\n        cast(modified_at as {{ dbt.type_timestamp() }}) as modified_at,\n        name as project_name,\n        owner_id as owner_user_id,\n        public as is_public,\n        team_id,\n        workspace_id,\n        notes\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "stg_asana__project.sql", "original_file_path": "models/stg_asana__project.sql", "name": "stg_asana__project", "alias": "stg_asana__project", "checksum": {"name": "sha256", "checksum": "650704717a66d2223ae458831cbcfdfa0a1045be4e365f0731a1a88f1fc77162"}, "tags": [], "refs": [["stg_asana__project_tmp"], ["stg_asana__project_tmp"]], "sources": [], "metrics": [], "description": "Table containing all projects", "columns": {"project_id": {"name": "project_id", "description": "System-generated unique ID of the project", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_archived": {"name": "is_archived", "description": "Boolean representing if the project has been archived in the UI", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the project was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_status": {"name": "current_status", "description": "The most recent progress status update for the project (free-form string)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "The date the project is due on, if given", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modified_at": {"name": "modified_at", "description": "Timestamp of when the project was last modified (doesn't include comments or tasks)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_name": {"name": "project_name", "description": "The user-facing name of the project", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_user_id": {"name": "owner_user_id", "description": "Foreign key referencing the USER who owns the project.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_public": {"name": "is_public", "description": "Boolean that is true if the project is public to all users in the organization", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Foreign key referencing the TEAM that the project is shared with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "workspace_id": {"name": "workspace_id", "description": "The ID of the organization's entire Asana workspace. Not relevant unless you're looking at multiple orgs", "meta": {}, "data_type": null, "quote": null, "tags": []}, "notes": {"name": "notes", "description": "Free-form textual notes associated with the project.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "asana_source://models/stg_asana.yml", "compiled_path": "target/compiled/asana_source/models/stg_asana__project.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_asana", "materialized": "table"}, "created_at": 1666801517.397841, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    archived\n    \n as \n    \n    archived\n    \n, \n    \n    \n    color\n    \n as \n    \n    color\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    current_status\n    \n as \n    \n    current_status\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    modified_at\n    \n as \n    \n    modified_at\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    notes\n    \n as \n    \n    notes\n    \n, \n    \n    \n    owner_id\n    \n as \n    \n    owner_id\n    \n, \n    \n    \n    public\n    \n as \n    \n    public\n    \n, \n    \n    \n    team_id\n    \n as \n    \n    team_id\n    \n, \n    \n    \n    workspace_id\n    \n as \n    \n    workspace_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as project_id,\n        archived as is_archived,\n        cast(created_at as TIMESTAMP) as created_at,\n        current_status,\n        cast(due_date as TIMESTAMP) as due_date,\n        cast(modified_at as TIMESTAMP) as modified_at,\n        name as project_name,\n        owner_id as owner_user_id,\n        public as is_public,\n        team_id,\n        workspace_id,\n        notes\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project`"}, "model.asana_source.stg_asana__task_follower": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.asana_source.get_task_follower_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.asana_source.stg_asana__task_follower_tmp", "model.asana_source.stg_asana__task_follower_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_asana", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests_stg_asana", "fqn": ["asana_source", "stg_asana__task_follower"], "unique_id": "model.asana_source.stg_asana__task_follower", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_asana__task_follower_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_asana__task_follower_tmp')),\n                staging_columns=get_task_follower_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        task_id,\n        user_id\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "stg_asana__task_follower.sql", "original_file_path": "models/stg_asana__task_follower.sql", "name": "stg_asana__task_follower", "alias": "stg_asana__task_follower", "checksum": {"name": "sha256", "checksum": "8eb6b3969960cac92d44612ecb9f7486545bb7e92bcf1c96064a4f384ffed3e4"}, "tags": [], "refs": [["stg_asana__task_follower_tmp"], ["stg_asana__task_follower_tmp"]], "sources": [], "metrics": [], "description": "Table of tasks with the users that are following them. Tasks without users do not appear here.", "columns": {"task_id": {"name": "task_id", "description": "Foreign key referencing the ID of the TASK being followed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "Foreign key referencing the ID of the USER following the task.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "asana_source://models/stg_asana.yml", "compiled_path": "target/compiled/asana_source/models/stg_asana__task_follower.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_asana", "materialized": "table"}, "created_at": 1666801517.404187, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task_follower_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    task_id\n    \n as \n    \n    task_id\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        task_id,\n        user_id\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task_follower`"}, "model.asana_source.stg_asana__story_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.asana_source.asana.story"]}, "config": {"enabled": true, "alias": null, "schema": "stg_asana", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests_stg_asana", "fqn": ["asana_source", "tmp", "stg_asana__story_tmp"], "unique_id": "model.asana_source.stg_asana__story_tmp", "raw_code": "select * \nfrom {{ var('story') }}", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "tmp/stg_asana__story_tmp.sql", "original_file_path": "models/tmp/stg_asana__story_tmp.sql", "name": "stg_asana__story_tmp", "alias": "stg_asana__story_tmp", "checksum": {"name": "sha256", "checksum": "699a08f0282626b405f0b4e5216cdbaa879e399314594a61b63ff4a7b042f677"}, "tags": [], "refs": [], "sources": [["asana", "story"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana_source/models/tmp/stg_asana__story_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_asana", "materialized": "table"}, "created_at": 1666801517.212262, "compiled_code": "select * \nfrom `dbt-package-testing`.`asana_integrations_tests`.`story_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__story_tmp`"}, "model.asana_source.stg_asana__team_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.asana_source.asana.team"]}, "config": {"enabled": true, "alias": null, "schema": "stg_asana", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests_stg_asana", "fqn": ["asana_source", "tmp", "stg_asana__team_tmp"], "unique_id": "model.asana_source.stg_asana__team_tmp", "raw_code": "select * \nfrom {{ var('team') }}", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "tmp/stg_asana__team_tmp.sql", "original_file_path": "models/tmp/stg_asana__team_tmp.sql", "name": "stg_asana__team_tmp", "alias": "stg_asana__team_tmp", "checksum": {"name": "sha256", "checksum": "8c107692c9394962da82e0c2460045e6686d962c1eefe0cff564c618aed7a17d"}, "tags": [], "refs": [], "sources": [["asana", "team"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana_source/models/tmp/stg_asana__team_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_asana", "materialized": "table"}, "created_at": 1666801517.2160408, "compiled_code": "select * \nfrom `dbt-package-testing`.`asana_integrations_tests`.`team_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__team_tmp`"}, "model.asana_source.stg_asana__task_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.asana_source.asana.task"]}, "config": {"enabled": true, "alias": null, "schema": "stg_asana", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests_stg_asana", "fqn": ["asana_source", "tmp", "stg_asana__task_tmp"], "unique_id": "model.asana_source.stg_asana__task_tmp", "raw_code": "select * \nfrom {{ var('task') }}", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "tmp/stg_asana__task_tmp.sql", "original_file_path": "models/tmp/stg_asana__task_tmp.sql", "name": "stg_asana__task_tmp", "alias": "stg_asana__task_tmp", "checksum": {"name": "sha256", "checksum": "ffb26301a2c952951441cf068b916101fb5cbb9841242e3511499262ffabd879"}, "tags": [], "refs": [], "sources": [["asana", "task"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana_source/models/tmp/stg_asana__task_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_asana", "materialized": "table"}, "created_at": 1666801517.2190988, "compiled_code": "select * \nfrom `dbt-package-testing`.`asana_integrations_tests`.`task_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task_tmp`"}, "model.asana_source.stg_asana__task_follower_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.asana_source.asana.task_follower"]}, "config": {"enabled": true, "alias": null, "schema": "stg_asana", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests_stg_asana", "fqn": ["asana_source", "tmp", "stg_asana__task_follower_tmp"], "unique_id": "model.asana_source.stg_asana__task_follower_tmp", "raw_code": "select * \nfrom {{ var('task_follower') }}", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "tmp/stg_asana__task_follower_tmp.sql", "original_file_path": "models/tmp/stg_asana__task_follower_tmp.sql", "name": "stg_asana__task_follower_tmp", "alias": "stg_asana__task_follower_tmp", "checksum": {"name": "sha256", "checksum": "d03af085dd9a99b6a0d491b3729504de132fe2a3c8b930f72cb6d6774f714896"}, "tags": [], "refs": [], "sources": [["asana", "task_follower"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana_source/models/tmp/stg_asana__task_follower_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_asana", "materialized": "table"}, "created_at": 1666801517.222126, "compiled_code": "select * \nfrom `dbt-package-testing`.`asana_integrations_tests`.`task_follower_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task_follower_tmp`"}, "model.asana_source.stg_asana__tag_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.asana_source.asana.tag"]}, "config": {"enabled": true, "alias": null, "schema": "stg_asana", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests_stg_asana", "fqn": ["asana_source", "tmp", "stg_asana__tag_tmp"], "unique_id": "model.asana_source.stg_asana__tag_tmp", "raw_code": "select * \nfrom {{ var('tag') }}", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "tmp/stg_asana__tag_tmp.sql", "original_file_path": "models/tmp/stg_asana__tag_tmp.sql", "name": "stg_asana__tag_tmp", "alias": "stg_asana__tag_tmp", "checksum": {"name": "sha256", "checksum": "c394a64eb436d4592c23e4c1876d4e001907bdf6de6fa1267f9bd47c83678711"}, "tags": [], "refs": [], "sources": [["asana", "tag"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana_source/models/tmp/stg_asana__tag_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_asana", "materialized": "table"}, "created_at": 1666801517.225228, "compiled_code": "select * \nfrom `dbt-package-testing`.`asana_integrations_tests`.`tag_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__tag_tmp`"}, "model.asana_source.stg_asana__task_section_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.asana_source.asana.task_section"]}, "config": {"enabled": true, "alias": null, "schema": "stg_asana", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests_stg_asana", "fqn": ["asana_source", "tmp", "stg_asana__task_section_tmp"], "unique_id": "model.asana_source.stg_asana__task_section_tmp", "raw_code": "select * \nfrom {{ var('task_section') }}", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "tmp/stg_asana__task_section_tmp.sql", "original_file_path": "models/tmp/stg_asana__task_section_tmp.sql", "name": "stg_asana__task_section_tmp", "alias": "stg_asana__task_section_tmp", "checksum": {"name": "sha256", "checksum": "453db03084996d17e88a0f1ffda90ee349df4f262db7a3523578f5d4c6a4e5e6"}, "tags": [], "refs": [], "sources": [["asana", "task_section"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana_source/models/tmp/stg_asana__task_section_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_asana", "materialized": "table"}, "created_at": 1666801517.2282398, "compiled_code": "select * \nfrom `dbt-package-testing`.`asana_integrations_tests`.`task_section_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task_section_tmp`"}, "model.asana_source.stg_asana__task_tag_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.asana_source.asana.task_tag"]}, "config": {"enabled": true, "alias": null, "schema": "stg_asana", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests_stg_asana", "fqn": ["asana_source", "tmp", "stg_asana__task_tag_tmp"], "unique_id": "model.asana_source.stg_asana__task_tag_tmp", "raw_code": "select * \nfrom {{ var('task_tag') }}", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "tmp/stg_asana__task_tag_tmp.sql", "original_file_path": "models/tmp/stg_asana__task_tag_tmp.sql", "name": "stg_asana__task_tag_tmp", "alias": "stg_asana__task_tag_tmp", "checksum": {"name": "sha256", "checksum": "00c6fa0be01310e2a827ce46dbadeb2cf3cc24dda4dc22142ed81b7bb0f85a4d"}, "tags": [], "refs": [], "sources": [["asana", "task_tag"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana_source/models/tmp/stg_asana__task_tag_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_asana", "materialized": "table"}, "created_at": 1666801517.231253, "compiled_code": "select * \nfrom `dbt-package-testing`.`asana_integrations_tests`.`task_tag_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task_tag_tmp`"}, "model.asana_source.stg_asana__user_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.asana_source.asana.user"]}, "config": {"enabled": true, "alias": null, "schema": "stg_asana", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests_stg_asana", "fqn": ["asana_source", "tmp", "stg_asana__user_tmp"], "unique_id": "model.asana_source.stg_asana__user_tmp", "raw_code": "select * \nfrom {{ var('user') }}", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "tmp/stg_asana__user_tmp.sql", "original_file_path": "models/tmp/stg_asana__user_tmp.sql", "name": "stg_asana__user_tmp", "alias": "stg_asana__user_tmp", "checksum": {"name": "sha256", "checksum": "6a45d1112d3ae79f22784f5fd5723a27b7894d57aea5795a37921842affc0085"}, "tags": [], "refs": [], "sources": [["asana", "user"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana_source/models/tmp/stg_asana__user_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_asana", "materialized": "table"}, "created_at": 1666801517.234872, "compiled_code": "select * \nfrom `dbt-package-testing`.`asana_integrations_tests`.`user_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user_tmp`"}, "model.asana_source.stg_asana__section_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.asana_source.asana.section"]}, "config": {"enabled": true, "alias": null, "schema": "stg_asana", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests_stg_asana", "fqn": ["asana_source", "tmp", "stg_asana__section_tmp"], "unique_id": "model.asana_source.stg_asana__section_tmp", "raw_code": "select * \nfrom {{ var('section') }}", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "tmp/stg_asana__section_tmp.sql", "original_file_path": "models/tmp/stg_asana__section_tmp.sql", "name": "stg_asana__section_tmp", "alias": "stg_asana__section_tmp", "checksum": {"name": "sha256", "checksum": "83155348ae27cce121000df7d3d07cd4f734098dca2747df7dd5affde1c84188"}, "tags": [], "refs": [], "sources": [["asana", "section"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana_source/models/tmp/stg_asana__section_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_asana", "materialized": "table"}, "created_at": 1666801517.237951, "compiled_code": "select * \nfrom `dbt-package-testing`.`asana_integrations_tests`.`section_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__section_tmp`"}, "model.asana_source.stg_asana__project_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.asana_source.asana.project"]}, "config": {"enabled": true, "alias": null, "schema": "stg_asana", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests_stg_asana", "fqn": ["asana_source", "tmp", "stg_asana__project_tmp"], "unique_id": "model.asana_source.stg_asana__project_tmp", "raw_code": "select * \nfrom {{ var('project') }}", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "tmp/stg_asana__project_tmp.sql", "original_file_path": "models/tmp/stg_asana__project_tmp.sql", "name": "stg_asana__project_tmp", "alias": "stg_asana__project_tmp", "checksum": {"name": "sha256", "checksum": "2c1320ac7d1c876b9aa540a4aa0a07bcacfa92e35d74a60cb09a5948ac6869ad"}, "tags": [], "refs": [], "sources": [["asana", "project"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana_source/models/tmp/stg_asana__project_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_asana", "materialized": "table"}, "created_at": 1666801517.2409751, "compiled_code": "select * \nfrom `dbt-package-testing`.`asana_integrations_tests`.`project_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project_tmp`"}, "model.asana_source.stg_asana__project_task_tmp": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.asana_source.asana.project_task"]}, "config": {"enabled": true, "alias": null, "schema": "stg_asana", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests_stg_asana", "fqn": ["asana_source", "tmp", "stg_asana__project_task_tmp"], "unique_id": "model.asana_source.stg_asana__project_task_tmp", "raw_code": "select * \nfrom {{ var('project_task') }}", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "tmp/stg_asana__project_task_tmp.sql", "original_file_path": "models/tmp/stg_asana__project_task_tmp.sql", "name": "stg_asana__project_task_tmp", "alias": "stg_asana__project_task_tmp", "checksum": {"name": "sha256", "checksum": "2ad5271ec001d7cb80698feb2fcc08b189f360d756f86feb074bbd904002b10e"}, "tags": [], "refs": [], "sources": [["asana", "project_task"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana_source/models/tmp/stg_asana__project_task_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg_asana", "materialized": "table"}, "created_at": 1666801517.243978, "compiled_code": "select * \nfrom `dbt-package-testing`.`asana_integrations_tests`.`project_task_data`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project_task_tmp`"}, "model.asana.asana__daily_metrics": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt_utils.date_spine", "macro.dbt.datediff", "macro.dbt.date_trunc", "macro.dbt.type_timestamp", "macro.dbt.run_query"], "nodes": ["model.asana.asana__task"]}, "config": {"enabled": true, "alias": null, "schema": "asana", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests_asana", "fqn": ["asana", "asana__daily_metrics"], "unique_id": "model.asana.asana__daily_metrics", "raw_code": "with task as (\n\n    select *\n    from {{ ref('asana__task') }}\n),\n\n\nspine as (\n\n    {% if execute %}\n    {% set first_date_query %}\n        select  \n            cast(min(created_at) as {{ dbt.type_timestamp() }}) as min_date \n        from {{ ref('asana__task') }}\n    {% endset %}\n    {% set first_date = run_query(first_date_query).columns[0][0]|string %}\n    \n    {% else %} {% set first_date = \"2016-01-01\" %}\n    {% endif %}\n\n\n    {{ dbt_utils.date_spine(\n        datepart = \"day\", \n        start_date =  \"cast('\" ~ first_date[0:10] ~ \"'as date)\", \n        end_date = dbt.dateadd(\"week\", 1, \"current_date\") ) \n    }} \n\n),\n\nspine_tasks as (\n        \n    select\n        spine.date_day,\n        sum( {{ dbt.datediff('task.created_at', 'spine.date_day', 'day') }} ) as total_days_open,\n        count( task.task_id) as number_of_tasks_open,\n        sum( case when cast(spine.date_day as timestamp) >= {{ dbt.date_trunc('day', 'task.first_assigned_at') }} then 1 else 0 end) as number_of_tasks_open_assigned,\n        sum( {{ dbt.datediff('task.first_assigned_at', 'spine.date_day', 'day') }} ) as total_days_open_assigned,\n        sum( case when cast(spine.date_day as timestamp) = {{ dbt.date_trunc('day', 'task.created_at') }} then 1 else 0 end) as number_of_tasks_created,\n        sum( case when cast(spine.date_day as timestamp) = {{ dbt.date_trunc('day', 'task.completed_at') }} then 1 else 0 end) as number_of_tasks_completed\n\n    from spine\n    join task -- can't do left join with no =  \n        on cast(spine.date_day as timestamp) >= {{ dbt.date_trunc('day', 'task.created_at') }}\n        and case when task.is_completed then \n            cast(spine.date_day as timestamp) < {{ dbt.date_trunc('day', 'task.completed_at') }}\n            else true end\n\n    group by 1\n),\n\njoin_metrics as (\n\n    select\n        spine.date_day,\n        coalesce(spine_tasks.number_of_tasks_open, 0) as number_of_tasks_open,\n        coalesce(spine_tasks.number_of_tasks_open_assigned, 0) as number_of_tasks_open_assigned,\n        coalesce(spine_tasks.number_of_tasks_created, 0) as number_of_tasks_created,\n        coalesce(spine_tasks.number_of_tasks_completed, 0) as number_of_tasks_completed,\n\n        round(nullif(spine_tasks.total_days_open,0) * 1.0 / nullif(spine_tasks.number_of_tasks_open,0), 0) as avg_days_open,\n        round(nullif(spine_tasks.total_days_open_assigned,0) * 1.0 / nullif(spine_tasks.number_of_tasks_open_assigned,0), 0) as avg_days_open_assigned\n\n    from \n    spine\n    left join spine_tasks on spine_tasks.date_day = spine.date_day \n\n)\n\nselect * from join_metrics\norder by date_day desc", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "asana__daily_metrics.sql", "original_file_path": "models/asana__daily_metrics.sql", "name": "asana__daily_metrics", "alias": "asana__daily_metrics", "checksum": {"name": "sha256", "checksum": "41f8d6d5ba94eacd2d9f47a00c49f66d75347bb7ce10a9da1ccd09788edc7f65"}, "tags": [], "refs": [["asana__task"]], "sources": [], "metrics": [], "description": "Table of task metrics per each day", "columns": {"date_day": {"name": "date_day", "description": "Unique day for which metrics are calculated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number_of_tasks_open": {"name": "number_of_tasks_open", "description": "The number of tasks open at that point in time", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number_of_tasks_open_assigned": {"name": "number_of_tasks_open_assigned", "description": "The number of tasks that are open on that day and have been assigned", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number_of_tasks_created": {"name": "number_of_tasks_created", "description": "The number of tasks created on that day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number_of_tasks_completed": {"name": "number_of_tasks_completed", "description": "The number of tasks completed on that day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_days_open": {"name": "avg_days_open", "description": "The average time that all tasks open on this day have spent open.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_days_open_assigned": {"name": "avg_days_open_assigned", "description": "The average time that all tasks open on this day have spent open and assigned.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "asana://models/asana.yml", "compiled_path": "target/compiled/asana/models/asana__daily_metrics.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "asana", "materialized": "table"}, "created_at": 1666801517.47356, "compiled_code": "with task as (\n\n    select *\n    from `dbt-package-testing`.`asana_integration_tests_asana`.`asana__task`\n),\n\n\nspine as (\n\n    \n    \n    \n    \n    \n\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1157\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( cast('2019-09-02'as date) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= \n\n        datetime_add(\n            cast( current_date as datetime),\n        interval 1 week\n        )\n\n\n\n)\n\nselect * from filtered\n\n \n\n),\n\nspine_tasks as (\n        \n    select\n        spine.date_day,\n        sum( \n\n    datetime_diff(\n        cast(spine.date_day as datetime),\n        cast(task.created_at as datetime),\n        day\n    )\n\n   ) as total_days_open,\n        count( task.task_id) as number_of_tasks_open,\n        sum( case when cast(spine.date_day as timestamp) >= timestamp_trunc(\n        cast(task.first_assigned_at as timestamp),\n        day\n    ) then 1 else 0 end) as number_of_tasks_open_assigned,\n        sum( \n\n    datetime_diff(\n        cast(spine.date_day as datetime),\n        cast(task.first_assigned_at as datetime),\n        day\n    )\n\n   ) as total_days_open_assigned,\n        sum( case when cast(spine.date_day as timestamp) = timestamp_trunc(\n        cast(task.created_at as timestamp),\n        day\n    ) then 1 else 0 end) as number_of_tasks_created,\n        sum( case when cast(spine.date_day as timestamp) = timestamp_trunc(\n        cast(task.completed_at as timestamp),\n        day\n    ) then 1 else 0 end) as number_of_tasks_completed\n\n    from spine\n    join task -- can't do left join with no =  \n        on cast(spine.date_day as timestamp) >= timestamp_trunc(\n        cast(task.created_at as timestamp),\n        day\n    )\n        and case when task.is_completed then \n            cast(spine.date_day as timestamp) < timestamp_trunc(\n        cast(task.completed_at as timestamp),\n        day\n    )\n            else true end\n\n    group by 1\n),\n\njoin_metrics as (\n\n    select\n        spine.date_day,\n        coalesce(spine_tasks.number_of_tasks_open, 0) as number_of_tasks_open,\n        coalesce(spine_tasks.number_of_tasks_open_assigned, 0) as number_of_tasks_open_assigned,\n        coalesce(spine_tasks.number_of_tasks_created, 0) as number_of_tasks_created,\n        coalesce(spine_tasks.number_of_tasks_completed, 0) as number_of_tasks_completed,\n\n        round(nullif(spine_tasks.total_days_open,0) * 1.0 / nullif(spine_tasks.number_of_tasks_open,0), 0) as avg_days_open,\n        round(nullif(spine_tasks.total_days_open_assigned,0) * 1.0 / nullif(spine_tasks.number_of_tasks_open_assigned,0), 0) as avg_days_open_assigned\n\n    from \n    spine\n    left join spine_tasks on spine_tasks.date_day = spine.date_day \n\n)\n\nselect * from join_metrics\norder by date_day desc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`asana_integration_tests_asana`.`asana__daily_metrics`"}, "model.asana.asana__user": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.string_agg"], "nodes": ["model.asana.int_asana__user_task_metrics", "model.asana_source.stg_asana__user", "model.asana.int_asana__project_user"]}, "config": {"enabled": true, "alias": null, "schema": "asana", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests_asana", "fqn": ["asana", "asana__user"], "unique_id": "model.asana.asana__user", "raw_code": "with user_task_metrics as (\n\n    select * \n    from {{ ref('int_asana__user_task_metrics') }}\n),\n\nasana_user as (\n    select * \n    from {{ var('user') }}\n),\n\nproject_user as (\n    \n    select * \n    from {{ ref('int_asana__project_user') }}\n\n    where currently_working_on or role = 'owner'\n),\n\ncount_user_projects as (\n\n    select \n        user_id,\n        sum(case when role = 'owner' then 1\n            else 0 end) as number_of_projects_owned,\n         sum(case when currently_working_on = true then 1\n            else 0 end) as number_of_projects_currently_assigned_to\n\n    from project_user\n\n    group by 1\n\n),\n\nunique_user_projects as (\n    select\n        user_id,\n        project_id,\n        project_name\n\n    from project_user\n    group by 1,2,3\n),\n\n\nagg_user_projects as (\n\n    select \n    user_id,\n    {{ fivetran_utils.string_agg( 'project_name', \"', '\" )}} as projects_working_on\n\n    from unique_user_projects\n    group by 1\n\n),\n\nuser_join as (\n\n    select \n        asana_user.*,\n        coalesce(user_task_metrics.number_of_open_tasks, 0) as number_of_open_tasks,\n        coalesce(user_task_metrics.number_of_tasks_completed, 0) as number_of_tasks_completed,\n        round(user_task_metrics.avg_close_time_days, 0) as avg_close_time_days,\n\n        coalesce(count_user_projects.number_of_projects_owned, 0) as number_of_projects_owned,\n        coalesce(count_user_projects.number_of_projects_currently_assigned_to, 0) as number_of_projects_currently_assigned_to,\n        agg_user_projects.projects_working_on\n    \n    from asana_user \n\n    left join user_task_metrics on asana_user.user_id = user_task_metrics.user_id\n    left join count_user_projects on asana_user.user_id = count_user_projects.user_id\n    left join agg_user_projects on asana_user.user_id = agg_user_projects.user_id\n)\n\nselect * from user_join", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "asana__user.sql", "original_file_path": "models/asana__user.sql", "name": "asana__user", "alias": "asana__user", "checksum": {"name": "sha256", "checksum": "88ccd963cf4ee613643a10749d93ce8c912a38c2672f70c54bd88397607c7a47"}, "tags": [], "refs": [["int_asana__user_task_metrics"], ["stg_asana__user"], ["int_asana__project_user"]], "sources": [], "metrics": [], "description": "Enriched user table consisting of base user info + metrics around tasks and completions", "columns": {"user_id": {"name": "user_id", "description": "System generated unique ID of the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_name": {"name": "user_name", "description": "Name of the user as it appears in the UI", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "The user's email", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number_of_open_tasks": {"name": "number_of_open_tasks", "description": "Count of the currently open tasks assigned to this user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number_of_tasks_completed": {"name": "number_of_tasks_completed", "description": "Count of the tasks that this user has completed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_close_time_days": {"name": "avg_close_time_days", "description": "The avg number of days it has taken the user to complete tasks once assigned to them.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number_of_projects_owned": {"name": "number_of_projects_owned", "description": "Count of the projects that this user is the owner of (excludes archived projects)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number_of_projects_currently_assigned_to": {"name": "number_of_projects_currently_assigned_to", "description": "Count of the projects that the user is currently assigned open tasks to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "projects_working_on": {"name": "projects_working_on", "description": "Aggregated list of the projects that the user is currently assigned to or owns", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "asana://models/asana.yml", "compiled_path": "target/compiled/asana/models/asana__user.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "asana", "materialized": "table"}, "created_at": 1666801517.465564, "compiled_code": "with  __dbt__cte__int_asana__user_task_metrics as (\nwith tasks as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_asana`.`asana__task`\n    where assignee_user_id is not null\n\n), \n\nagg_user_tasks as (\n\n    select \n    assignee_user_id as user_id,\n    sum(case when not is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when is_completed then days_since_last_assignment else 0 end) as days_assigned_this_user -- will divde later for avg\n\n    from  tasks\n\n    group by 1\n\n),\n\nfinal as (\n    select\n        agg_user_tasks.user_id,\n        agg_user_tasks.number_of_open_tasks,\n        agg_user_tasks.number_of_tasks_completed,\n        nullif(agg_user_tasks.days_assigned_this_user, 0) * 1.0 / nullif(agg_user_tasks.number_of_tasks_completed, 0) as avg_close_time_days\n\n    from \n    agg_user_tasks \n)\n\nselect * from final\n),  __dbt__cte__int_asana__task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n),  __dbt__cte__int_asana__project_user as (\nwith project_tasks as (\n    \n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project_task`\n),\n\nassigned_tasks as (\n    \n    select * \n    from __dbt__cte__int_asana__task_assignee\n    where has_assignee\n    \n),\n\nproject as (\n    \n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project`\n\n    where not is_archived\n\n),\n\nproject_assignee as (\n\n    select\n        project_tasks.project_id,\n        project_tasks.task_id,\n        assigned_tasks.assignee_user_id,\n        assigned_tasks.assignee_name,\n        not assigned_tasks.is_completed as currently_working_on\n\n    from project_tasks \n    join assigned_tasks \n        on assigned_tasks.task_id = project_tasks.task_id\n\n),\n\nproject_owner as (\n\n    select \n        project_id,\n        project_name,\n        owner_user_id\n\n    from project\n    \n    where owner_user_id is not null\n),\n\nproject_user as (\n    \n    select\n        project_id,\n        project_name,\n        owner_user_id as user_id,\n        'owner' as role,\n        null as currently_working_on\n    \n    from project_owner\n\n    union all\n\n    select\n        project.project_id,\n        project.project_name,\n        project_assignee.assignee_user_id as user_id,\n        'task assignee' as role,\n        project_assignee.currently_working_on\n    \n    from project \n    \n    join project_assignee \n        on project.project_id = project_assignee.project_id\n    group by 1,2,3,4,5\n\n)\n\n\nselect * from project_user\n),user_task_metrics as (\n\n    select * \n    from __dbt__cte__int_asana__user_task_metrics\n),\n\nasana_user as (\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\nproject_user as (\n    \n    select * \n    from __dbt__cte__int_asana__project_user\n\n    where currently_working_on or role = 'owner'\n),\n\ncount_user_projects as (\n\n    select \n        user_id,\n        sum(case when role = 'owner' then 1\n            else 0 end) as number_of_projects_owned,\n         sum(case when currently_working_on = true then 1\n            else 0 end) as number_of_projects_currently_assigned_to\n\n    from project_user\n\n    group by 1\n\n),\n\nunique_user_projects as (\n    select\n        user_id,\n        project_id,\n        project_name\n\n    from project_user\n    group by 1,2,3\n),\n\n\nagg_user_projects as (\n\n    select \n    user_id,\n    \n    string_agg(project_name, ', ')\n\n as projects_working_on\n\n    from unique_user_projects\n    group by 1\n\n),\n\nuser_join as (\n\n    select \n        asana_user.*,\n        coalesce(user_task_metrics.number_of_open_tasks, 0) as number_of_open_tasks,\n        coalesce(user_task_metrics.number_of_tasks_completed, 0) as number_of_tasks_completed,\n        round(user_task_metrics.avg_close_time_days, 0) as avg_close_time_days,\n\n        coalesce(count_user_projects.number_of_projects_owned, 0) as number_of_projects_owned,\n        coalesce(count_user_projects.number_of_projects_currently_assigned_to, 0) as number_of_projects_currently_assigned_to,\n        agg_user_projects.projects_working_on\n    \n    from asana_user \n\n    left join user_task_metrics on asana_user.user_id = user_task_metrics.user_id\n    left join count_user_projects on asana_user.user_id = count_user_projects.user_id\n    left join agg_user_projects on asana_user.user_id = agg_user_projects.user_id\n)\n\nselect * from user_join", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.int_asana__user_task_metrics", "sql": " __dbt__cte__int_asana__user_task_metrics as (\nwith tasks as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_asana`.`asana__task`\n    where assignee_user_id is not null\n\n), \n\nagg_user_tasks as (\n\n    select \n    assignee_user_id as user_id,\n    sum(case when not is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when is_completed then days_since_last_assignment else 0 end) as days_assigned_this_user -- will divde later for avg\n\n    from  tasks\n\n    group by 1\n\n),\n\nfinal as (\n    select\n        agg_user_tasks.user_id,\n        agg_user_tasks.number_of_open_tasks,\n        agg_user_tasks.number_of_tasks_completed,\n        nullif(agg_user_tasks.days_assigned_this_user, 0) * 1.0 / nullif(agg_user_tasks.number_of_tasks_completed, 0) as avg_close_time_days\n\n    from \n    agg_user_tasks \n)\n\nselect * from final\n)"}, {"id": "model.asana.int_asana__task_assignee", "sql": " __dbt__cte__int_asana__task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n)"}, {"id": "model.asana.int_asana__project_user", "sql": " __dbt__cte__int_asana__project_user as (\nwith project_tasks as (\n    \n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project_task`\n),\n\nassigned_tasks as (\n    \n    select * \n    from __dbt__cte__int_asana__task_assignee\n    where has_assignee\n    \n),\n\nproject as (\n    \n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project`\n\n    where not is_archived\n\n),\n\nproject_assignee as (\n\n    select\n        project_tasks.project_id,\n        project_tasks.task_id,\n        assigned_tasks.assignee_user_id,\n        assigned_tasks.assignee_name,\n        not assigned_tasks.is_completed as currently_working_on\n\n    from project_tasks \n    join assigned_tasks \n        on assigned_tasks.task_id = project_tasks.task_id\n\n),\n\nproject_owner as (\n\n    select \n        project_id,\n        project_name,\n        owner_user_id\n\n    from project\n    \n    where owner_user_id is not null\n),\n\nproject_user as (\n    \n    select\n        project_id,\n        project_name,\n        owner_user_id as user_id,\n        'owner' as role,\n        null as currently_working_on\n    \n    from project_owner\n\n    union all\n\n    select\n        project.project_id,\n        project.project_name,\n        project_assignee.assignee_user_id as user_id,\n        'task assignee' as role,\n        project_assignee.currently_working_on\n    \n    from project \n    \n    join project_assignee \n        on project.project_id = project_assignee.project_id\n    group by 1,2,3,4,5\n\n)\n\n\nselect * from project_user\n)"}], "relation_name": "`dbt-package-testing`.`asana_integration_tests_asana`.`asana__user`"}, "model.asana.asana__task": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.asana_source.stg_asana__task", "model.asana.int_asana__task_comments", "model.asana.int_asana__task_followers", "model.asana.int_asana__task_open_length", "model.asana.int_asana__task_tags", "model.asana.int_asana__task_assignee", "model.asana.int_asana__task_projects", "model.asana.int_asana__subtask_parent", "model.asana.int_asana__task_first_modifier"]}, "config": {"enabled": true, "alias": null, "schema": "asana", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests_asana", "fqn": ["asana", "asana__task"], "unique_id": "model.asana.asana__task", "raw_code": "with task as (\n    select *\n    from {{ var('task') }}\n),\n\ntask_comments as (\n\n    select * \n    from {{ ref('int_asana__task_comments') }}\n),\n\ntask_followers as (\n\n    select *\n    from {{ ref('int_asana__task_followers') }}\n),\n\ntask_open_length as (\n\n    select *\n    from {{ ref('int_asana__task_open_length') }}\n),\n\ntask_tags as (\n\n    select *\n    from {{ ref('int_asana__task_tags') }}\n),\n\ntask_assignee as (\n\n    select * \n    from  {{ ref('int_asana__task_assignee') }}\n    where has_assignee\n),\n\ntask_projects as (\n\n    select *\n    from {{ ref('int_asana__task_projects') }}\n),\n\nsubtask_parent as (\n\n    select * \n    from {{ ref('int_asana__subtask_parent') }}\n\n),\n\ntask_first_modifier as (\n    \n    select *\n    from {{ ref('int_asana__task_first_modifier') }}\n),\n\ntask_join as (\n\n    select\n        task.*,\n        concat('https://app.asana.com/0/0/', task.task_id) as task_link,\n        task_assignee.assignee_name,\n        task_assignee.assignee_email,\n        \n        task_open_length.days_open, \n        task_open_length.is_currently_assigned,\n        task_open_length.has_been_assigned,\n        task_open_length.days_since_last_assignment, -- is null for never-assigned tasks\n        task_open_length.days_since_first_assignment, -- is null for never-assigned tasks\n        task_open_length.last_assigned_at,\n        task_open_length.first_assigned_at, \n\n        task_first_modifier.first_modifier_user_id,\n        task_first_modifier.first_modifier_name,\n\n        task_comments.conversation, \n        coalesce(task_comments.number_of_comments, 0) as number_of_comments, \n        task_followers.followers,\n        coalesce(task_followers.number_of_followers, 0) as number_of_followers,\n        task_tags.tags, \n        coalesce(task_tags.number_of_tags, 0) as number_of_tags, \n        \n        task_projects.projects_sections,\n\n        subtask_parent.subtask_id is not null as is_subtask, -- parent id is in task.*\n        subtask_parent.parent_task_name,\n        subtask_parent.parent_assignee_user_id,\n        subtask_parent.parent_assignee_name,\n        subtask_parent.parent_due_date,\n        subtask_parent.parent_created_at\n\n    from\n    task\n    join task_open_length on task.task_id = task_open_length.task_id\n    left join task_first_modifier on task.task_id = task_first_modifier.task_id\n\n    left join task_comments on task.task_id = task_comments.task_id\n    left join task_followers on task.task_id = task_followers.task_id\n    left join task_tags on task.task_id = task_tags.task_id\n    \n    left join task_assignee on task.task_id = task_assignee.task_id\n\n    left join subtask_parent on task.task_id = subtask_parent.subtask_id\n\n    left join task_projects on task.task_id = task_projects.task_id\n\n)\n\nselect * from task_join", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "asana__task.sql", "original_file_path": "models/asana__task.sql", "name": "asana__task", "alias": "asana__task", "checksum": {"name": "sha256", "checksum": "9595b73e29bce0539fc8b3c27eeffdb1ffcba0a3f4f1946b9d36d2a495f59e79"}, "tags": [], "refs": [["stg_asana__task"], ["int_asana__task_comments"], ["int_asana__task_followers"], ["int_asana__task_open_length"], ["int_asana__task_tags"], ["int_asana__task_assignee"], ["int_asana__task_projects"], ["int_asana__subtask_parent"], ["int_asana__task_first_modifier"]], "sources": [], "metrics": [], "description": "An enriched task table consisting of base task info + aggregated metrics and lists", "columns": {"task_id": {"name": "task_id", "description": "System generated unique ID of the task.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_name": {"name": "task_name", "description": "User-facing name of the task", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assignee_user_id": {"name": "assignee_user_id", "description": "Foreign key referencing the ASANA_USER that is currently assigned the task.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assignee_name": {"name": "assignee_name", "description": "Name of the user that the task is currently assigned to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assignee_email": {"name": "assignee_email", "description": "Email of the user that the task is currently assigned to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_completed": {"name": "is_completed", "description": "Boolean that is true if the task is currently marked complete.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "completed_at": {"name": "completed_at", "description": "Timestamp of when the task was marked complete.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "completed_by_user_id": {"name": "completed_by_user_id", "description": "Foreign key referencing the USER who completed the task. Note that this may be different than the assignee", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the task was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "Date the task is due, if provided.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modified_at": {"name": "modified_at", "description": "Timestamp of when the task was last modified", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_date": {"name": "start_date", "description": "The start date of the task, if a date range is given.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_description": {"name": "task_description", "description": "Free-form text describing the task, as seen in the UI.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_link": {"name": "task_link", "description": "URL formatted to bring you directly to the task in asana.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "days_open": {"name": "days_open", "description": "The number of days the task has been/was open (creation -> completion)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_currently_assigned": {"name": "is_currently_assigned", "description": "Boolean, true if the task is *currently* assigned", "meta": {}, "data_type": null, "quote": null, "tags": []}, "has_been_assigned": {"name": "has_been_assigned", "description": "Boolean, true if the task has at one point been assigned, even if currently not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "days_since_last_assignment": {"name": "days_since_last_assignment", "description": "The number of days the task has been/was open and assigned to to the most recent user (last assignment -> completion)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "days_since_first_assignment": {"name": "days_since_first_assignment", "description": "The number of days the task has been/was open and assigned at all (first time assigned -> completion)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_assigned_at": {"name": "last_assigned_at", "description": "Timestamp of when the task was last assigned (to the current user if still assigned)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_assigned_At": {"name": "first_assigned_At", "description": "Timestamp of when the task was first assigned to someone", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_modifier_user_id": {"name": "first_modifier_user_id", "description": "Foreign key referencing the ASANA_USER who made the first modification to the task (ie added a description). A proxy for task creator.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_modifier_name": {"name": "first_modifier_name", "description": "Name of the user who made the first modification to the task", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number_of_comments": {"name": "number_of_comments", "description": "Count of comments made on the task", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conversation": {"name": "conversation", "description": "The task's comments and authors aggregated into an ordered conversation, with authors + time sent", "meta": {}, "data_type": null, "quote": null, "tags": []}, "followers": {"name": "followers", "description": "A list of the names of the users who follow the task.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number_of_followers": {"name": "number_of_followers", "description": "Count of the users following the task", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tags": {"name": "tags", "description": "A list of the tags associated with the task.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number_of_tags": {"name": "number_of_tags", "description": "Count of the tags associated with the task.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "projects_sections": {"name": "projects_sections", "description": "A list of the projects + sections that this task is listed under.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_subtask": {"name": "is_subtask", "description": "Boolean that's true if the task is a subtask of another.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_task_id": {"name": "parent_task_id", "description": "Self-referential id of the parent TASK that this is a subtask of.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_task_name": {"name": "parent_task_name", "description": "User-facing name of the task's parent task.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_assignee_user_id": {"name": "parent_assignee_user_id", "description": "Foreign key referencing the ASANA_USER who is assigned the parent task", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_assignee_name": {"name": "parent_assignee_name", "description": "Name of the user assigned this task's parent task", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_due_date": {"name": "parent_due_date", "description": "Date on which the parent task is due, if given", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_created_at": {"name": "parent_created_at", "description": "Timestamp of when the parent task was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "workspace_id": {"name": "workspace_id", "description": "Foreign key reference to the workspace", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_liked": {"name": "is_liked", "description": "Boolean that is true if the task is liked by the authorized user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number_of_likes": {"name": "number_of_likes", "description": "Number of users who have liked this task.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "asana://models/asana.yml", "compiled_path": "target/compiled/asana/models/asana__task.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "asana", "materialized": "table"}, "created_at": 1666801517.463928, "compiled_code": "with  __dbt__cte__int_asana__task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n),  __dbt__cte__int_asana__task_comments as (\nwith comments as (\n    \n    select *\n    from __dbt__cte__int_asana__task_story\n    where comment_content is not null\n    order by target_task_id, created_at asc\n\n),\n\ntask_conversation as (\n\n    select\n        target_task_id as task_id,\n        -- creates a chronologically ordered conversation about the task\n        \n    string_agg(created_at || '  -  ' || created_by_name || ':  ' || comment_content, '\\n')\n\n as conversation,\n        count(*) as number_of_comments\n\n    from comments        \n    group by 1\n)\n\nselect * from task_conversation\n),  __dbt__cte__int_asana__task_followers as (\nwith task_follower as (\n    \n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task_follower`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n\n),\n\nagg_followers as (\n\n    select\n        task_follower.task_id,\n        \n    string_agg(asana_user.user_name, ', ')\n\n as followers,\n        count(*) as number_of_followers\n    from task_follower \n    join asana_user \n        on asana_user.user_id = task_follower.user_id\n    group by 1\n    \n)\n\nselect * from agg_followers\n),  __dbt__cte__int_asana__task_open_length as (\nwith task as (\n    \n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task`\n\n),\n\nstory as (\n\n    select * \n    from __dbt__cte__int_asana__task_story\n\n),\n\nassignments as (\n    \n    select \n    target_task_id as task_id,\n    min(created_at) as first_assigned_at,\n    max(created_at) as last_assigned_at -- current assignment\n\n    from story\n    where action_taken = 'assigned'\n\n    group by 1\n\n),\n\n\nopen_assigned_length as (\n\n    \n\n    select\n        task.task_id,\n        task.is_completed,\n        task.completed_at,\n        task.assignee_user_id is not null as is_currently_assigned,\n        assignments.task_id is not null as has_been_assigned,\n        assignments.last_assigned_at as last_assigned_at,\n        assignments.first_assigned_at as first_assigned_at,\n        \n\n    datetime_diff(\n        cast(current_timestamp as datetime),\n        cast(task.created_at as datetime),\n        day\n    )\n\n   as days_open,\n\n        -- if the task is currently assigned, this is the time it has been assigned to this current user.\n        \n\n    datetime_diff(\n        cast(current_timestamp as datetime),\n        cast(assignments.last_assigned_at as datetime),\n        day\n    )\n\n   as days_since_last_assignment,\n\n        \n\n    datetime_diff(\n        cast(current_timestamp as datetime),\n        cast(assignments.first_assigned_at as datetime),\n        day\n    )\n\n   as days_since_first_assignment\n        \n\n    from task\n    left join assignments \n        on task.task_id = assignments.task_id\n\n)\n\n\nselect * from open_assigned_length\n),  __dbt__cte__int_asana__task_tags as (\nwith task_tag as (\n    \n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task_tag`\n\n),\n\nasana_tag as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__tag`\n\n),\n\nagg_tags as (\n\n    select\n        task_tag.task_id,\n        \n    string_agg(asana_tag.tag_name, ', ')\n\n as tags,\n        count(*) as number_of_tags\n    from task_tag \n    join asana_tag \n        on asana_tag.tag_id = task_tag.tag_id\n    group by 1\n    \n)\n\nselect * from agg_tags\n),  __dbt__cte__int_asana__task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n),  __dbt__cte__int_asana__task_projects as (\nwith task_project as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project_task`\n\n),\n\nproject as (\n    \n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project`\n),\n\ntask_section as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task_section`\n\n),\n\nsection as (\n    \n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__section`\n\n),\n\ntask_project_section as (\n\n    select \n        task_project.task_id,\n        project.project_name || (case when section.section_name = '(no section)' then ''\n            else ': ' || section.section_name end) as project_section, \n        project.project_id\n    from\n    task_project \n    join project \n        on project.project_id = task_project.project_id\n    join task_section\n        on task_section.task_id = task_project.task_id\n    join section \n        on section.section_id = task_section.section_id \n        and section.project_id = project.project_id\n),\n\nagg_project_sections as (\n    select \n        task_id,\n        \n    string_agg(task_project_section.project_section, ', ')\n\n as projects_sections,\n        count(project_id) as number_of_projects\n\n    from task_project_section \n\n    group by 1\n)\n\nselect * from agg_project_sections\n),  __dbt__cte__int_asana__subtask_parent as (\nwith task_assignee as (\n\n    select * \n    from  __dbt__cte__int_asana__task_assignee\n\n),\n\n\nsubtask_parent as (\n\n    select\n        subtask.task_id as subtask_id,\n        parent.task_id as parent_task_id,\n        parent.task_name as parent_task_name,\n        parent.due_date as parent_due_date,\n        parent.created_at as parent_created_at,\n        parent.assignee_user_id as parent_assignee_user_id,\n        parent.assignee_name as parent_assignee_name\n\n    from task_assignee as parent \n    join task_assignee as subtask\n        on parent.task_id = subtask.parent_task_id\n\n)\n\nselect * from subtask_parent\n),  __dbt__cte__int_asana__task_first_modifier as (\nwith story as (\n\n    select *\n    from __dbt__cte__int_asana__task_story\n    where created_by_user_id is not null -- sometimes user id can be null in story. limit to ones with associated users\n),\n\nordered_stories as (\n\n    select \n        target_task_id,\n        created_by_user_id,\n        created_by_name,\n        created_at,\n        row_number() over ( partition by target_task_id order by created_at asc ) as nth_story\n        \n    from story\n\n),\n\nfirst_modifier as (\n\n    select  \n        target_task_id as task_id,\n        created_by_user_id as first_modifier_user_id,\n        created_by_name as first_modifier_name\n\n    from ordered_stories \n    where nth_story = 1\n)\n\nselect *\nfrom first_modifier\n),task as (\n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task`\n),\n\ntask_comments as (\n\n    select * \n    from __dbt__cte__int_asana__task_comments\n),\n\ntask_followers as (\n\n    select *\n    from __dbt__cte__int_asana__task_followers\n),\n\ntask_open_length as (\n\n    select *\n    from __dbt__cte__int_asana__task_open_length\n),\n\ntask_tags as (\n\n    select *\n    from __dbt__cte__int_asana__task_tags\n),\n\ntask_assignee as (\n\n    select * \n    from  __dbt__cte__int_asana__task_assignee\n    where has_assignee\n),\n\ntask_projects as (\n\n    select *\n    from __dbt__cte__int_asana__task_projects\n),\n\nsubtask_parent as (\n\n    select * \n    from __dbt__cte__int_asana__subtask_parent\n\n),\n\ntask_first_modifier as (\n    \n    select *\n    from __dbt__cte__int_asana__task_first_modifier\n),\n\ntask_join as (\n\n    select\n        task.*,\n        concat('https://app.asana.com/0/0/', task.task_id) as task_link,\n        task_assignee.assignee_name,\n        task_assignee.assignee_email,\n        \n        task_open_length.days_open, \n        task_open_length.is_currently_assigned,\n        task_open_length.has_been_assigned,\n        task_open_length.days_since_last_assignment, -- is null for never-assigned tasks\n        task_open_length.days_since_first_assignment, -- is null for never-assigned tasks\n        task_open_length.last_assigned_at,\n        task_open_length.first_assigned_at, \n\n        task_first_modifier.first_modifier_user_id,\n        task_first_modifier.first_modifier_name,\n\n        task_comments.conversation, \n        coalesce(task_comments.number_of_comments, 0) as number_of_comments, \n        task_followers.followers,\n        coalesce(task_followers.number_of_followers, 0) as number_of_followers,\n        task_tags.tags, \n        coalesce(task_tags.number_of_tags, 0) as number_of_tags, \n        \n        task_projects.projects_sections,\n\n        subtask_parent.subtask_id is not null as is_subtask, -- parent id is in task.*\n        subtask_parent.parent_task_name,\n        subtask_parent.parent_assignee_user_id,\n        subtask_parent.parent_assignee_name,\n        subtask_parent.parent_due_date,\n        subtask_parent.parent_created_at\n\n    from\n    task\n    join task_open_length on task.task_id = task_open_length.task_id\n    left join task_first_modifier on task.task_id = task_first_modifier.task_id\n\n    left join task_comments on task.task_id = task_comments.task_id\n    left join task_followers on task.task_id = task_followers.task_id\n    left join task_tags on task.task_id = task_tags.task_id\n    \n    left join task_assignee on task.task_id = task_assignee.task_id\n\n    left join subtask_parent on task.task_id = subtask_parent.subtask_id\n\n    left join task_projects on task.task_id = task_projects.task_id\n\n)\n\nselect * from task_join", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.int_asana__task_story", "sql": " __dbt__cte__int_asana__task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n)"}, {"id": "model.asana.int_asana__task_comments", "sql": " __dbt__cte__int_asana__task_comments as (\nwith comments as (\n    \n    select *\n    from __dbt__cte__int_asana__task_story\n    where comment_content is not null\n    order by target_task_id, created_at asc\n\n),\n\ntask_conversation as (\n\n    select\n        target_task_id as task_id,\n        -- creates a chronologically ordered conversation about the task\n        \n    string_agg(created_at || '  -  ' || created_by_name || ':  ' || comment_content, '\\n')\n\n as conversation,\n        count(*) as number_of_comments\n\n    from comments        \n    group by 1\n)\n\nselect * from task_conversation\n)"}, {"id": "model.asana.int_asana__task_followers", "sql": " __dbt__cte__int_asana__task_followers as (\nwith task_follower as (\n    \n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task_follower`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n\n),\n\nagg_followers as (\n\n    select\n        task_follower.task_id,\n        \n    string_agg(asana_user.user_name, ', ')\n\n as followers,\n        count(*) as number_of_followers\n    from task_follower \n    join asana_user \n        on asana_user.user_id = task_follower.user_id\n    group by 1\n    \n)\n\nselect * from agg_followers\n)"}, {"id": "model.asana.int_asana__task_open_length", "sql": " __dbt__cte__int_asana__task_open_length as (\nwith task as (\n    \n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task`\n\n),\n\nstory as (\n\n    select * \n    from __dbt__cte__int_asana__task_story\n\n),\n\nassignments as (\n    \n    select \n    target_task_id as task_id,\n    min(created_at) as first_assigned_at,\n    max(created_at) as last_assigned_at -- current assignment\n\n    from story\n    where action_taken = 'assigned'\n\n    group by 1\n\n),\n\n\nopen_assigned_length as (\n\n    \n\n    select\n        task.task_id,\n        task.is_completed,\n        task.completed_at,\n        task.assignee_user_id is not null as is_currently_assigned,\n        assignments.task_id is not null as has_been_assigned,\n        assignments.last_assigned_at as last_assigned_at,\n        assignments.first_assigned_at as first_assigned_at,\n        \n\n    datetime_diff(\n        cast(current_timestamp as datetime),\n        cast(task.created_at as datetime),\n        day\n    )\n\n   as days_open,\n\n        -- if the task is currently assigned, this is the time it has been assigned to this current user.\n        \n\n    datetime_diff(\n        cast(current_timestamp as datetime),\n        cast(assignments.last_assigned_at as datetime),\n        day\n    )\n\n   as days_since_last_assignment,\n\n        \n\n    datetime_diff(\n        cast(current_timestamp as datetime),\n        cast(assignments.first_assigned_at as datetime),\n        day\n    )\n\n   as days_since_first_assignment\n        \n\n    from task\n    left join assignments \n        on task.task_id = assignments.task_id\n\n)\n\n\nselect * from open_assigned_length\n)"}, {"id": "model.asana.int_asana__task_tags", "sql": " __dbt__cte__int_asana__task_tags as (\nwith task_tag as (\n    \n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task_tag`\n\n),\n\nasana_tag as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__tag`\n\n),\n\nagg_tags as (\n\n    select\n        task_tag.task_id,\n        \n    string_agg(asana_tag.tag_name, ', ')\n\n as tags,\n        count(*) as number_of_tags\n    from task_tag \n    join asana_tag \n        on asana_tag.tag_id = task_tag.tag_id\n    group by 1\n    \n)\n\nselect * from agg_tags\n)"}, {"id": "model.asana.int_asana__task_assignee", "sql": " __dbt__cte__int_asana__task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n)"}, {"id": "model.asana.int_asana__task_projects", "sql": " __dbt__cte__int_asana__task_projects as (\nwith task_project as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project_task`\n\n),\n\nproject as (\n    \n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project`\n),\n\ntask_section as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task_section`\n\n),\n\nsection as (\n    \n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__section`\n\n),\n\ntask_project_section as (\n\n    select \n        task_project.task_id,\n        project.project_name || (case when section.section_name = '(no section)' then ''\n            else ': ' || section.section_name end) as project_section, \n        project.project_id\n    from\n    task_project \n    join project \n        on project.project_id = task_project.project_id\n    join task_section\n        on task_section.task_id = task_project.task_id\n    join section \n        on section.section_id = task_section.section_id \n        and section.project_id = project.project_id\n),\n\nagg_project_sections as (\n    select \n        task_id,\n        \n    string_agg(task_project_section.project_section, ', ')\n\n as projects_sections,\n        count(project_id) as number_of_projects\n\n    from task_project_section \n\n    group by 1\n)\n\nselect * from agg_project_sections\n)"}, {"id": "model.asana.int_asana__subtask_parent", "sql": " __dbt__cte__int_asana__subtask_parent as (\nwith task_assignee as (\n\n    select * \n    from  __dbt__cte__int_asana__task_assignee\n\n),\n\n\nsubtask_parent as (\n\n    select\n        subtask.task_id as subtask_id,\n        parent.task_id as parent_task_id,\n        parent.task_name as parent_task_name,\n        parent.due_date as parent_due_date,\n        parent.created_at as parent_created_at,\n        parent.assignee_user_id as parent_assignee_user_id,\n        parent.assignee_name as parent_assignee_name\n\n    from task_assignee as parent \n    join task_assignee as subtask\n        on parent.task_id = subtask.parent_task_id\n\n)\n\nselect * from subtask_parent\n)"}, {"id": "model.asana.int_asana__task_first_modifier", "sql": " __dbt__cte__int_asana__task_first_modifier as (\nwith story as (\n\n    select *\n    from __dbt__cte__int_asana__task_story\n    where created_by_user_id is not null -- sometimes user id can be null in story. limit to ones with associated users\n),\n\nordered_stories as (\n\n    select \n        target_task_id,\n        created_by_user_id,\n        created_by_name,\n        created_at,\n        row_number() over ( partition by target_task_id order by created_at asc ) as nth_story\n        \n    from story\n\n),\n\nfirst_modifier as (\n\n    select  \n        target_task_id as task_id,\n        created_by_user_id as first_modifier_user_id,\n        created_by_name as first_modifier_name\n\n    from ordered_stories \n    where nth_story = 1\n)\n\nselect *\nfrom first_modifier\n)"}], "relation_name": "`dbt-package-testing`.`asana_integration_tests_asana`.`asana__task`"}, "model.asana.asana__team": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.string_agg"], "nodes": ["model.asana_source.stg_asana__team", "model.asana.asana__project"]}, "config": {"enabled": true, "alias": null, "schema": "asana", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests_asana", "fqn": ["asana", "asana__team"], "unique_id": "model.asana.asana__team", "raw_code": "with team as (\n\n    select * from {{ var('team') }}\n),\n\nproject as (\n\n    select * \n    from {{ ref('asana__project') }}\n),\n\nteam_join as (\n\n    select\n        team.team_id,\n        team.team_name,\n\n        coalesce( sum(project.number_of_open_tasks), 0) as number_of_open_tasks, -- will double-count tasks in multiple projects\n        coalesce( sum( project.number_of_assigned_open_tasks), 0) as number_of_assigned_open_tasks,\n        coalesce( sum(project.number_of_tasks_completed), 0) as number_of_tasks_completed,\n        round(avg(project.avg_close_time_days), 0) as avg_close_time_days, -- avg of project's avg\n        round(avg(project.avg_close_time_assigned_days), 0) as avg_close_time_assigned_days,\n\n        coalesce( sum(case when not project.is_archived then 1 else 0 end), 0) as number_of_active_projects,\n        {{ fivetran_utils.string_agg('case when not project.is_archived then project.project_name else null end', \"', '\") }} as active_projects,\n        coalesce( sum(case when project.is_archived then 1 else 0 end), 0) as number_of_archived_projects\n\n        \n\n    from team \n    left join project on project.team_id = team.team_id\n\n    group by 1,2\n\n)\n\nselect * from team_join", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "asana__team.sql", "original_file_path": "models/asana__team.sql", "name": "asana__team", "alias": "asana__team", "checksum": {"name": "sha256", "checksum": "848787a32e0c75060c960f1d73bd6c6652da47bfeafb7e6e74949ec183a5da63"}, "tags": [], "refs": [["stg_asana__team"], ["asana__project"]], "sources": [], "metrics": [], "description": "Enriched team table consisting of basic team info + task/completion metrics (note that teams can only act on tasks in projects)", "columns": {"team_id": {"name": "team_id", "description": "System generate unique ID for the team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_name": {"name": "team_name", "description": "UI-facing name of the team.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number_of_open_tasks": {"name": "number_of_open_tasks", "description": "Count of the currently open tasks for this team.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number_of_assigned_open_tasks": {"name": "number_of_assigned_open_tasks", "description": "Count of the open and assigned tasks for the team.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number_of_tasks_completed": {"name": "number_of_tasks_completed", "description": "Count of tasks that this team has completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_close_time_days": {"name": "avg_close_time_days", "description": "The avg number of days it has taken projects of this team to close tasks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_close_time_assigned_days": {"name": "avg_close_time_assigned_days", "description": "The avg number of days it has taken projects of this team to close tasks, once assigned", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active_projects": {"name": "active_projects", "description": "Aggregated list of non archived projects associated with the team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number_of_active_projects": {"name": "number_of_active_projects", "description": "Count of non-archived projects", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number_of_archived_projects": {"name": "number_of_archived_projects", "description": "Count of archived projects", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "asana://models/asana.yml", "compiled_path": "target/compiled/asana/models/asana__team.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "asana", "materialized": "table"}, "created_at": 1666801517.470674, "compiled_code": "with team as (\n\n    select * from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__team`\n),\n\nproject as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_asana`.`asana__project`\n),\n\nteam_join as (\n\n    select\n        team.team_id,\n        team.team_name,\n\n        coalesce( sum(project.number_of_open_tasks), 0) as number_of_open_tasks, -- will double-count tasks in multiple projects\n        coalesce( sum( project.number_of_assigned_open_tasks), 0) as number_of_assigned_open_tasks,\n        coalesce( sum(project.number_of_tasks_completed), 0) as number_of_tasks_completed,\n        round(avg(project.avg_close_time_days), 0) as avg_close_time_days, -- avg of project's avg\n        round(avg(project.avg_close_time_assigned_days), 0) as avg_close_time_assigned_days,\n\n        coalesce( sum(case when not project.is_archived then 1 else 0 end), 0) as number_of_active_projects,\n        \n    string_agg(case when not project.is_archived then project.project_name else null end, ', ')\n\n as active_projects,\n        coalesce( sum(case when project.is_archived then 1 else 0 end), 0) as number_of_archived_projects\n\n        \n\n    from team \n    left join project on project.team_id = team.team_id\n\n    group by 1,2\n\n)\n\nselect * from team_join", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`asana_integration_tests_asana`.`asana__team`"}, "model.asana.asana__project": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.string_agg"], "nodes": ["model.asana.int_asana__project_task_metrics", "model.asana_source.stg_asana__project", "model.asana.int_asana__project_user", "model.asana_source.stg_asana__user", "model.asana_source.stg_asana__team", "model.asana_source.stg_asana__section"]}, "config": {"enabled": true, "alias": null, "schema": "asana", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests_asana", "fqn": ["asana", "asana__project"], "unique_id": "model.asana.asana__project", "raw_code": "with project_task_metrics as (\n\n    select *\n    from {{ ref('int_asana__project_task_metrics') }}\n),\n\nproject as (\n    \n    select *\n    from {{ var('project') }}\n),\n\nproject_user as (\n    \n    select *\n    from {{ ref('int_asana__project_user') }}\n),\n\nasana_user as (\n    select *\n    from {{ var('user') }}\n),\n\nteam as (\n    select *\n    from {{ var('team') }}\n),\n\nagg_sections as (\n\n    select\n        project_id,\n        {{ fivetran_utils.string_agg( 'section_name', \"', '\") }} as sections\n\n    from {{ var('section') }}\n    where section_name != '(no section)'\n    group by 1\n),\n\nagg_project_users as (\n\n    select \n        project_user.project_id,\n        {{ fivetran_utils.string_agg( \"asana_user.user_name || ' as ' || project_user.role\" , \"', '\" ) }} as users\n\n    from project_user join asana_user using(user_id)\n\n    group by 1\n\n),\n\n-- need to split from above due to redshift's inability to string/list_agg and use distinct aggregates\ncount_project_users as (\n \n    select \n        project_id, \n        count(distinct user_id) as number_of_users_involved\n\n    from project_user\n    group by 1\n\n),\n\nproject_join as (\n\n    select\n        project.project_id,\n        project_name,\n\n        coalesce(project_task_metrics.number_of_open_tasks, 0) as number_of_open_tasks,\n        coalesce(project_task_metrics.number_of_assigned_open_tasks, 0) as number_of_assigned_open_tasks,\n        coalesce(project_task_metrics.number_of_tasks_completed, 0) as number_of_tasks_completed,\n        round(project_task_metrics.avg_close_time_days, 0) as avg_close_time_days,\n        round(project_task_metrics.avg_close_time_assigned_days, 0) as avg_close_time_assigned_days,\n\n        'https://app.asana.com/0/' || project.project_id ||'/' || project.project_id as project_link,\n\n        project.team_id,\n        team.team_name,\n        project.is_archived,\n        created_at,\n        current_status,\n        due_date,\n        modified_at as last_modified_at,\n        owner_user_id,\n        agg_project_users.users as users_involved,\n        coalesce(count_project_users.number_of_users_involved, 0) as number_of_users_involved,\n        agg_sections.sections,\n        project.notes,\n        project.is_public\n\n    from\n    project \n    left join project_task_metrics on project.project_id = project_task_metrics.project_id \n    left join agg_project_users on project.project_id = agg_project_users.project_id  \n    left join count_project_users on project.project_id = count_project_users.project_id\n    join team on team.team_id = project.team_id -- every project needs a team\n    left join agg_sections on project.project_id = agg_sections.project_id\n\n)\n\nselect * from project_join", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "asana__project.sql", "original_file_path": "models/asana__project.sql", "name": "asana__project", "alias": "asana__project", "checksum": {"name": "sha256", "checksum": "91f218d2cb1e3f59adce898263d14060794892986bce92fda2825d39ed99e170"}, "tags": [], "refs": [["int_asana__project_task_metrics"], ["stg_asana__project"], ["int_asana__project_user"], ["stg_asana__user"], ["stg_asana__team"], ["stg_asana__section"]], "sources": [], "metrics": [], "description": "Table of projects' basic info enriched with metrics regarding tasks and completions", "columns": {"project_id": {"name": "project_id", "description": "System-generated unique ID of the project.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_name": {"name": "project_name", "description": "UI-facing name of the project", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number_of_open_tasks": {"name": "number_of_open_tasks", "description": "Count of the currently open tasks in this project", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number_of_assigned_open_tasks": {"name": "number_of_assigned_open_tasks", "description": "Count of the open and assigned tasks in this project.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number_of_tasks_completed": {"name": "number_of_tasks_completed", "description": "Count of tasks that have been completed in this project", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_close_time_days": {"name": "avg_close_time_days", "description": "The avg number of days it has taken to close tasks in this project", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_close_time_assigned_days": {"name": "avg_close_time_assigned_days", "description": "The avg number of days it has taken to close tasks, since their *last* assignment, in this project", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Foreign key referencing the ASANA_TEAM that the project is associated with", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_name": {"name": "team_name", "description": "User-facing name of the project's team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_archived": {"name": "is_archived", "description": "Boolean representing if the project has been archived in the UI", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_link": {"name": "project_link", "description": "URL formatted to bring you directly to the project in asana.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the project was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_status": {"name": "current_status", "description": "The most recent progress status update for the project (free-form string)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "The date the project is due on, if given", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_modified_at": {"name": "last_modified_at", "description": "Timestamp of when the project was last modified (doesn't include comments or tasks)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_user_id": {"name": "owner_user_id", "description": "Foreign key referencing the USER who owns the project.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "users_involved": {"name": "users_involved", "description": "Aggregated list of the names + roles of the users involved (working on or owning) a project", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number_of_users_involved": {"name": "number_of_users_involved", "description": "Count of the unique users associated with the project", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_public": {"name": "is_public", "description": "Boolean that's true if public to the whole workspace, false if private.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sections": {"name": "sections", "description": "Aggregated list of the sections that exist in the project.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "notes": {"name": "notes", "description": "Free-form textual description associated with project", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "asana://models/asana.yml", "compiled_path": "target/compiled/asana/models/asana__project.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "asana", "materialized": "table"}, "created_at": 1666801517.468896, "compiled_code": "with  __dbt__cte__int_asana__project_task_metrics as (\nwith task as (\n\n    select *\n    from `dbt-package-testing`.`asana_integration_tests_asana`.`asana__task`\n\n),\n\nproject as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project`\n\n),\n\nproject_task as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project_task`\n),\n\nproject_task_history as (\n\n    select\n        project.project_id,\n        task.task_id,\n        task.is_completed as task_is_completed,\n        task.assignee_user_id as task_assignee_user_id,\n        task.days_open as task_days_open,\n        task.days_since_last_assignment as task_days_assigned_current_user\n\n    from project\n    left join project_task \n        on project.project_id = project_task.project_id\n    left join task \n        on project_task.task_id = task.task_id\n\n),\n\nagg_proj_tasks as (\n\n    select \n    project_id,\n    sum(case when not task_is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when not task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_open_tasks,\n    sum(case when task_is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_tasks_completed,\n    sum(case when task_is_completed then task_days_open else 0 end) as total_days_open,\n    sum(case when task_is_completed then task_days_assigned_current_user else 0 end) as total_days_assigned_last_user -- will divde later for avg\n\n    from  project_task_history\n\n    group by 1\n\n),\n\nfinal as (\n\n    select\n        agg_proj_tasks.*,\n        round(nullif(total_days_open, 0) * 1.0 / nullif(number_of_tasks_completed, 0), 0) as avg_close_time_days,\n        round(nullif(total_days_assigned_last_user, 0) * 1.0 / nullif(number_of_assigned_tasks_completed, 0), 0) as avg_close_time_assigned_days\n\n    from agg_proj_tasks\n    \n)\n\nselect * from final\n),  __dbt__cte__int_asana__task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n),  __dbt__cte__int_asana__project_user as (\nwith project_tasks as (\n    \n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project_task`\n),\n\nassigned_tasks as (\n    \n    select * \n    from __dbt__cte__int_asana__task_assignee\n    where has_assignee\n    \n),\n\nproject as (\n    \n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project`\n\n    where not is_archived\n\n),\n\nproject_assignee as (\n\n    select\n        project_tasks.project_id,\n        project_tasks.task_id,\n        assigned_tasks.assignee_user_id,\n        assigned_tasks.assignee_name,\n        not assigned_tasks.is_completed as currently_working_on\n\n    from project_tasks \n    join assigned_tasks \n        on assigned_tasks.task_id = project_tasks.task_id\n\n),\n\nproject_owner as (\n\n    select \n        project_id,\n        project_name,\n        owner_user_id\n\n    from project\n    \n    where owner_user_id is not null\n),\n\nproject_user as (\n    \n    select\n        project_id,\n        project_name,\n        owner_user_id as user_id,\n        'owner' as role,\n        null as currently_working_on\n    \n    from project_owner\n\n    union all\n\n    select\n        project.project_id,\n        project.project_name,\n        project_assignee.assignee_user_id as user_id,\n        'task assignee' as role,\n        project_assignee.currently_working_on\n    \n    from project \n    \n    join project_assignee \n        on project.project_id = project_assignee.project_id\n    group by 1,2,3,4,5\n\n)\n\n\nselect * from project_user\n),project_task_metrics as (\n\n    select *\n    from __dbt__cte__int_asana__project_task_metrics\n),\n\nproject as (\n    \n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project`\n),\n\nproject_user as (\n    \n    select *\n    from __dbt__cte__int_asana__project_user\n),\n\nasana_user as (\n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\nteam as (\n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__team`\n),\n\nagg_sections as (\n\n    select\n        project_id,\n        \n    string_agg(section_name, ', ')\n\n as sections\n\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__section`\n    where section_name != '(no section)'\n    group by 1\n),\n\nagg_project_users as (\n\n    select \n        project_user.project_id,\n        \n    string_agg(asana_user.user_name || ' as ' || project_user.role, ', ')\n\n as users\n\n    from project_user join asana_user using(user_id)\n\n    group by 1\n\n),\n\n-- need to split from above due to redshift's inability to string/list_agg and use distinct aggregates\ncount_project_users as (\n \n    select \n        project_id, \n        count(distinct user_id) as number_of_users_involved\n\n    from project_user\n    group by 1\n\n),\n\nproject_join as (\n\n    select\n        project.project_id,\n        project_name,\n\n        coalesce(project_task_metrics.number_of_open_tasks, 0) as number_of_open_tasks,\n        coalesce(project_task_metrics.number_of_assigned_open_tasks, 0) as number_of_assigned_open_tasks,\n        coalesce(project_task_metrics.number_of_tasks_completed, 0) as number_of_tasks_completed,\n        round(project_task_metrics.avg_close_time_days, 0) as avg_close_time_days,\n        round(project_task_metrics.avg_close_time_assigned_days, 0) as avg_close_time_assigned_days,\n\n        'https://app.asana.com/0/' || project.project_id ||'/' || project.project_id as project_link,\n\n        project.team_id,\n        team.team_name,\n        project.is_archived,\n        created_at,\n        current_status,\n        due_date,\n        modified_at as last_modified_at,\n        owner_user_id,\n        agg_project_users.users as users_involved,\n        coalesce(count_project_users.number_of_users_involved, 0) as number_of_users_involved,\n        agg_sections.sections,\n        project.notes,\n        project.is_public\n\n    from\n    project \n    left join project_task_metrics on project.project_id = project_task_metrics.project_id \n    left join agg_project_users on project.project_id = agg_project_users.project_id  \n    left join count_project_users on project.project_id = count_project_users.project_id\n    join team on team.team_id = project.team_id -- every project needs a team\n    left join agg_sections on project.project_id = agg_sections.project_id\n\n)\n\nselect * from project_join", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.int_asana__project_task_metrics", "sql": " __dbt__cte__int_asana__project_task_metrics as (\nwith task as (\n\n    select *\n    from `dbt-package-testing`.`asana_integration_tests_asana`.`asana__task`\n\n),\n\nproject as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project`\n\n),\n\nproject_task as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project_task`\n),\n\nproject_task_history as (\n\n    select\n        project.project_id,\n        task.task_id,\n        task.is_completed as task_is_completed,\n        task.assignee_user_id as task_assignee_user_id,\n        task.days_open as task_days_open,\n        task.days_since_last_assignment as task_days_assigned_current_user\n\n    from project\n    left join project_task \n        on project.project_id = project_task.project_id\n    left join task \n        on project_task.task_id = task.task_id\n\n),\n\nagg_proj_tasks as (\n\n    select \n    project_id,\n    sum(case when not task_is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when not task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_open_tasks,\n    sum(case when task_is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_tasks_completed,\n    sum(case when task_is_completed then task_days_open else 0 end) as total_days_open,\n    sum(case when task_is_completed then task_days_assigned_current_user else 0 end) as total_days_assigned_last_user -- will divde later for avg\n\n    from  project_task_history\n\n    group by 1\n\n),\n\nfinal as (\n\n    select\n        agg_proj_tasks.*,\n        round(nullif(total_days_open, 0) * 1.0 / nullif(number_of_tasks_completed, 0), 0) as avg_close_time_days,\n        round(nullif(total_days_assigned_last_user, 0) * 1.0 / nullif(number_of_assigned_tasks_completed, 0), 0) as avg_close_time_assigned_days\n\n    from agg_proj_tasks\n    \n)\n\nselect * from final\n)"}, {"id": "model.asana.int_asana__task_assignee", "sql": " __dbt__cte__int_asana__task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n)"}, {"id": "model.asana.int_asana__project_user", "sql": " __dbt__cte__int_asana__project_user as (\nwith project_tasks as (\n    \n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project_task`\n),\n\nassigned_tasks as (\n    \n    select * \n    from __dbt__cte__int_asana__task_assignee\n    where has_assignee\n    \n),\n\nproject as (\n    \n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project`\n\n    where not is_archived\n\n),\n\nproject_assignee as (\n\n    select\n        project_tasks.project_id,\n        project_tasks.task_id,\n        assigned_tasks.assignee_user_id,\n        assigned_tasks.assignee_name,\n        not assigned_tasks.is_completed as currently_working_on\n\n    from project_tasks \n    join assigned_tasks \n        on assigned_tasks.task_id = project_tasks.task_id\n\n),\n\nproject_owner as (\n\n    select \n        project_id,\n        project_name,\n        owner_user_id\n\n    from project\n    \n    where owner_user_id is not null\n),\n\nproject_user as (\n    \n    select\n        project_id,\n        project_name,\n        owner_user_id as user_id,\n        'owner' as role,\n        null as currently_working_on\n    \n    from project_owner\n\n    union all\n\n    select\n        project.project_id,\n        project.project_name,\n        project_assignee.assignee_user_id as user_id,\n        'task assignee' as role,\n        project_assignee.currently_working_on\n    \n    from project \n    \n    join project_assignee \n        on project.project_id = project_assignee.project_id\n    group by 1,2,3,4,5\n\n)\n\n\nselect * from project_user\n)"}], "relation_name": "`dbt-package-testing`.`asana_integration_tests_asana`.`asana__project`"}, "model.asana.asana__tag": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.asana_source.stg_asana__tag", "model.asana_source.stg_asana__task_tag", "model.asana.asana__task"]}, "config": {"enabled": true, "alias": null, "schema": "asana", "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests_asana", "fqn": ["asana", "asana__tag"], "unique_id": "model.asana.asana__tag", "raw_code": "with asana_tag as (\n\n    select * \n    from {{ var('tag') }}\n),\n\ntask_tag as (\n\n    select * \n    from {{ var('task_tag') }}\n),\n\ntask as (\n\n    select *\n    from {{ ref('asana__task') }}\n\n    where is_completed and tags is not null\n\n),\n\nagg_tag as (\n\n    select\n        asana_tag.tag_id,\n        asana_tag.tag_name,\n        asana_tag.created_at,\n        sum(case when not task.is_completed then 1 else 0 end) as number_of_open_tasks,\n        sum(case when not task.is_completed and task.assignee_user_id is not null then 1 else 0 end) as number_of_assigned_open_tasks,\n        sum(case when task.is_completed then 1 else 0 end) as number_of_tasks_completed,\n        round(avg(case when task.is_completed then task.days_open else null end), 0) as avg_days_open,\n        round(avg(case when task.is_completed then task.days_since_last_assignment else null end), 0) as avg_days_assigned\n\n\n    from asana_tag \n    left join task_tag on asana_tag.tag_id = task_tag.tag_id\n    left join task on task.task_id = task_tag.task_id\n\n    group by 1,2,3\n)\n\nselect * from agg_tag", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "asana__tag.sql", "original_file_path": "models/asana__tag.sql", "name": "asana__tag", "alias": "asana__tag", "checksum": {"name": "sha256", "checksum": "e8783d268c5d3f46a7e11e597a0090254f15aa92b89122dcf6ee2481e77eb433"}, "tags": [], "refs": [["stg_asana__tag"], ["stg_asana__task_tag"], ["asana__task"]], "sources": [], "metrics": [], "description": "Table of tag basic info enriched with some task metrics.", "columns": {"tag_id": {"name": "tag_id", "description": "System-generated unique ID for the tag", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tag_name": {"name": "tag_name", "description": "UI-facing name of the tag", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the tag was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number_of_open_tasks": {"name": "number_of_open_tasks", "description": "Count of the currently open tasks with this tag.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number_of_assigned_open_tasks": {"name": "number_of_assigned_open_tasks", "description": "Count of the open and assigned tasks with this tag.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number_of_tasks_completed": {"name": "number_of_tasks_completed", "description": "Count of tasks with this tag that have been completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_days_open": {"name": "avg_days_open", "description": "The avg number of days that completed tasks with this tag were open.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_days_assigned": {"name": "avg_days_assigned", "description": "The avg number of days that completed tasks with this tag were open and assigned.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "asana://models/asana.yml", "compiled_path": "target/compiled/asana/models/asana__tag.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "asana", "materialized": "table"}, "created_at": 1666801517.472178, "compiled_code": "with asana_tag as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__tag`\n),\n\ntask_tag as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task_tag`\n),\n\ntask as (\n\n    select *\n    from `dbt-package-testing`.`asana_integration_tests_asana`.`asana__task`\n\n    where is_completed and tags is not null\n\n),\n\nagg_tag as (\n\n    select\n        asana_tag.tag_id,\n        asana_tag.tag_name,\n        asana_tag.created_at,\n        sum(case when not task.is_completed then 1 else 0 end) as number_of_open_tasks,\n        sum(case when not task.is_completed and task.assignee_user_id is not null then 1 else 0 end) as number_of_assigned_open_tasks,\n        sum(case when task.is_completed then 1 else 0 end) as number_of_tasks_completed,\n        round(avg(case when task.is_completed then task.days_open else null end), 0) as avg_days_open,\n        round(avg(case when task.is_completed then task.days_since_last_assignment else null end), 0) as avg_days_assigned\n\n\n    from asana_tag \n    left join task_tag on asana_tag.tag_id = task_tag.tag_id\n    left join task on task.task_id = task_tag.task_id\n\n    group by 1,2,3\n)\n\nselect * from agg_tag", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`dbt-package-testing`.`asana_integration_tests_asana`.`asana__tag`"}, "model.asana.int_asana__task_comments": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.string_agg"], "nodes": ["model.asana.int_asana__task_story"]}, "config": {"enabled": true, "alias": null, "schema": "asana", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests_asana", "fqn": ["asana", "intermediate", "int_asana__task_comments"], "unique_id": "model.asana.int_asana__task_comments", "raw_code": "with comments as (\n    \n    select *\n    from {{ ref('int_asana__task_story') }}\n    where comment_content is not null\n    order by target_task_id, created_at asc\n\n),\n\ntask_conversation as (\n\n    select\n        target_task_id as task_id,\n        -- creates a chronologically ordered conversation about the task\n        {{ fivetran_utils.string_agg( \"created_at || '  -  ' || created_by_name || ':  ' || comment_content\", \"'\\\\n'\" ) }} as conversation,\n        count(*) as number_of_comments\n\n    from comments        \n    group by 1\n)\n\nselect * from task_conversation", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "intermediate/int_asana__task_comments.sql", "original_file_path": "models/intermediate/int_asana__task_comments.sql", "name": "int_asana__task_comments", "alias": "int_asana__task_comments", "checksum": {"name": "sha256", "checksum": "b50c377464e548b3cd44e3535fd4fa56541851bfa7029f6081f1b3f6b62b380d"}, "tags": [], "refs": [["int_asana__task_story"]], "sources": [], "metrics": [], "description": "Aggregates all comments on a task into a conversation + the number of comments", "columns": {"task_id": {"name": "task_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "asana://models/intermediate/intermediate_asana.yml", "compiled_path": "target/compiled/asana/models/intermediate/int_asana__task_comments.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "asana", "materialized": "ephemeral"}, "created_at": 1666801517.4883509, "compiled_code": "with  __dbt__cte__int_asana__task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n),comments as (\n    \n    select *\n    from __dbt__cte__int_asana__task_story\n    where comment_content is not null\n    order by target_task_id, created_at asc\n\n),\n\ntask_conversation as (\n\n    select\n        target_task_id as task_id,\n        -- creates a chronologically ordered conversation about the task\n        \n    string_agg(created_at || '  -  ' || created_by_name || ':  ' || comment_content, '\\n')\n\n as conversation,\n        count(*) as number_of_comments\n\n    from comments        \n    group by 1\n)\n\nselect * from task_conversation", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.int_asana__task_story", "sql": " __dbt__cte__int_asana__task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n)"}], "relation_name": null}, "model.asana.int_asana__project_task_metrics": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.asana.asana__task", "model.asana_source.stg_asana__project", "model.asana_source.stg_asana__project_task"]}, "config": {"enabled": true, "alias": null, "schema": "asana", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests_asana", "fqn": ["asana", "intermediate", "int_asana__project_task_metrics"], "unique_id": "model.asana.int_asana__project_task_metrics", "raw_code": "with task as (\n\n    select *\n    from {{ ref('asana__task') }}\n\n),\n\nproject as (\n\n    select * \n    from {{ var('project') }}\n\n),\n\nproject_task as (\n\n    select * \n    from {{ var('project_task') }}\n),\n\nproject_task_history as (\n\n    select\n        project.project_id,\n        task.task_id,\n        task.is_completed as task_is_completed,\n        task.assignee_user_id as task_assignee_user_id,\n        task.days_open as task_days_open,\n        task.days_since_last_assignment as task_days_assigned_current_user\n\n    from project\n    left join project_task \n        on project.project_id = project_task.project_id\n    left join task \n        on project_task.task_id = task.task_id\n\n),\n\nagg_proj_tasks as (\n\n    select \n    project_id,\n    sum(case when not task_is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when not task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_open_tasks,\n    sum(case when task_is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_tasks_completed,\n    sum(case when task_is_completed then task_days_open else 0 end) as total_days_open,\n    sum(case when task_is_completed then task_days_assigned_current_user else 0 end) as total_days_assigned_last_user -- will divde later for avg\n\n    from  project_task_history\n\n    group by 1\n\n),\n\nfinal as (\n\n    select\n        agg_proj_tasks.*,\n        round(nullif(total_days_open, 0) * 1.0 / nullif(number_of_tasks_completed, 0), 0) as avg_close_time_days,\n        round(nullif(total_days_assigned_last_user, 0) * 1.0 / nullif(number_of_assigned_tasks_completed, 0), 0) as avg_close_time_assigned_days\n\n    from agg_proj_tasks\n    \n)\n\nselect * from final", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "intermediate/int_asana__project_task_metrics.sql", "original_file_path": "models/intermediate/int_asana__project_task_metrics.sql", "name": "int_asana__project_task_metrics", "alias": "int_asana__project_task_metrics", "checksum": {"name": "sha256", "checksum": "59d3c639d66f84f786b75ff772ccc57cff3037a5d43fd3699a05da0459b2da7a"}, "tags": [], "refs": [["asana__task"], ["stg_asana__project"], ["stg_asana__project_task"]], "sources": [], "metrics": [], "description": "Draws from (non-intermediate) ASANA_TASK to compute metrics about tasks in each project.", "columns": {"project_id": {"name": "project_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "asana://models/intermediate/intermediate_asana.yml", "compiled_path": "target/compiled/asana/models/intermediate/int_asana__project_task_metrics.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "asana", "materialized": "ephemeral"}, "created_at": 1666801517.48678, "compiled_code": "with task as (\n\n    select *\n    from `dbt-package-testing`.`asana_integration_tests_asana`.`asana__task`\n\n),\n\nproject as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project`\n\n),\n\nproject_task as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project_task`\n),\n\nproject_task_history as (\n\n    select\n        project.project_id,\n        task.task_id,\n        task.is_completed as task_is_completed,\n        task.assignee_user_id as task_assignee_user_id,\n        task.days_open as task_days_open,\n        task.days_since_last_assignment as task_days_assigned_current_user\n\n    from project\n    left join project_task \n        on project.project_id = project_task.project_id\n    left join task \n        on project_task.task_id = task.task_id\n\n),\n\nagg_proj_tasks as (\n\n    select \n    project_id,\n    sum(case when not task_is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when not task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_open_tasks,\n    sum(case when task_is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_tasks_completed,\n    sum(case when task_is_completed then task_days_open else 0 end) as total_days_open,\n    sum(case when task_is_completed then task_days_assigned_current_user else 0 end) as total_days_assigned_last_user -- will divde later for avg\n\n    from  project_task_history\n\n    group by 1\n\n),\n\nfinal as (\n\n    select\n        agg_proj_tasks.*,\n        round(nullif(total_days_open, 0) * 1.0 / nullif(number_of_tasks_completed, 0), 0) as avg_close_time_days,\n        round(nullif(total_days_assigned_last_user, 0) * 1.0 / nullif(number_of_assigned_tasks_completed, 0), 0) as avg_close_time_assigned_days\n\n    from agg_proj_tasks\n    \n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.asana.int_asana__user_task_metrics": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.asana.asana__task"]}, "config": {"enabled": true, "alias": null, "schema": "asana", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests_asana", "fqn": ["asana", "intermediate", "int_asana__user_task_metrics"], "unique_id": "model.asana.int_asana__user_task_metrics", "raw_code": "with tasks as (\n\n    select * \n    from {{ ref('asana__task') }}\n    where assignee_user_id is not null\n\n), \n\nagg_user_tasks as (\n\n    select \n    assignee_user_id as user_id,\n    sum(case when not is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when is_completed then days_since_last_assignment else 0 end) as days_assigned_this_user -- will divde later for avg\n\n    from  tasks\n\n    group by 1\n\n),\n\nfinal as (\n    select\n        agg_user_tasks.user_id,\n        agg_user_tasks.number_of_open_tasks,\n        agg_user_tasks.number_of_tasks_completed,\n        nullif(agg_user_tasks.days_assigned_this_user, 0) * 1.0 / nullif(agg_user_tasks.number_of_tasks_completed, 0) as avg_close_time_days\n\n    from \n    agg_user_tasks \n)\n\nselect * from final", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "intermediate/int_asana__user_task_metrics.sql", "original_file_path": "models/intermediate/int_asana__user_task_metrics.sql", "name": "int_asana__user_task_metrics", "alias": "int_asana__user_task_metrics", "checksum": {"name": "sha256", "checksum": "22283e2744be59600dfcd8f89912736207b817d43c8ed00b1a49a7e4926237bd"}, "tags": [], "refs": [["asana__task"]], "sources": [], "metrics": [], "description": "Draws from (non-intermediate) ASANA_TASK to compute metrics about tasks for each user.", "columns": {"user_id": {"name": "user_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "asana://models/intermediate/intermediate_asana.yml", "compiled_path": "target/compiled/asana/models/intermediate/int_asana__user_task_metrics.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "asana", "materialized": "ephemeral"}, "created_at": 1666801517.49186, "compiled_code": "with tasks as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_asana`.`asana__task`\n    where assignee_user_id is not null\n\n), \n\nagg_user_tasks as (\n\n    select \n    assignee_user_id as user_id,\n    sum(case when not is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when is_completed then days_since_last_assignment else 0 end) as days_assigned_this_user -- will divde later for avg\n\n    from  tasks\n\n    group by 1\n\n),\n\nfinal as (\n    select\n        agg_user_tasks.user_id,\n        agg_user_tasks.number_of_open_tasks,\n        agg_user_tasks.number_of_tasks_completed,\n        nullif(agg_user_tasks.days_assigned_this_user, 0) * 1.0 / nullif(agg_user_tasks.number_of_tasks_completed, 0) as avg_close_time_days\n\n    from \n    agg_user_tasks \n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.asana.int_asana__task_tags": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.string_agg"], "nodes": ["model.asana_source.stg_asana__task_tag", "model.asana_source.stg_asana__tag"]}, "config": {"enabled": true, "alias": null, "schema": "asana", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests_asana", "fqn": ["asana", "intermediate", "int_asana__task_tags"], "unique_id": "model.asana.int_asana__task_tags", "raw_code": "with task_tag as (\n    \n    select *\n    from {{ var('task_tag') }}\n\n),\n\nasana_tag as (\n\n    select * \n    from {{ var('tag') }}\n\n),\n\nagg_tags as (\n\n    select\n        task_tag.task_id,\n        {{ fivetran_utils.string_agg( 'asana_tag.tag_name', \"', '\" )}} as tags,\n        count(*) as number_of_tags\n    from task_tag \n    join asana_tag \n        on asana_tag.tag_id = task_tag.tag_id\n    group by 1\n    \n)\n\nselect * from agg_tags", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "intermediate/int_asana__task_tags.sql", "original_file_path": "models/intermediate/int_asana__task_tags.sql", "name": "int_asana__task_tags", "alias": "int_asana__task_tags", "checksum": {"name": "sha256", "checksum": "8016dbd490f23f719d4a3dd688ab6c5c2897b86746e3ea63c0b739cfbdda6848"}, "tags": [], "refs": [["stg_asana__task_tag"], ["stg_asana__tag"]], "sources": [], "metrics": [], "description": "Aggregates a count of and a list of the names of the tags attached to each task.", "columns": {"task_id": {"name": "task_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "asana://models/intermediate/intermediate_asana.yml", "compiled_path": "target/compiled/asana/models/intermediate/int_asana__task_tags.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "asana", "materialized": "ephemeral"}, "created_at": 1666801517.491315, "compiled_code": "with task_tag as (\n    \n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task_tag`\n\n),\n\nasana_tag as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__tag`\n\n),\n\nagg_tags as (\n\n    select\n        task_tag.task_id,\n        \n    string_agg(asana_tag.tag_name, ', ')\n\n as tags,\n        count(*) as number_of_tags\n    from task_tag \n    join asana_tag \n        on asana_tag.tag_id = task_tag.tag_id\n    group by 1\n    \n)\n\nselect * from agg_tags", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.asana.int_asana__task_open_length": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt.datediff"], "nodes": ["model.asana_source.stg_asana__task", "model.asana.int_asana__task_story"]}, "config": {"enabled": true, "alias": null, "schema": "asana", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests_asana", "fqn": ["asana", "intermediate", "int_asana__task_open_length"], "unique_id": "model.asana.int_asana__task_open_length", "raw_code": "with task as (\n    \n    select *\n    from {{ var('task') }}\n\n),\n\nstory as (\n\n    select * \n    from {{ ref('int_asana__task_story') }}\n\n),\n\nassignments as (\n    \n    select \n    target_task_id as task_id,\n    min(created_at) as first_assigned_at,\n    max(created_at) as last_assigned_at -- current assignment\n\n    from story\n    where action_taken = 'assigned'\n\n    group by 1\n\n),\n\n\nopen_assigned_length as (\n\n    {% set open_until = 'task.completed_at' if 'task.is_completed' is true else dbt.current_timestamp_backcompat() %}\n\n    select\n        task.task_id,\n        task.is_completed,\n        task.completed_at,\n        task.assignee_user_id is not null as is_currently_assigned,\n        assignments.task_id is not null as has_been_assigned,\n        assignments.last_assigned_at as last_assigned_at,\n        assignments.first_assigned_at as first_assigned_at,\n        {{ dbt.datediff('task.created_at', open_until, 'day') }} as days_open,\n\n        -- if the task is currently assigned, this is the time it has been assigned to this current user.\n        {{ dbt.datediff('assignments.last_assigned_at', open_until, 'day') }} as days_since_last_assignment,\n\n        {{ dbt.datediff('assignments.first_assigned_at', open_until, 'day') }} as days_since_first_assignment\n        \n\n    from task\n    left join assignments \n        on task.task_id = assignments.task_id\n\n)\n\n\nselect * from open_assigned_length", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "intermediate/int_asana__task_open_length.sql", "original_file_path": "models/intermediate/int_asana__task_open_length.sql", "name": "int_asana__task_open_length", "alias": "int_asana__task_open_length", "checksum": {"name": "sha256", "checksum": "5b19dd1475b36b2dcd4e392e36ba362b01ec870a93d6e6696c6feb5070aef4d9"}, "tags": [], "refs": [["stg_asana__task"], ["int_asana__task_story"]], "sources": [], "metrics": [], "description": "Computes the days that each task has spent open and assigned.", "columns": {"task_id": {"name": "task_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "asana://models/intermediate/intermediate_asana.yml", "compiled_path": "target/compiled/asana/models/intermediate/int_asana__task_open_length.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "asana", "materialized": "ephemeral"}, "created_at": 1666801517.48976, "compiled_code": "with  __dbt__cte__int_asana__task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n),task as (\n    \n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task`\n\n),\n\nstory as (\n\n    select * \n    from __dbt__cte__int_asana__task_story\n\n),\n\nassignments as (\n    \n    select \n    target_task_id as task_id,\n    min(created_at) as first_assigned_at,\n    max(created_at) as last_assigned_at -- current assignment\n\n    from story\n    where action_taken = 'assigned'\n\n    group by 1\n\n),\n\n\nopen_assigned_length as (\n\n    \n\n    select\n        task.task_id,\n        task.is_completed,\n        task.completed_at,\n        task.assignee_user_id is not null as is_currently_assigned,\n        assignments.task_id is not null as has_been_assigned,\n        assignments.last_assigned_at as last_assigned_at,\n        assignments.first_assigned_at as first_assigned_at,\n        \n\n    datetime_diff(\n        cast(current_timestamp as datetime),\n        cast(task.created_at as datetime),\n        day\n    )\n\n   as days_open,\n\n        -- if the task is currently assigned, this is the time it has been assigned to this current user.\n        \n\n    datetime_diff(\n        cast(current_timestamp as datetime),\n        cast(assignments.last_assigned_at as datetime),\n        day\n    )\n\n   as days_since_last_assignment,\n\n        \n\n    datetime_diff(\n        cast(current_timestamp as datetime),\n        cast(assignments.first_assigned_at as datetime),\n        day\n    )\n\n   as days_since_first_assignment\n        \n\n    from task\n    left join assignments \n        on task.task_id = assignments.task_id\n\n)\n\n\nselect * from open_assigned_length", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.int_asana__task_story", "sql": " __dbt__cte__int_asana__task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n)"}], "relation_name": null}, "model.asana.int_asana__task_followers": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.string_agg"], "nodes": ["model.asana_source.stg_asana__task_follower", "model.asana_source.stg_asana__user"]}, "config": {"enabled": true, "alias": null, "schema": "asana", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests_asana", "fqn": ["asana", "intermediate", "int_asana__task_followers"], "unique_id": "model.asana.int_asana__task_followers", "raw_code": "with task_follower as (\n    \n    select *\n    from {{ var('task_follower') }}\n\n),\n\nasana_user as (\n\n    select * \n    from {{ var('user') }}\n\n),\n\nagg_followers as (\n\n    select\n        task_follower.task_id,\n        {{ fivetran_utils.string_agg( 'asana_user.user_name', \"', '\" )}} as followers,\n        count(*) as number_of_followers\n    from task_follower \n    join asana_user \n        on asana_user.user_id = task_follower.user_id\n    group by 1\n    \n)\n\nselect * from agg_followers", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "intermediate/int_asana__task_followers.sql", "original_file_path": "models/intermediate/int_asana__task_followers.sql", "name": "int_asana__task_followers", "alias": "int_asana__task_followers", "checksum": {"name": "sha256", "checksum": "fafdd691a271f08b345565db3962fd360163ec2213098c8fda86265d2680710c"}, "tags": [], "refs": [["stg_asana__task_follower"], ["stg_asana__user"]], "sources": [], "metrics": [], "description": "Aggregates a count of and a list of the names of the users who follow each task", "columns": {"task_id": {"name": "task_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "asana://models/intermediate/intermediate_asana.yml", "compiled_path": "target/compiled/asana/models/intermediate/int_asana__task_followers.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "asana", "materialized": "ephemeral"}, "created_at": 1666801517.48931, "compiled_code": "with task_follower as (\n    \n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task_follower`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n\n),\n\nagg_followers as (\n\n    select\n        task_follower.task_id,\n        \n    string_agg(asana_user.user_name, ', ')\n\n as followers,\n        count(*) as number_of_followers\n    from task_follower \n    join asana_user \n        on asana_user.user_id = task_follower.user_id\n    group by 1\n    \n)\n\nselect * from agg_followers", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.asana.int_asana__project_user": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.asana_source.stg_asana__project_task", "model.asana.int_asana__task_assignee", "model.asana_source.stg_asana__project"]}, "config": {"enabled": true, "alias": null, "schema": "asana", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests_asana", "fqn": ["asana", "intermediate", "int_asana__project_user"], "unique_id": "model.asana.int_asana__project_user", "raw_code": "with project_tasks as (\n    \n    select *\n    from {{ var('project_task') }}\n),\n\nassigned_tasks as (\n    \n    select * \n    from {{ ref('int_asana__task_assignee') }}\n    where has_assignee\n    \n),\n\nproject as (\n    \n    select *\n    from {{ var('project') }}\n\n    where not is_archived\n\n),\n\nproject_assignee as (\n\n    select\n        project_tasks.project_id,\n        project_tasks.task_id,\n        assigned_tasks.assignee_user_id,\n        assigned_tasks.assignee_name,\n        not assigned_tasks.is_completed as currently_working_on\n\n    from project_tasks \n    join assigned_tasks \n        on assigned_tasks.task_id = project_tasks.task_id\n\n),\n\nproject_owner as (\n\n    select \n        project_id,\n        project_name,\n        owner_user_id\n\n    from project\n    \n    where owner_user_id is not null\n),\n\nproject_user as (\n    \n    select\n        project_id,\n        project_name,\n        owner_user_id as user_id,\n        'owner' as role,\n        null as currently_working_on\n    \n    from project_owner\n\n    union all\n\n    select\n        project.project_id,\n        project.project_name,\n        project_assignee.assignee_user_id as user_id,\n        'task assignee' as role,\n        project_assignee.currently_working_on\n    \n    from project \n    \n    join project_assignee \n        on project.project_id = project_assignee.project_id\n    group by 1,2,3,4,5\n\n)\n\n\nselect * from project_user", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "intermediate/int_asana__project_user.sql", "original_file_path": "models/intermediate/int_asana__project_user.sql", "name": "int_asana__project_user", "alias": "int_asana__project_user", "checksum": {"name": "sha256", "checksum": "28422acac2869e218af531cdd062ef4dcdde594a75a39e7ba4cc56119117e636"}, "tags": [], "refs": [["stg_asana__project_task"], ["int_asana__task_assignee"], ["stg_asana__project"]], "sources": [], "metrics": [], "description": "Table of who is *working* on the project -- its owner + users assigned to it tasks", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "asana://models/intermediate/intermediate_asana.yml", "compiled_path": "target/compiled/asana/models/intermediate/int_asana__project_user.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "asana", "materialized": "ephemeral"}, "created_at": 1666801517.487015, "compiled_code": "with  __dbt__cte__int_asana__task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n),project_tasks as (\n    \n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project_task`\n),\n\nassigned_tasks as (\n    \n    select * \n    from __dbt__cte__int_asana__task_assignee\n    where has_assignee\n    \n),\n\nproject as (\n    \n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project`\n\n    where not is_archived\n\n),\n\nproject_assignee as (\n\n    select\n        project_tasks.project_id,\n        project_tasks.task_id,\n        assigned_tasks.assignee_user_id,\n        assigned_tasks.assignee_name,\n        not assigned_tasks.is_completed as currently_working_on\n\n    from project_tasks \n    join assigned_tasks \n        on assigned_tasks.task_id = project_tasks.task_id\n\n),\n\nproject_owner as (\n\n    select \n        project_id,\n        project_name,\n        owner_user_id\n\n    from project\n    \n    where owner_user_id is not null\n),\n\nproject_user as (\n    \n    select\n        project_id,\n        project_name,\n        owner_user_id as user_id,\n        'owner' as role,\n        null as currently_working_on\n    \n    from project_owner\n\n    union all\n\n    select\n        project.project_id,\n        project.project_name,\n        project_assignee.assignee_user_id as user_id,\n        'task assignee' as role,\n        project_assignee.currently_working_on\n    \n    from project \n    \n    join project_assignee \n        on project.project_id = project_assignee.project_id\n    group by 1,2,3,4,5\n\n)\n\n\nselect * from project_user", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.int_asana__task_assignee", "sql": " __dbt__cte__int_asana__task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n)"}], "relation_name": null}, "model.asana.int_asana__task_first_modifier": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.asana.int_asana__task_story"]}, "config": {"enabled": true, "alias": null, "schema": "asana", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests_asana", "fqn": ["asana", "intermediate", "int_asana__task_first_modifier"], "unique_id": "model.asana.int_asana__task_first_modifier", "raw_code": "with story as (\n\n    select *\n    from {{ ref('int_asana__task_story') }}\n    where created_by_user_id is not null -- sometimes user id can be null in story. limit to ones with associated users\n),\n\nordered_stories as (\n\n    select \n        target_task_id,\n        created_by_user_id,\n        created_by_name,\n        created_at,\n        row_number() over ( partition by target_task_id order by created_at asc ) as nth_story\n        \n    from story\n\n),\n\nfirst_modifier as (\n\n    select  \n        target_task_id as task_id,\n        created_by_user_id as first_modifier_user_id,\n        created_by_name as first_modifier_name\n\n    from ordered_stories \n    where nth_story = 1\n)\n\nselect *\nfrom first_modifier", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "intermediate/int_asana__task_first_modifier.sql", "original_file_path": "models/intermediate/int_asana__task_first_modifier.sql", "name": "int_asana__task_first_modifier", "alias": "int_asana__task_first_modifier", "checksum": {"name": "sha256", "checksum": "1f6f8640a32bd71cb45062dfd5cffc7c6c5232051c33580299b613717f7ba2f6"}, "tags": [], "refs": [["int_asana__task_story"]], "sources": [], "metrics": [], "description": "Extracts the first person to make a story (modify) the task. A proxy for the task creator, since that's not provided.", "columns": {"task_id": {"name": "task_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "asana://models/intermediate/intermediate_asana.yml", "compiled_path": "target/compiled/asana/models/intermediate/int_asana__task_first_modifier.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "asana", "materialized": "ephemeral"}, "created_at": 1666801517.4887621, "compiled_code": "with  __dbt__cte__int_asana__task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n),story as (\n\n    select *\n    from __dbt__cte__int_asana__task_story\n    where created_by_user_id is not null -- sometimes user id can be null in story. limit to ones with associated users\n),\n\nordered_stories as (\n\n    select \n        target_task_id,\n        created_by_user_id,\n        created_by_name,\n        created_at,\n        row_number() over ( partition by target_task_id order by created_at asc ) as nth_story\n        \n    from story\n\n),\n\nfirst_modifier as (\n\n    select  \n        target_task_id as task_id,\n        created_by_user_id as first_modifier_user_id,\n        created_by_name as first_modifier_name\n\n    from ordered_stories \n    where nth_story = 1\n)\n\nselect *\nfrom first_modifier", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.int_asana__task_story", "sql": " __dbt__cte__int_asana__task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n)"}], "relation_name": null}, "model.asana.int_asana__task_projects": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.string_agg"], "nodes": ["model.asana_source.stg_asana__project_task", "model.asana_source.stg_asana__project", "model.asana_source.stg_asana__task_section", "model.asana_source.stg_asana__section"]}, "config": {"enabled": true, "alias": null, "schema": "asana", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests_asana", "fqn": ["asana", "intermediate", "int_asana__task_projects"], "unique_id": "model.asana.int_asana__task_projects", "raw_code": "with task_project as (\n\n    select * \n    from {{ var('project_task') }}\n\n),\n\nproject as (\n    \n    select * \n    from {{ var ('project') }}\n),\n\ntask_section as (\n\n    select * \n    from {{ var('task_section') }}\n\n),\n\nsection as (\n    \n    select * \n    from {{ var ('section') }}\n\n),\n\ntask_project_section as (\n\n    select \n        task_project.task_id,\n        project.project_name || (case when section.section_name = '(no section)' then ''\n            else ': ' || section.section_name end) as project_section, \n        project.project_id\n    from\n    task_project \n    join project \n        on project.project_id = task_project.project_id\n    join task_section\n        on task_section.task_id = task_project.task_id\n    join section \n        on section.section_id = task_section.section_id \n        and section.project_id = project.project_id\n),\n\nagg_project_sections as (\n    select \n        task_id,\n        {{ fivetran_utils.string_agg( 'task_project_section.project_section', \"', '\" )}} as projects_sections,\n        count(project_id) as number_of_projects\n\n    from task_project_section \n\n    group by 1\n)\n\nselect * from agg_project_sections", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "intermediate/int_asana__task_projects.sql", "original_file_path": "models/intermediate/int_asana__task_projects.sql", "name": "int_asana__task_projects", "alias": "int_asana__task_projects", "checksum": {"name": "sha256", "checksum": "fc36b507b9dba1840ad1d41d014cc5451ecb0c11c4e2043478f3ccf47d184aa2"}, "tags": [], "refs": [["stg_asana__project_task"], ["stg_asana__project"], ["stg_asana__task_section"], ["stg_asana__section"]], "sources": [], "metrics": [], "description": "Aggregates a count of and a list of the names of the projects and sections that each task belongs to.", "columns": {"task_id": {"name": "task_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "asana://models/intermediate/intermediate_asana.yml", "compiled_path": "target/compiled/asana/models/intermediate/int_asana__task_projects.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "asana", "materialized": "ephemeral"}, "created_at": 1666801517.490152, "compiled_code": "with task_project as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project_task`\n\n),\n\nproject as (\n    \n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project`\n),\n\ntask_section as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task_section`\n\n),\n\nsection as (\n    \n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__section`\n\n),\n\ntask_project_section as (\n\n    select \n        task_project.task_id,\n        project.project_name || (case when section.section_name = '(no section)' then ''\n            else ': ' || section.section_name end) as project_section, \n        project.project_id\n    from\n    task_project \n    join project \n        on project.project_id = task_project.project_id\n    join task_section\n        on task_section.task_id = task_project.task_id\n    join section \n        on section.section_id = task_section.section_id \n        and section.project_id = project.project_id\n),\n\nagg_project_sections as (\n    select \n        task_id,\n        \n    string_agg(task_project_section.project_section, ', ')\n\n as projects_sections,\n        count(project_id) as number_of_projects\n\n    from task_project_section \n\n    group by 1\n)\n\nselect * from agg_project_sections", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.asana.int_asana__task_assignee": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.asana_source.stg_asana__task", "model.asana_source.stg_asana__user"]}, "config": {"enabled": true, "alias": null, "schema": "asana", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests_asana", "fqn": ["asana", "intermediate", "int_asana__task_assignee"], "unique_id": "model.asana.int_asana__task_assignee", "raw_code": "with task as (\n\n    select * \n    from {{ var('task') }}\n\n),\n\nasana_user as (\n\n    select *\n    from {{ var('user') }}\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "intermediate/int_asana__task_assignee.sql", "original_file_path": "models/intermediate/int_asana__task_assignee.sql", "name": "int_asana__task_assignee", "alias": "int_asana__task_assignee", "checksum": {"name": "sha256", "checksum": "2dfff153566b1418a423d4275b9704e5d8b8c3a661be9e9babfc15aa4c5cead8"}, "tags": [], "refs": [["stg_asana__task"], ["stg_asana__user"]], "sources": [], "metrics": [], "description": "Combines tasks + information regarding their assigned user", "columns": {"task_id": {"name": "task_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "asana://models/intermediate/intermediate_asana.yml", "compiled_path": "target/compiled/asana/models/intermediate/int_asana__task_assignee.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "asana", "materialized": "ephemeral"}, "created_at": 1666801517.487871, "compiled_code": "with task as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.asana.int_asana__subtask_parent": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.asana.int_asana__task_assignee"]}, "config": {"enabled": true, "alias": null, "schema": "asana", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests_asana", "fqn": ["asana", "intermediate", "int_asana__subtask_parent"], "unique_id": "model.asana.int_asana__subtask_parent", "raw_code": "with task_assignee as (\n\n    select * \n    from  {{ ref('int_asana__task_assignee') }}\n\n),\n\n\nsubtask_parent as (\n\n    select\n        subtask.task_id as subtask_id,\n        parent.task_id as parent_task_id,\n        parent.task_name as parent_task_name,\n        parent.due_date as parent_due_date,\n        parent.created_at as parent_created_at,\n        parent.assignee_user_id as parent_assignee_user_id,\n        parent.assignee_name as parent_assignee_name\n\n    from task_assignee as parent \n    join task_assignee as subtask\n        on parent.task_id = subtask.parent_task_id\n\n)\n\nselect * from subtask_parent", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "intermediate/int_asana__subtask_parent.sql", "original_file_path": "models/intermediate/int_asana__subtask_parent.sql", "name": "int_asana__subtask_parent", "alias": "int_asana__subtask_parent", "checksum": {"name": "sha256", "checksum": "4abb15c88cfe83c53f5d4d97013d37d41689f4940b334b296b076eff5528b7b7"}, "tags": [], "refs": [["int_asana__task_assignee"]], "sources": [], "metrics": [], "description": "Combines subtasks + information regarding parent tasks", "columns": {"subtask_id": {"name": "subtask_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "asana://models/intermediate/intermediate_asana.yml", "compiled_path": "target/compiled/asana/models/intermediate/int_asana__subtask_parent.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "asana", "materialized": "ephemeral"}, "created_at": 1666801517.487413, "compiled_code": "with  __dbt__cte__int_asana__task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n),task_assignee as (\n\n    select * \n    from  __dbt__cte__int_asana__task_assignee\n\n),\n\n\nsubtask_parent as (\n\n    select\n        subtask.task_id as subtask_id,\n        parent.task_id as parent_task_id,\n        parent.task_name as parent_task_name,\n        parent.due_date as parent_due_date,\n        parent.created_at as parent_created_at,\n        parent.assignee_user_id as parent_assignee_user_id,\n        parent.assignee_name as parent_assignee_name\n\n    from task_assignee as parent \n    join task_assignee as subtask\n        on parent.task_id = subtask.parent_task_id\n\n)\n\nselect * from subtask_parent", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.int_asana__task_assignee", "sql": " __dbt__cte__int_asana__task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n)"}], "relation_name": null}, "model.asana.int_asana__task_story": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.asana_source.stg_asana__story", "model.asana_source.stg_asana__user"]}, "config": {"enabled": true, "alias": null, "schema": "asana", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "dbt-package-testing", "schema": "asana_integration_tests_asana", "fqn": ["asana", "intermediate", "int_asana__task_story"], "unique_id": "model.asana.int_asana__task_story", "raw_code": "with story as (\n    \n    select * \n    from {{ var('story') }}\n\n),\n\nasana_user as (\n\n    select * \n    from {{ var('user') }}\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n{% set actions = {\n    'added the name%': 'added name',\n    'changed the name%': 'changed name',\n    'removed the name': 'removed name',\n    'added the description%': 'added description',\n    'changed the description%': 'changed description',\n    'removed the description': 'removed description',\n    'added to%': 'added to project',\n    'removed from%': 'removed from project',\n    'assigned%': 'assigned',\n    'unassigned%': 'unassigned',\n    'changed the due date%': 'changed due date', \n    'changed the start date%due date%': 'changed due date',\n    'changed the start date%': 'changed start date',\n    'removed the due date%': 'removed due date',\n    'removed the date range%': 'removed due date',\n    'removed the start date': 'removed start date',\n    'added subtask%': 'added subtask',\n    'added%collaborator%': 'added collaborator',\n    'moved%': 'moved to section',\n    'duplicated task from%': 'duplicated this from other task',\n    'marked%as a duplicate of this': 'marked other task as duplicate of this',\n    'marked this a duplicate of%': 'marked as duplicate',\n    'marked this task complete': 'completed',\n    'completed this task': 'completed',\n    'marked incomplete': 'marked incomplete',\n    'marked this task as a milestone': 'marked as milestone',\n    'unmarked this task as a milestone': 'unmarked as milestone',\n    'marked this milestone complete': 'completed milestone',\n    'completed this milestone': 'completed milestone',\n    'attached%': 'attachment',\n    'liked your comment': 'liked comment',\n    'liked this task': 'liked task',\n    'liked your attachment': 'liked attachment',\n    'liked that you completed this task': 'liked completion',\n    'completed the last task you were waiting on%': 'completed dependency',\n    'added feedback to%': 'added feedback',\n    'changed%to%': 'changed tag',\n    'cleared%': 'cleared tag',\n    'comment': 'comment',\n    \"have a task due on%\": null \n\n} %}\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        {%- for key, value in actions.items() %} \n        when action_description like '{{key}}' then '{{value}}' \n        {%- endfor %}\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "intermediate/int_asana__task_story.sql", "original_file_path": "models/intermediate/int_asana__task_story.sql", "name": "int_asana__task_story", "alias": "int_asana__task_story", "checksum": {"name": "sha256", "checksum": "805d894194316cd83e1d8545a98c05a3b63d808f0bdf342160be47c79c05f6e9"}, "tags": [], "refs": [["stg_asana__story"], ["stg_asana__user"]], "sources": [], "metrics": [], "description": "Parses and categorizes asana stories into action types. Useful for looking at individual-task histories", "columns": {"story_id": {"name": "story_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "action_taken": {"name": "action_taken", "description": "The bucket that the story event falls into.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comment_content": {"name": "comment_content", "description": "If the action taken is a comment, this is the comment's text. Otherwise null.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "action_description": {"name": "action_description", "description": "The original pre-categorized content of the story", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "asana://models/intermediate/intermediate_asana.yml", "compiled_path": "target/compiled/asana/models/intermediate/int_asana__task_story.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "asana", "materialized": "ephemeral"}, "created_at": 1666801517.490945, "compiled_code": "with story as (\n    \n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "test.asana_source.unique_stg_asana__project_project_id.67bfab1228": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "project_id", "model": "{{ get_where_subquery(ref('stg_asana__project')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.asana_source.stg_asana__project"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana_source", "unique_stg_asana__project_project_id"], "unique_id": "test.asana_source.unique_stg_asana__project_project_id.67bfab1228", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "unique_stg_asana__project_project_id.sql", "original_file_path": "models/stg_asana.yml", "name": "unique_stg_asana__project_project_id", "alias": "unique_stg_asana__project_project_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_asana__project"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana_source/models/stg_asana.yml/unique_stg_asana__project_project_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.411128, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select project_id as unique_field\n  from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project`\n  where project_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "project_id", "file_key_name": "models.stg_asana__project"}, "test.asana_source.not_null_stg_asana__project_project_id.d27dae84fa": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "project_id", "model": "{{ get_where_subquery(ref('stg_asana__project')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.asana_source.stg_asana__project"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana_source", "not_null_stg_asana__project_project_id"], "unique_id": "test.asana_source.not_null_stg_asana__project_project_id.d27dae84fa", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "not_null_stg_asana__project_project_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana__project_project_id", "alias": "not_null_stg_asana__project_project_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_asana__project"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana_source/models/stg_asana.yml/not_null_stg_asana__project_project_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.412367, "compiled_code": "\n    \n    \n\n\n\nselect project_id\nfrom `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project`\nwhere project_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "project_id", "file_key_name": "models.stg_asana__project"}, "test.asana_source.not_null_stg_asana__project_task_project_id.e2450d16b1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "project_id", "model": "{{ get_where_subquery(ref('stg_asana__project_task')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.asana_source.stg_asana__project_task"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana_source", "not_null_stg_asana__project_task_project_id"], "unique_id": "test.asana_source.not_null_stg_asana__project_task_project_id.e2450d16b1", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "not_null_stg_asana__project_task_project_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana__project_task_project_id", "alias": "not_null_stg_asana__project_task_project_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_asana__project_task"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana_source/models/stg_asana.yml/not_null_stg_asana__project_task_project_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.4133382, "compiled_code": "\n    \n    \n\n\n\nselect project_id\nfrom `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project_task`\nwhere project_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "project_id", "file_key_name": "models.stg_asana__project_task"}, "test.asana_source.not_null_stg_asana__project_task_task_id.9479566014": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('stg_asana__project_task')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.asana_source.stg_asana__project_task"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana_source", "not_null_stg_asana__project_task_task_id"], "unique_id": "test.asana_source.not_null_stg_asana__project_task_task_id.9479566014", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "not_null_stg_asana__project_task_task_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana__project_task_task_id", "alias": "not_null_stg_asana__project_task_task_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_asana__project_task"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana_source/models/stg_asana.yml/not_null_stg_asana__project_task_task_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.4144561, "compiled_code": "\n    \n    \n\n\n\nselect task_id\nfrom `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project_task`\nwhere task_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_id", "file_key_name": "models.stg_asana__project_task"}, "test.asana_source.unique_stg_asana__section_section_id.0495dd3d2f": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "section_id", "model": "{{ get_where_subquery(ref('stg_asana__section')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.asana_source.stg_asana__section"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana_source", "unique_stg_asana__section_section_id"], "unique_id": "test.asana_source.unique_stg_asana__section_section_id.0495dd3d2f", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "unique_stg_asana__section_section_id.sql", "original_file_path": "models/stg_asana.yml", "name": "unique_stg_asana__section_section_id", "alias": "unique_stg_asana__section_section_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_asana__section"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana_source/models/stg_asana.yml/unique_stg_asana__section_section_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.415642, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select section_id as unique_field\n  from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__section`\n  where section_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "section_id", "file_key_name": "models.stg_asana__section"}, "test.asana_source.not_null_stg_asana__section_section_id.389ebce958": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "section_id", "model": "{{ get_where_subquery(ref('stg_asana__section')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.asana_source.stg_asana__section"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana_source", "not_null_stg_asana__section_section_id"], "unique_id": "test.asana_source.not_null_stg_asana__section_section_id.389ebce958", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "not_null_stg_asana__section_section_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana__section_section_id", "alias": "not_null_stg_asana__section_section_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_asana__section"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana_source/models/stg_asana.yml/not_null_stg_asana__section_section_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.4166248, "compiled_code": "\n    \n    \n\n\n\nselect section_id\nfrom `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__section`\nwhere section_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "section_id", "file_key_name": "models.stg_asana__section"}, "test.asana_source.unique_stg_asana__story_story_id.414f25bb84": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "story_id", "model": "{{ get_where_subquery(ref('stg_asana__story')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.asana_source.stg_asana__story"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana_source", "unique_stg_asana__story_story_id"], "unique_id": "test.asana_source.unique_stg_asana__story_story_id.414f25bb84", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "unique_stg_asana__story_story_id.sql", "original_file_path": "models/stg_asana.yml", "name": "unique_stg_asana__story_story_id", "alias": "unique_stg_asana__story_story_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_asana__story"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana_source/models/stg_asana.yml/unique_stg_asana__story_story_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.417602, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select story_id as unique_field\n  from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__story`\n  where story_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "story_id", "file_key_name": "models.stg_asana__story"}, "test.asana_source.not_null_stg_asana__story_story_id.ca847d0848": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "story_id", "model": "{{ get_where_subquery(ref('stg_asana__story')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.asana_source.stg_asana__story"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana_source", "not_null_stg_asana__story_story_id"], "unique_id": "test.asana_source.not_null_stg_asana__story_story_id.ca847d0848", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "not_null_stg_asana__story_story_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana__story_story_id", "alias": "not_null_stg_asana__story_story_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_asana__story"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana_source/models/stg_asana.yml/not_null_stg_asana__story_story_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.418688, "compiled_code": "\n    \n    \n\n\n\nselect story_id\nfrom `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__story`\nwhere story_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "story_id", "file_key_name": "models.stg_asana__story"}, "test.asana_source.not_null_stg_asana__story_target_task_id.3f971de06e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "target_task_id", "model": "{{ get_where_subquery(ref('stg_asana__story')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.asana_source.stg_asana__story"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana_source", "not_null_stg_asana__story_target_task_id"], "unique_id": "test.asana_source.not_null_stg_asana__story_target_task_id.3f971de06e", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "not_null_stg_asana__story_target_task_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana__story_target_task_id", "alias": "not_null_stg_asana__story_target_task_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_asana__story"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana_source/models/stg_asana.yml/not_null_stg_asana__story_target_task_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.419848, "compiled_code": "\n    \n    \n\n\n\nselect target_task_id\nfrom `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__story`\nwhere target_task_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "target_task_id", "file_key_name": "models.stg_asana__story"}, "test.asana_source.unique_stg_asana__tag_tag_id.fd78b190c7": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "tag_id", "model": "{{ get_where_subquery(ref('stg_asana__tag')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.asana_source.stg_asana__tag"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana_source", "unique_stg_asana__tag_tag_id"], "unique_id": "test.asana_source.unique_stg_asana__tag_tag_id.fd78b190c7", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "unique_stg_asana__tag_tag_id.sql", "original_file_path": "models/stg_asana.yml", "name": "unique_stg_asana__tag_tag_id", "alias": "unique_stg_asana__tag_tag_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_asana__tag"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana_source/models/stg_asana.yml/unique_stg_asana__tag_tag_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.420807, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select tag_id as unique_field\n  from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__tag`\n  where tag_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tag_id", "file_key_name": "models.stg_asana__tag"}, "test.asana_source.not_null_stg_asana__tag_tag_id.c6a8187ca2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "tag_id", "model": "{{ get_where_subquery(ref('stg_asana__tag')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.asana_source.stg_asana__tag"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana_source", "not_null_stg_asana__tag_tag_id"], "unique_id": "test.asana_source.not_null_stg_asana__tag_tag_id.c6a8187ca2", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "not_null_stg_asana__tag_tag_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana__tag_tag_id", "alias": "not_null_stg_asana__tag_tag_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_asana__tag"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana_source/models/stg_asana.yml/not_null_stg_asana__tag_tag_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.4218, "compiled_code": "\n    \n    \n\n\n\nselect tag_id\nfrom `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__tag`\nwhere tag_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tag_id", "file_key_name": "models.stg_asana__tag"}, "test.asana_source.unique_stg_asana__task_task_id.a5271275a5": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('stg_asana__task')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.asana_source.stg_asana__task"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana_source", "unique_stg_asana__task_task_id"], "unique_id": "test.asana_source.unique_stg_asana__task_task_id.a5271275a5", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "unique_stg_asana__task_task_id.sql", "original_file_path": "models/stg_asana.yml", "name": "unique_stg_asana__task_task_id", "alias": "unique_stg_asana__task_task_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_asana__task"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana_source/models/stg_asana.yml/unique_stg_asana__task_task_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.4227462, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select task_id as unique_field\n  from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task`\n  where task_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_id", "file_key_name": "models.stg_asana__task"}, "test.asana_source.not_null_stg_asana__task_task_id.924cc69000": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('stg_asana__task')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.asana_source.stg_asana__task"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana_source", "not_null_stg_asana__task_task_id"], "unique_id": "test.asana_source.not_null_stg_asana__task_task_id.924cc69000", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "not_null_stg_asana__task_task_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana__task_task_id", "alias": "not_null_stg_asana__task_task_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_asana__task"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana_source/models/stg_asana.yml/not_null_stg_asana__task_task_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.4239402, "compiled_code": "\n    \n    \n\n\n\nselect task_id\nfrom `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task`\nwhere task_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_id", "file_key_name": "models.stg_asana__task"}, "test.asana_source.not_null_stg_asana__task_follower_task_id.5af35f322c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('stg_asana__task_follower')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.asana_source.stg_asana__task_follower"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana_source", "not_null_stg_asana__task_follower_task_id"], "unique_id": "test.asana_source.not_null_stg_asana__task_follower_task_id.5af35f322c", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "not_null_stg_asana__task_follower_task_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana__task_follower_task_id", "alias": "not_null_stg_asana__task_follower_task_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_asana__task_follower"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana_source/models/stg_asana.yml/not_null_stg_asana__task_follower_task_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.424891, "compiled_code": "\n    \n    \n\n\n\nselect task_id\nfrom `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task_follower`\nwhere task_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_id", "file_key_name": "models.stg_asana__task_follower"}, "test.asana_source.not_null_stg_asana__task_follower_user_id.e0aea0b15e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('stg_asana__task_follower')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.asana_source.stg_asana__task_follower"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana_source", "not_null_stg_asana__task_follower_user_id"], "unique_id": "test.asana_source.not_null_stg_asana__task_follower_user_id.e0aea0b15e", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "not_null_stg_asana__task_follower_user_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana__task_follower_user_id", "alias": "not_null_stg_asana__task_follower_user_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_asana__task_follower"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana_source/models/stg_asana.yml/not_null_stg_asana__task_follower_user_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.425954, "compiled_code": "\n    \n    \n\n\n\nselect user_id\nfrom `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task_follower`\nwhere user_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_id", "file_key_name": "models.stg_asana__task_follower"}, "test.asana_source.not_null_stg_asana__task_section_task_id.ab81301de8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('stg_asana__task_section')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.asana_source.stg_asana__task_section"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana_source", "not_null_stg_asana__task_section_task_id"], "unique_id": "test.asana_source.not_null_stg_asana__task_section_task_id.ab81301de8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "not_null_stg_asana__task_section_task_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana__task_section_task_id", "alias": "not_null_stg_asana__task_section_task_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_asana__task_section"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana_source/models/stg_asana.yml/not_null_stg_asana__task_section_task_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.426882, "compiled_code": "\n    \n    \n\n\n\nselect task_id\nfrom `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task_section`\nwhere task_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_id", "file_key_name": "models.stg_asana__task_section"}, "test.asana_source.not_null_stg_asana__task_section_section_id.b0977a4cfe": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "section_id", "model": "{{ get_where_subquery(ref('stg_asana__task_section')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.asana_source.stg_asana__task_section"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana_source", "not_null_stg_asana__task_section_section_id"], "unique_id": "test.asana_source.not_null_stg_asana__task_section_section_id.b0977a4cfe", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "not_null_stg_asana__task_section_section_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana__task_section_section_id", "alias": "not_null_stg_asana__task_section_section_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_asana__task_section"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana_source/models/stg_asana.yml/not_null_stg_asana__task_section_section_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.428013, "compiled_code": "\n    \n    \n\n\n\nselect section_id\nfrom `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task_section`\nwhere section_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "section_id", "file_key_name": "models.stg_asana__task_section"}, "test.asana_source.not_null_stg_asana__task_tag_tag_id.d523de41d8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "tag_id", "model": "{{ get_where_subquery(ref('stg_asana__task_tag')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.asana_source.stg_asana__task_tag"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana_source", "not_null_stg_asana__task_tag_tag_id"], "unique_id": "test.asana_source.not_null_stg_asana__task_tag_tag_id.d523de41d8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "not_null_stg_asana__task_tag_tag_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana__task_tag_tag_id", "alias": "not_null_stg_asana__task_tag_tag_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_asana__task_tag"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana_source/models/stg_asana.yml/not_null_stg_asana__task_tag_tag_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.4289489, "compiled_code": "\n    \n    \n\n\n\nselect tag_id\nfrom `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task_tag`\nwhere tag_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tag_id", "file_key_name": "models.stg_asana__task_tag"}, "test.asana_source.not_null_stg_asana__task_tag_task_id.9d27624748": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('stg_asana__task_tag')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.asana_source.stg_asana__task_tag"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana_source", "not_null_stg_asana__task_tag_task_id"], "unique_id": "test.asana_source.not_null_stg_asana__task_tag_task_id.9d27624748", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "not_null_stg_asana__task_tag_task_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana__task_tag_task_id", "alias": "not_null_stg_asana__task_tag_task_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_asana__task_tag"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana_source/models/stg_asana.yml/not_null_stg_asana__task_tag_task_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.4299679, "compiled_code": "\n    \n    \n\n\n\nselect task_id\nfrom `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task_tag`\nwhere task_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_id", "file_key_name": "models.stg_asana__task_tag"}, "test.asana_source.unique_stg_asana__team_team_id.111fe15873": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "team_id", "model": "{{ get_where_subquery(ref('stg_asana__team')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.asana_source.stg_asana__team"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana_source", "unique_stg_asana__team_team_id"], "unique_id": "test.asana_source.unique_stg_asana__team_team_id.111fe15873", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "unique_stg_asana__team_team_id.sql", "original_file_path": "models/stg_asana.yml", "name": "unique_stg_asana__team_team_id", "alias": "unique_stg_asana__team_team_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_asana__team"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana_source/models/stg_asana.yml/unique_stg_asana__team_team_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.430913, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select team_id as unique_field\n  from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__team`\n  where team_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "team_id", "file_key_name": "models.stg_asana__team"}, "test.asana_source.not_null_stg_asana__team_team_id.e12b563474": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "team_id", "model": "{{ get_where_subquery(ref('stg_asana__team')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.asana_source.stg_asana__team"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana_source", "not_null_stg_asana__team_team_id"], "unique_id": "test.asana_source.not_null_stg_asana__team_team_id.e12b563474", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "not_null_stg_asana__team_team_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana__team_team_id", "alias": "not_null_stg_asana__team_team_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_asana__team"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana_source/models/stg_asana.yml/not_null_stg_asana__team_team_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.4320698, "compiled_code": "\n    \n    \n\n\n\nselect team_id\nfrom `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__team`\nwhere team_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "team_id", "file_key_name": "models.stg_asana__team"}, "test.asana_source.unique_stg_asana__user_user_id.73808d6267": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('stg_asana__user')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.asana_source.stg_asana__user"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana_source", "unique_stg_asana__user_user_id"], "unique_id": "test.asana_source.unique_stg_asana__user_user_id.73808d6267", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "unique_stg_asana__user_user_id.sql", "original_file_path": "models/stg_asana.yml", "name": "unique_stg_asana__user_user_id", "alias": "unique_stg_asana__user_user_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_asana__user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana_source/models/stg_asana.yml/unique_stg_asana__user_user_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.43303, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select user_id as unique_field\n  from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n  where user_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_id", "file_key_name": "models.stg_asana__user"}, "test.asana_source.not_null_stg_asana__user_user_id.4e900e8ec6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('stg_asana__user')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.asana_source.stg_asana__user"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana_source", "not_null_stg_asana__user_user_id"], "unique_id": "test.asana_source.not_null_stg_asana__user_user_id.4e900e8ec6", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "not_null_stg_asana__user_user_id.sql", "original_file_path": "models/stg_asana.yml", "name": "not_null_stg_asana__user_user_id", "alias": "not_null_stg_asana__user_user_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_asana__user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana_source/models/stg_asana.yml/not_null_stg_asana__user_user_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.4340549, "compiled_code": "\n    \n    \n\n\n\nselect user_id\nfrom `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\nwhere user_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_id", "file_key_name": "models.stg_asana__user"}, "test.asana.unique_asana__task_task_id.ebfe331df1": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('asana__task')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.asana.asana__task"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana", "unique_asana__task_task_id"], "unique_id": "test.asana.unique_asana__task_task_id.ebfe331df1", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "unique_asana__task_task_id.sql", "original_file_path": "models/asana.yml", "name": "unique_asana__task_task_id", "alias": "unique_asana__task_task_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["asana__task"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana/models/asana.yml/unique_asana__task_task_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.4740639, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select task_id as unique_field\n  from `dbt-package-testing`.`asana_integration_tests_asana`.`asana__task`\n  where task_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_id", "file_key_name": "models.asana__task"}, "test.asana.not_null_asana__task_task_id.6d36eb2cd0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('asana__task')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.asana.asana__task"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana", "not_null_asana__task_task_id"], "unique_id": "test.asana.not_null_asana__task_task_id.6d36eb2cd0", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "not_null_asana__task_task_id.sql", "original_file_path": "models/asana.yml", "name": "not_null_asana__task_task_id", "alias": "not_null_asana__task_task_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["asana__task"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana/models/asana.yml/not_null_asana__task_task_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.4750981, "compiled_code": "\n    \n    \n\n\n\nselect task_id\nfrom `dbt-package-testing`.`asana_integration_tests_asana`.`asana__task`\nwhere task_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "task_id", "file_key_name": "models.asana__task"}, "test.asana.unique_asana__user_user_id.3c4b63387e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('asana__user')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.asana.asana__user"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana", "unique_asana__user_user_id"], "unique_id": "test.asana.unique_asana__user_user_id.3c4b63387e", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "unique_asana__user_user_id.sql", "original_file_path": "models/asana.yml", "name": "unique_asana__user_user_id", "alias": "unique_asana__user_user_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["asana__user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana/models/asana.yml/unique_asana__user_user_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.4761999, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select user_id as unique_field\n  from `dbt-package-testing`.`asana_integration_tests_asana`.`asana__user`\n  where user_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_id", "file_key_name": "models.asana__user"}, "test.asana.not_null_asana__user_user_id.eb9cd93a43": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('asana__user')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.asana.asana__user"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana", "not_null_asana__user_user_id"], "unique_id": "test.asana.not_null_asana__user_user_id.eb9cd93a43", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "not_null_asana__user_user_id.sql", "original_file_path": "models/asana.yml", "name": "not_null_asana__user_user_id", "alias": "not_null_asana__user_user_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["asana__user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana/models/asana.yml/not_null_asana__user_user_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.4772851, "compiled_code": "\n    \n    \n\n\n\nselect user_id\nfrom `dbt-package-testing`.`asana_integration_tests_asana`.`asana__user`\nwhere user_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_id", "file_key_name": "models.asana__user"}, "test.asana.unique_asana__project_project_id.66a76364ef": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "project_id", "model": "{{ get_where_subquery(ref('asana__project')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.asana.asana__project"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana", "unique_asana__project_project_id"], "unique_id": "test.asana.unique_asana__project_project_id.66a76364ef", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "unique_asana__project_project_id.sql", "original_file_path": "models/asana.yml", "name": "unique_asana__project_project_id", "alias": "unique_asana__project_project_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["asana__project"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana/models/asana.yml/unique_asana__project_project_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.4784, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select project_id as unique_field\n  from `dbt-package-testing`.`asana_integration_tests_asana`.`asana__project`\n  where project_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "project_id", "file_key_name": "models.asana__project"}, "test.asana.not_null_asana__project_project_id.78420e1b45": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "project_id", "model": "{{ get_where_subquery(ref('asana__project')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.asana.asana__project"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana", "not_null_asana__project_project_id"], "unique_id": "test.asana.not_null_asana__project_project_id.78420e1b45", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "not_null_asana__project_project_id.sql", "original_file_path": "models/asana.yml", "name": "not_null_asana__project_project_id", "alias": "not_null_asana__project_project_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["asana__project"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana/models/asana.yml/not_null_asana__project_project_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.479369, "compiled_code": "\n    \n    \n\n\n\nselect project_id\nfrom `dbt-package-testing`.`asana_integration_tests_asana`.`asana__project`\nwhere project_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "project_id", "file_key_name": "models.asana__project"}, "test.asana.unique_asana__team_team_id.ada6b5e093": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "team_id", "model": "{{ get_where_subquery(ref('asana__team')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.asana.asana__team"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana", "unique_asana__team_team_id"], "unique_id": "test.asana.unique_asana__team_team_id.ada6b5e093", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "unique_asana__team_team_id.sql", "original_file_path": "models/asana.yml", "name": "unique_asana__team_team_id", "alias": "unique_asana__team_team_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["asana__team"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana/models/asana.yml/unique_asana__team_team_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.4804218, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select team_id as unique_field\n  from `dbt-package-testing`.`asana_integration_tests_asana`.`asana__team`\n  where team_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "team_id", "file_key_name": "models.asana__team"}, "test.asana.not_null_asana__team_team_id.cd6b6c88bf": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "team_id", "model": "{{ get_where_subquery(ref('asana__team')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.asana.asana__team"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana", "not_null_asana__team_team_id"], "unique_id": "test.asana.not_null_asana__team_team_id.cd6b6c88bf", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "not_null_asana__team_team_id.sql", "original_file_path": "models/asana.yml", "name": "not_null_asana__team_team_id", "alias": "not_null_asana__team_team_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["asana__team"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana/models/asana.yml/not_null_asana__team_team_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.48151, "compiled_code": "\n    \n    \n\n\n\nselect team_id\nfrom `dbt-package-testing`.`asana_integration_tests_asana`.`asana__team`\nwhere team_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "team_id", "file_key_name": "models.asana__team"}, "test.asana.unique_asana__tag_tag_id.46c0d2510f": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "tag_id", "model": "{{ get_where_subquery(ref('asana__tag')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.asana.asana__tag"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana", "unique_asana__tag_tag_id"], "unique_id": "test.asana.unique_asana__tag_tag_id.46c0d2510f", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "unique_asana__tag_tag_id.sql", "original_file_path": "models/asana.yml", "name": "unique_asana__tag_tag_id", "alias": "unique_asana__tag_tag_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["asana__tag"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana/models/asana.yml/unique_asana__tag_tag_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.48255, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select tag_id as unique_field\n  from `dbt-package-testing`.`asana_integration_tests_asana`.`asana__tag`\n  where tag_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tag_id", "file_key_name": "models.asana__tag"}, "test.asana.not_null_asana__tag_tag_id.593d626953": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "tag_id", "model": "{{ get_where_subquery(ref('asana__tag')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.asana.asana__tag"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana", "not_null_asana__tag_tag_id"], "unique_id": "test.asana.not_null_asana__tag_tag_id.593d626953", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "not_null_asana__tag_tag_id.sql", "original_file_path": "models/asana.yml", "name": "not_null_asana__tag_tag_id", "alias": "not_null_asana__tag_tag_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["asana__tag"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana/models/asana.yml/not_null_asana__tag_tag_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.483503, "compiled_code": "\n    \n    \n\n\n\nselect tag_id\nfrom `dbt-package-testing`.`asana_integration_tests_asana`.`asana__tag`\nwhere tag_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "tag_id", "file_key_name": "models.asana__tag"}, "test.asana.unique_asana__daily_metrics_date_day.e8d67f545d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('asana__daily_metrics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.asana.asana__daily_metrics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana", "unique_asana__daily_metrics_date_day"], "unique_id": "test.asana.unique_asana__daily_metrics_date_day.e8d67f545d", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "unique_asana__daily_metrics_date_day.sql", "original_file_path": "models/asana.yml", "name": "unique_asana__daily_metrics_date_day", "alias": "unique_asana__daily_metrics_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["asana__daily_metrics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana/models/asana.yml/unique_asana__daily_metrics_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.4845219, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select date_day as unique_field\n  from `dbt-package-testing`.`asana_integration_tests_asana`.`asana__daily_metrics`\n  where date_day is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.asana__daily_metrics"}, "test.asana.not_null_asana__daily_metrics_date_day.363a2a09cf": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_day", "model": "{{ get_where_subquery(ref('asana__daily_metrics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.asana.asana__daily_metrics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana", "not_null_asana__daily_metrics_date_day"], "unique_id": "test.asana.not_null_asana__daily_metrics_date_day.363a2a09cf", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "not_null_asana__daily_metrics_date_day.sql", "original_file_path": "models/asana.yml", "name": "not_null_asana__daily_metrics_date_day", "alias": "not_null_asana__daily_metrics_date_day", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["asana__daily_metrics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana/models/asana.yml/not_null_asana__daily_metrics_date_day.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.4856372, "compiled_code": "\n    \n    \n\n\n\nselect date_day\nfrom `dbt-package-testing`.`asana_integration_tests_asana`.`asana__daily_metrics`\nwhere date_day is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_day", "file_key_name": "models.asana__daily_metrics"}, "test.asana.unique_int_asana__project_task_metrics_project_id.049cc9b8a6": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "project_id", "model": "{{ get_where_subquery(ref('int_asana__project_task_metrics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.asana.int_asana__project_task_metrics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana", "intermediate", "unique_int_asana__project_task_metrics_project_id"], "unique_id": "test.asana.unique_int_asana__project_task_metrics_project_id.049cc9b8a6", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "unique_int_asana__project_task_metrics_project_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "unique_int_asana__project_task_metrics_project_id", "alias": "unique_int_asana__project_task_metrics_project_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_asana__project_task_metrics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/unique_int_asana__project_task_metrics_project_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.4923022, "compiled_code": "\n    \n    \n\nwith  __dbt__cte__int_asana__project_task_metrics as (\nwith task as (\n\n    select *\n    from `dbt-package-testing`.`asana_integration_tests_asana`.`asana__task`\n\n),\n\nproject as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project`\n\n),\n\nproject_task as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project_task`\n),\n\nproject_task_history as (\n\n    select\n        project.project_id,\n        task.task_id,\n        task.is_completed as task_is_completed,\n        task.assignee_user_id as task_assignee_user_id,\n        task.days_open as task_days_open,\n        task.days_since_last_assignment as task_days_assigned_current_user\n\n    from project\n    left join project_task \n        on project.project_id = project_task.project_id\n    left join task \n        on project_task.task_id = task.task_id\n\n),\n\nagg_proj_tasks as (\n\n    select \n    project_id,\n    sum(case when not task_is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when not task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_open_tasks,\n    sum(case when task_is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_tasks_completed,\n    sum(case when task_is_completed then task_days_open else 0 end) as total_days_open,\n    sum(case when task_is_completed then task_days_assigned_current_user else 0 end) as total_days_assigned_last_user -- will divde later for avg\n\n    from  project_task_history\n\n    group by 1\n\n),\n\nfinal as (\n\n    select\n        agg_proj_tasks.*,\n        round(nullif(total_days_open, 0) * 1.0 / nullif(number_of_tasks_completed, 0), 0) as avg_close_time_days,\n        round(nullif(total_days_assigned_last_user, 0) * 1.0 / nullif(number_of_assigned_tasks_completed, 0), 0) as avg_close_time_assigned_days\n\n    from agg_proj_tasks\n    \n)\n\nselect * from final\n),dbt_test__target as (\n\n  select project_id as unique_field\n  from __dbt__cte__int_asana__project_task_metrics\n  where project_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.int_asana__project_task_metrics", "sql": " __dbt__cte__int_asana__project_task_metrics as (\nwith task as (\n\n    select *\n    from `dbt-package-testing`.`asana_integration_tests_asana`.`asana__task`\n\n),\n\nproject as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project`\n\n),\n\nproject_task as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project_task`\n),\n\nproject_task_history as (\n\n    select\n        project.project_id,\n        task.task_id,\n        task.is_completed as task_is_completed,\n        task.assignee_user_id as task_assignee_user_id,\n        task.days_open as task_days_open,\n        task.days_since_last_assignment as task_days_assigned_current_user\n\n    from project\n    left join project_task \n        on project.project_id = project_task.project_id\n    left join task \n        on project_task.task_id = task.task_id\n\n),\n\nagg_proj_tasks as (\n\n    select \n    project_id,\n    sum(case when not task_is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when not task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_open_tasks,\n    sum(case when task_is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_tasks_completed,\n    sum(case when task_is_completed then task_days_open else 0 end) as total_days_open,\n    sum(case when task_is_completed then task_days_assigned_current_user else 0 end) as total_days_assigned_last_user -- will divde later for avg\n\n    from  project_task_history\n\n    group by 1\n\n),\n\nfinal as (\n\n    select\n        agg_proj_tasks.*,\n        round(nullif(total_days_open, 0) * 1.0 / nullif(number_of_tasks_completed, 0), 0) as avg_close_time_days,\n        round(nullif(total_days_assigned_last_user, 0) * 1.0 / nullif(number_of_assigned_tasks_completed, 0), 0) as avg_close_time_assigned_days\n\n    from agg_proj_tasks\n    \n)\n\nselect * from final\n)"}], "relation_name": null, "column_name": "project_id", "file_key_name": "models.int_asana__project_task_metrics"}, "test.asana.not_null_int_asana__project_task_metrics_project_id.804fd1daf3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "project_id", "model": "{{ get_where_subquery(ref('int_asana__project_task_metrics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.asana.int_asana__project_task_metrics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana", "intermediate", "not_null_int_asana__project_task_metrics_project_id"], "unique_id": "test.asana.not_null_int_asana__project_task_metrics_project_id.804fd1daf3", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "not_null_int_asana__project_task_metrics_project_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "not_null_int_asana__project_task_metrics_project_id", "alias": "not_null_int_asana__project_task_metrics_project_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_asana__project_task_metrics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/not_null_int_asana__project_task_metrics_project_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.493284, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_asana__project_task_metrics as (\nwith task as (\n\n    select *\n    from `dbt-package-testing`.`asana_integration_tests_asana`.`asana__task`\n\n),\n\nproject as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project`\n\n),\n\nproject_task as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project_task`\n),\n\nproject_task_history as (\n\n    select\n        project.project_id,\n        task.task_id,\n        task.is_completed as task_is_completed,\n        task.assignee_user_id as task_assignee_user_id,\n        task.days_open as task_days_open,\n        task.days_since_last_assignment as task_days_assigned_current_user\n\n    from project\n    left join project_task \n        on project.project_id = project_task.project_id\n    left join task \n        on project_task.task_id = task.task_id\n\n),\n\nagg_proj_tasks as (\n\n    select \n    project_id,\n    sum(case when not task_is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when not task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_open_tasks,\n    sum(case when task_is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_tasks_completed,\n    sum(case when task_is_completed then task_days_open else 0 end) as total_days_open,\n    sum(case when task_is_completed then task_days_assigned_current_user else 0 end) as total_days_assigned_last_user -- will divde later for avg\n\n    from  project_task_history\n\n    group by 1\n\n),\n\nfinal as (\n\n    select\n        agg_proj_tasks.*,\n        round(nullif(total_days_open, 0) * 1.0 / nullif(number_of_tasks_completed, 0), 0) as avg_close_time_days,\n        round(nullif(total_days_assigned_last_user, 0) * 1.0 / nullif(number_of_assigned_tasks_completed, 0), 0) as avg_close_time_assigned_days\n\n    from agg_proj_tasks\n    \n)\n\nselect * from final\n)select project_id\nfrom __dbt__cte__int_asana__project_task_metrics\nwhere project_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.int_asana__project_task_metrics", "sql": " __dbt__cte__int_asana__project_task_metrics as (\nwith task as (\n\n    select *\n    from `dbt-package-testing`.`asana_integration_tests_asana`.`asana__task`\n\n),\n\nproject as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project`\n\n),\n\nproject_task as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project_task`\n),\n\nproject_task_history as (\n\n    select\n        project.project_id,\n        task.task_id,\n        task.is_completed as task_is_completed,\n        task.assignee_user_id as task_assignee_user_id,\n        task.days_open as task_days_open,\n        task.days_since_last_assignment as task_days_assigned_current_user\n\n    from project\n    left join project_task \n        on project.project_id = project_task.project_id\n    left join task \n        on project_task.task_id = task.task_id\n\n),\n\nagg_proj_tasks as (\n\n    select \n    project_id,\n    sum(case when not task_is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when not task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_open_tasks,\n    sum(case when task_is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when task_is_completed and task_assignee_user_id is not null then 1 else 0 end) as number_of_assigned_tasks_completed,\n    sum(case when task_is_completed then task_days_open else 0 end) as total_days_open,\n    sum(case when task_is_completed then task_days_assigned_current_user else 0 end) as total_days_assigned_last_user -- will divde later for avg\n\n    from  project_task_history\n\n    group by 1\n\n),\n\nfinal as (\n\n    select\n        agg_proj_tasks.*,\n        round(nullif(total_days_open, 0) * 1.0 / nullif(number_of_tasks_completed, 0), 0) as avg_close_time_days,\n        round(nullif(total_days_assigned_last_user, 0) * 1.0 / nullif(number_of_assigned_tasks_completed, 0), 0) as avg_close_time_assigned_days\n\n    from agg_proj_tasks\n    \n)\n\nselect * from final\n)"}], "relation_name": null, "column_name": "project_id", "file_key_name": "models.int_asana__project_task_metrics"}, "test.asana.dbt_utils_unique_combination_of_columns_int_asana__project_user_project_id__user_id__role__currently_working_on.f9493098e0": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["project_id", "user_id", "role", "currently_working_on"], "model": "{{ get_where_subquery(ref('int_asana__project_user')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.asana.int_asana__project_user"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_2eee10354a4e647bd50fdf44bb16839c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana", "intermediate", "dbt_utils_unique_combination_of_columns_int_asana__project_user_project_id__user_id__role__currently_working_on"], "unique_id": "test.asana.dbt_utils_unique_combination_of_columns_int_asana__project_user_project_id__user_id__role__currently_working_on.f9493098e0", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_2eee10354a4e647bd50fdf44bb16839c\") }}", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "dbt_utils_unique_combination_o_2eee10354a4e647bd50fdf44bb16839c.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "dbt_utils_unique_combination_of_columns_int_asana__project_user_project_id__user_id__role__currently_working_on", "alias": "dbt_utils_unique_combination_o_2eee10354a4e647bd50fdf44bb16839c", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_asana__project_user"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/dbt_utils_unique_combination_o_2eee10354a4e647bd50fdf44bb16839c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_2eee10354a4e647bd50fdf44bb16839c"}, "created_at": 1666801517.494336, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_asana__task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n),  __dbt__cte__int_asana__project_user as (\nwith project_tasks as (\n    \n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project_task`\n),\n\nassigned_tasks as (\n    \n    select * \n    from __dbt__cte__int_asana__task_assignee\n    where has_assignee\n    \n),\n\nproject as (\n    \n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project`\n\n    where not is_archived\n\n),\n\nproject_assignee as (\n\n    select\n        project_tasks.project_id,\n        project_tasks.task_id,\n        assigned_tasks.assignee_user_id,\n        assigned_tasks.assignee_name,\n        not assigned_tasks.is_completed as currently_working_on\n\n    from project_tasks \n    join assigned_tasks \n        on assigned_tasks.task_id = project_tasks.task_id\n\n),\n\nproject_owner as (\n\n    select \n        project_id,\n        project_name,\n        owner_user_id\n\n    from project\n    \n    where owner_user_id is not null\n),\n\nproject_user as (\n    \n    select\n        project_id,\n        project_name,\n        owner_user_id as user_id,\n        'owner' as role,\n        null as currently_working_on\n    \n    from project_owner\n\n    union all\n\n    select\n        project.project_id,\n        project.project_name,\n        project_assignee.assignee_user_id as user_id,\n        'task assignee' as role,\n        project_assignee.currently_working_on\n    \n    from project \n    \n    join project_assignee \n        on project.project_id = project_assignee.project_id\n    group by 1,2,3,4,5\n\n)\n\n\nselect * from project_user\n),validation_errors as (\n\n    select\n        project_id, user_id, role, currently_working_on\n    from __dbt__cte__int_asana__project_user\n    group by project_id, user_id, role, currently_working_on\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.int_asana__task_assignee", "sql": " __dbt__cte__int_asana__task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n)"}, {"id": "model.asana.int_asana__project_user", "sql": " __dbt__cte__int_asana__project_user as (\nwith project_tasks as (\n    \n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project_task`\n),\n\nassigned_tasks as (\n    \n    select * \n    from __dbt__cte__int_asana__task_assignee\n    where has_assignee\n    \n),\n\nproject as (\n    \n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project`\n\n    where not is_archived\n\n),\n\nproject_assignee as (\n\n    select\n        project_tasks.project_id,\n        project_tasks.task_id,\n        assigned_tasks.assignee_user_id,\n        assigned_tasks.assignee_name,\n        not assigned_tasks.is_completed as currently_working_on\n\n    from project_tasks \n    join assigned_tasks \n        on assigned_tasks.task_id = project_tasks.task_id\n\n),\n\nproject_owner as (\n\n    select \n        project_id,\n        project_name,\n        owner_user_id\n\n    from project\n    \n    where owner_user_id is not null\n),\n\nproject_user as (\n    \n    select\n        project_id,\n        project_name,\n        owner_user_id as user_id,\n        'owner' as role,\n        null as currently_working_on\n    \n    from project_owner\n\n    union all\n\n    select\n        project.project_id,\n        project.project_name,\n        project_assignee.assignee_user_id as user_id,\n        'task assignee' as role,\n        project_assignee.currently_working_on\n    \n    from project \n    \n    join project_assignee \n        on project.project_id = project_assignee.project_id\n    group by 1,2,3,4,5\n\n)\n\n\nselect * from project_user\n)"}], "relation_name": null, "column_name": null, "file_key_name": "models.int_asana__project_user"}, "test.asana.unique_int_asana__subtask_parent_subtask_id.641dfb3c8f": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "subtask_id", "model": "{{ get_where_subquery(ref('int_asana__subtask_parent')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.asana.int_asana__subtask_parent"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana", "intermediate", "unique_int_asana__subtask_parent_subtask_id"], "unique_id": "test.asana.unique_int_asana__subtask_parent_subtask_id.641dfb3c8f", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "unique_int_asana__subtask_parent_subtask_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "unique_int_asana__subtask_parent_subtask_id", "alias": "unique_int_asana__subtask_parent_subtask_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_asana__subtask_parent"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/unique_int_asana__subtask_parent_subtask_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.5021188, "compiled_code": "\n    \n    \n\nwith  __dbt__cte__int_asana__task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n),  __dbt__cte__int_asana__subtask_parent as (\nwith task_assignee as (\n\n    select * \n    from  __dbt__cte__int_asana__task_assignee\n\n),\n\n\nsubtask_parent as (\n\n    select\n        subtask.task_id as subtask_id,\n        parent.task_id as parent_task_id,\n        parent.task_name as parent_task_name,\n        parent.due_date as parent_due_date,\n        parent.created_at as parent_created_at,\n        parent.assignee_user_id as parent_assignee_user_id,\n        parent.assignee_name as parent_assignee_name\n\n    from task_assignee as parent \n    join task_assignee as subtask\n        on parent.task_id = subtask.parent_task_id\n\n)\n\nselect * from subtask_parent\n),dbt_test__target as (\n\n  select subtask_id as unique_field\n  from __dbt__cte__int_asana__subtask_parent\n  where subtask_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.int_asana__task_assignee", "sql": " __dbt__cte__int_asana__task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n)"}, {"id": "model.asana.int_asana__subtask_parent", "sql": " __dbt__cte__int_asana__subtask_parent as (\nwith task_assignee as (\n\n    select * \n    from  __dbt__cte__int_asana__task_assignee\n\n),\n\n\nsubtask_parent as (\n\n    select\n        subtask.task_id as subtask_id,\n        parent.task_id as parent_task_id,\n        parent.task_name as parent_task_name,\n        parent.due_date as parent_due_date,\n        parent.created_at as parent_created_at,\n        parent.assignee_user_id as parent_assignee_user_id,\n        parent.assignee_name as parent_assignee_name\n\n    from task_assignee as parent \n    join task_assignee as subtask\n        on parent.task_id = subtask.parent_task_id\n\n)\n\nselect * from subtask_parent\n)"}], "relation_name": null, "column_name": "subtask_id", "file_key_name": "models.int_asana__subtask_parent"}, "test.asana.not_null_int_asana__subtask_parent_subtask_id.024565c768": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "subtask_id", "model": "{{ get_where_subquery(ref('int_asana__subtask_parent')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.asana.int_asana__subtask_parent"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana", "intermediate", "not_null_int_asana__subtask_parent_subtask_id"], "unique_id": "test.asana.not_null_int_asana__subtask_parent_subtask_id.024565c768", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "not_null_int_asana__subtask_parent_subtask_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "not_null_int_asana__subtask_parent_subtask_id", "alias": "not_null_int_asana__subtask_parent_subtask_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_asana__subtask_parent"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/not_null_int_asana__subtask_parent_subtask_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.503335, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_asana__task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n),  __dbt__cte__int_asana__subtask_parent as (\nwith task_assignee as (\n\n    select * \n    from  __dbt__cte__int_asana__task_assignee\n\n),\n\n\nsubtask_parent as (\n\n    select\n        subtask.task_id as subtask_id,\n        parent.task_id as parent_task_id,\n        parent.task_name as parent_task_name,\n        parent.due_date as parent_due_date,\n        parent.created_at as parent_created_at,\n        parent.assignee_user_id as parent_assignee_user_id,\n        parent.assignee_name as parent_assignee_name\n\n    from task_assignee as parent \n    join task_assignee as subtask\n        on parent.task_id = subtask.parent_task_id\n\n)\n\nselect * from subtask_parent\n)select subtask_id\nfrom __dbt__cte__int_asana__subtask_parent\nwhere subtask_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.int_asana__task_assignee", "sql": " __dbt__cte__int_asana__task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n)"}, {"id": "model.asana.int_asana__subtask_parent", "sql": " __dbt__cte__int_asana__subtask_parent as (\nwith task_assignee as (\n\n    select * \n    from  __dbt__cte__int_asana__task_assignee\n\n),\n\n\nsubtask_parent as (\n\n    select\n        subtask.task_id as subtask_id,\n        parent.task_id as parent_task_id,\n        parent.task_name as parent_task_name,\n        parent.due_date as parent_due_date,\n        parent.created_at as parent_created_at,\n        parent.assignee_user_id as parent_assignee_user_id,\n        parent.assignee_name as parent_assignee_name\n\n    from task_assignee as parent \n    join task_assignee as subtask\n        on parent.task_id = subtask.parent_task_id\n\n)\n\nselect * from subtask_parent\n)"}], "relation_name": null, "column_name": "subtask_id", "file_key_name": "models.int_asana__subtask_parent"}, "test.asana.unique_int_asana__task_assignee_task_id.b4e2ea04e1": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('int_asana__task_assignee')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.asana.int_asana__task_assignee"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana", "intermediate", "unique_int_asana__task_assignee_task_id"], "unique_id": "test.asana.unique_int_asana__task_assignee_task_id.b4e2ea04e1", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "unique_int_asana__task_assignee_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "unique_int_asana__task_assignee_task_id", "alias": "unique_int_asana__task_assignee_task_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_asana__task_assignee"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/unique_int_asana__task_assignee_task_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.504459, "compiled_code": "\n    \n    \n\nwith  __dbt__cte__int_asana__task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n),dbt_test__target as (\n\n  select task_id as unique_field\n  from __dbt__cte__int_asana__task_assignee\n  where task_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.int_asana__task_assignee", "sql": " __dbt__cte__int_asana__task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n)"}], "relation_name": null, "column_name": "task_id", "file_key_name": "models.int_asana__task_assignee"}, "test.asana.not_null_int_asana__task_assignee_task_id.a9c81bd443": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('int_asana__task_assignee')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.asana.int_asana__task_assignee"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana", "intermediate", "not_null_int_asana__task_assignee_task_id"], "unique_id": "test.asana.not_null_int_asana__task_assignee_task_id.a9c81bd443", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "not_null_int_asana__task_assignee_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "not_null_int_asana__task_assignee_task_id", "alias": "not_null_int_asana__task_assignee_task_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_asana__task_assignee"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/not_null_int_asana__task_assignee_task_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.505444, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_asana__task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n)select task_id\nfrom __dbt__cte__int_asana__task_assignee\nwhere task_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.int_asana__task_assignee", "sql": " __dbt__cte__int_asana__task_assignee as (\nwith task as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task`\n\n),\n\nasana_user as (\n\n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\ntask_assignee as (\n\n    select\n        task.*,\n        assignee_user_id is not null as has_assignee,\n        asana_user.user_name as assignee_name,\n        asana_user.email as assignee_email\n\n    from task \n    left join asana_user \n        on task.assignee_user_id = asana_user.user_id\n)\n\nselect * from task_assignee\n)"}], "relation_name": null, "column_name": "task_id", "file_key_name": "models.int_asana__task_assignee"}, "test.asana.unique_int_asana__task_comments_task_id.f012fa6a04": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('int_asana__task_comments')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.asana.int_asana__task_comments"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana", "intermediate", "unique_int_asana__task_comments_task_id"], "unique_id": "test.asana.unique_int_asana__task_comments_task_id.f012fa6a04", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "unique_int_asana__task_comments_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "unique_int_asana__task_comments_task_id", "alias": "unique_int_asana__task_comments_task_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_asana__task_comments"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/unique_int_asana__task_comments_task_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.5065432, "compiled_code": "\n    \n    \n\nwith  __dbt__cte__int_asana__task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n),  __dbt__cte__int_asana__task_comments as (\nwith comments as (\n    \n    select *\n    from __dbt__cte__int_asana__task_story\n    where comment_content is not null\n    order by target_task_id, created_at asc\n\n),\n\ntask_conversation as (\n\n    select\n        target_task_id as task_id,\n        -- creates a chronologically ordered conversation about the task\n        \n    string_agg(created_at || '  -  ' || created_by_name || ':  ' || comment_content, '\\n')\n\n as conversation,\n        count(*) as number_of_comments\n\n    from comments        \n    group by 1\n)\n\nselect * from task_conversation\n),dbt_test__target as (\n\n  select task_id as unique_field\n  from __dbt__cte__int_asana__task_comments\n  where task_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.int_asana__task_story", "sql": " __dbt__cte__int_asana__task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n)"}, {"id": "model.asana.int_asana__task_comments", "sql": " __dbt__cte__int_asana__task_comments as (\nwith comments as (\n    \n    select *\n    from __dbt__cte__int_asana__task_story\n    where comment_content is not null\n    order by target_task_id, created_at asc\n\n),\n\ntask_conversation as (\n\n    select\n        target_task_id as task_id,\n        -- creates a chronologically ordered conversation about the task\n        \n    string_agg(created_at || '  -  ' || created_by_name || ':  ' || comment_content, '\\n')\n\n as conversation,\n        count(*) as number_of_comments\n\n    from comments        \n    group by 1\n)\n\nselect * from task_conversation\n)"}], "relation_name": null, "column_name": "task_id", "file_key_name": "models.int_asana__task_comments"}, "test.asana.not_null_int_asana__task_comments_task_id.6986f1d77f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('int_asana__task_comments')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.asana.int_asana__task_comments"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana", "intermediate", "not_null_int_asana__task_comments_task_id"], "unique_id": "test.asana.not_null_int_asana__task_comments_task_id.6986f1d77f", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "not_null_int_asana__task_comments_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "not_null_int_asana__task_comments_task_id", "alias": "not_null_int_asana__task_comments_task_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_asana__task_comments"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/not_null_int_asana__task_comments_task_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.507693, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_asana__task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n),  __dbt__cte__int_asana__task_comments as (\nwith comments as (\n    \n    select *\n    from __dbt__cte__int_asana__task_story\n    where comment_content is not null\n    order by target_task_id, created_at asc\n\n),\n\ntask_conversation as (\n\n    select\n        target_task_id as task_id,\n        -- creates a chronologically ordered conversation about the task\n        \n    string_agg(created_at || '  -  ' || created_by_name || ':  ' || comment_content, '\\n')\n\n as conversation,\n        count(*) as number_of_comments\n\n    from comments        \n    group by 1\n)\n\nselect * from task_conversation\n)select task_id\nfrom __dbt__cte__int_asana__task_comments\nwhere task_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.int_asana__task_story", "sql": " __dbt__cte__int_asana__task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n)"}, {"id": "model.asana.int_asana__task_comments", "sql": " __dbt__cte__int_asana__task_comments as (\nwith comments as (\n    \n    select *\n    from __dbt__cte__int_asana__task_story\n    where comment_content is not null\n    order by target_task_id, created_at asc\n\n),\n\ntask_conversation as (\n\n    select\n        target_task_id as task_id,\n        -- creates a chronologically ordered conversation about the task\n        \n    string_agg(created_at || '  -  ' || created_by_name || ':  ' || comment_content, '\\n')\n\n as conversation,\n        count(*) as number_of_comments\n\n    from comments        \n    group by 1\n)\n\nselect * from task_conversation\n)"}], "relation_name": null, "column_name": "task_id", "file_key_name": "models.int_asana__task_comments"}, "test.asana.unique_int_asana__task_first_modifier_task_id.59583c6dc2": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('int_asana__task_first_modifier')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.asana.int_asana__task_first_modifier"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana", "intermediate", "unique_int_asana__task_first_modifier_task_id"], "unique_id": "test.asana.unique_int_asana__task_first_modifier_task_id.59583c6dc2", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "unique_int_asana__task_first_modifier_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "unique_int_asana__task_first_modifier_task_id", "alias": "unique_int_asana__task_first_modifier_task_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_asana__task_first_modifier"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/unique_int_asana__task_first_modifier_task_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.5086951, "compiled_code": "\n    \n    \n\nwith  __dbt__cte__int_asana__task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n),  __dbt__cte__int_asana__task_first_modifier as (\nwith story as (\n\n    select *\n    from __dbt__cte__int_asana__task_story\n    where created_by_user_id is not null -- sometimes user id can be null in story. limit to ones with associated users\n),\n\nordered_stories as (\n\n    select \n        target_task_id,\n        created_by_user_id,\n        created_by_name,\n        created_at,\n        row_number() over ( partition by target_task_id order by created_at asc ) as nth_story\n        \n    from story\n\n),\n\nfirst_modifier as (\n\n    select  \n        target_task_id as task_id,\n        created_by_user_id as first_modifier_user_id,\n        created_by_name as first_modifier_name\n\n    from ordered_stories \n    where nth_story = 1\n)\n\nselect *\nfrom first_modifier\n),dbt_test__target as (\n\n  select task_id as unique_field\n  from __dbt__cte__int_asana__task_first_modifier\n  where task_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.int_asana__task_story", "sql": " __dbt__cte__int_asana__task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n)"}, {"id": "model.asana.int_asana__task_first_modifier", "sql": " __dbt__cte__int_asana__task_first_modifier as (\nwith story as (\n\n    select *\n    from __dbt__cte__int_asana__task_story\n    where created_by_user_id is not null -- sometimes user id can be null in story. limit to ones with associated users\n),\n\nordered_stories as (\n\n    select \n        target_task_id,\n        created_by_user_id,\n        created_by_name,\n        created_at,\n        row_number() over ( partition by target_task_id order by created_at asc ) as nth_story\n        \n    from story\n\n),\n\nfirst_modifier as (\n\n    select  \n        target_task_id as task_id,\n        created_by_user_id as first_modifier_user_id,\n        created_by_name as first_modifier_name\n\n    from ordered_stories \n    where nth_story = 1\n)\n\nselect *\nfrom first_modifier\n)"}], "relation_name": null, "column_name": "task_id", "file_key_name": "models.int_asana__task_first_modifier"}, "test.asana.not_null_int_asana__task_first_modifier_task_id.495738ff52": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('int_asana__task_first_modifier')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.asana.int_asana__task_first_modifier"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana", "intermediate", "not_null_int_asana__task_first_modifier_task_id"], "unique_id": "test.asana.not_null_int_asana__task_first_modifier_task_id.495738ff52", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "not_null_int_asana__task_first_modifier_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "not_null_int_asana__task_first_modifier_task_id", "alias": "not_null_int_asana__task_first_modifier_task_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_asana__task_first_modifier"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/not_null_int_asana__task_first_modifier_task_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.509703, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_asana__task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n),  __dbt__cte__int_asana__task_first_modifier as (\nwith story as (\n\n    select *\n    from __dbt__cte__int_asana__task_story\n    where created_by_user_id is not null -- sometimes user id can be null in story. limit to ones with associated users\n),\n\nordered_stories as (\n\n    select \n        target_task_id,\n        created_by_user_id,\n        created_by_name,\n        created_at,\n        row_number() over ( partition by target_task_id order by created_at asc ) as nth_story\n        \n    from story\n\n),\n\nfirst_modifier as (\n\n    select  \n        target_task_id as task_id,\n        created_by_user_id as first_modifier_user_id,\n        created_by_name as first_modifier_name\n\n    from ordered_stories \n    where nth_story = 1\n)\n\nselect *\nfrom first_modifier\n)select task_id\nfrom __dbt__cte__int_asana__task_first_modifier\nwhere task_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.int_asana__task_story", "sql": " __dbt__cte__int_asana__task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n)"}, {"id": "model.asana.int_asana__task_first_modifier", "sql": " __dbt__cte__int_asana__task_first_modifier as (\nwith story as (\n\n    select *\n    from __dbt__cte__int_asana__task_story\n    where created_by_user_id is not null -- sometimes user id can be null in story. limit to ones with associated users\n),\n\nordered_stories as (\n\n    select \n        target_task_id,\n        created_by_user_id,\n        created_by_name,\n        created_at,\n        row_number() over ( partition by target_task_id order by created_at asc ) as nth_story\n        \n    from story\n\n),\n\nfirst_modifier as (\n\n    select  \n        target_task_id as task_id,\n        created_by_user_id as first_modifier_user_id,\n        created_by_name as first_modifier_name\n\n    from ordered_stories \n    where nth_story = 1\n)\n\nselect *\nfrom first_modifier\n)"}], "relation_name": null, "column_name": "task_id", "file_key_name": "models.int_asana__task_first_modifier"}, "test.asana.unique_int_asana__task_followers_task_id.eeb3667df9": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('int_asana__task_followers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.asana.int_asana__task_followers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana", "intermediate", "unique_int_asana__task_followers_task_id"], "unique_id": "test.asana.unique_int_asana__task_followers_task_id.eeb3667df9", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "unique_int_asana__task_followers_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "unique_int_asana__task_followers_task_id", "alias": "unique_int_asana__task_followers_task_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_asana__task_followers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/unique_int_asana__task_followers_task_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.5106828, "compiled_code": "\n    \n    \n\nwith  __dbt__cte__int_asana__task_followers as (\nwith task_follower as (\n    \n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task_follower`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n\n),\n\nagg_followers as (\n\n    select\n        task_follower.task_id,\n        \n    string_agg(asana_user.user_name, ', ')\n\n as followers,\n        count(*) as number_of_followers\n    from task_follower \n    join asana_user \n        on asana_user.user_id = task_follower.user_id\n    group by 1\n    \n)\n\nselect * from agg_followers\n),dbt_test__target as (\n\n  select task_id as unique_field\n  from __dbt__cte__int_asana__task_followers\n  where task_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.int_asana__task_followers", "sql": " __dbt__cte__int_asana__task_followers as (\nwith task_follower as (\n    \n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task_follower`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n\n),\n\nagg_followers as (\n\n    select\n        task_follower.task_id,\n        \n    string_agg(asana_user.user_name, ', ')\n\n as followers,\n        count(*) as number_of_followers\n    from task_follower \n    join asana_user \n        on asana_user.user_id = task_follower.user_id\n    group by 1\n    \n)\n\nselect * from agg_followers\n)"}], "relation_name": null, "column_name": "task_id", "file_key_name": "models.int_asana__task_followers"}, "test.asana.not_null_int_asana__task_followers_task_id.6791bf2573": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('int_asana__task_followers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.asana.int_asana__task_followers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana", "intermediate", "not_null_int_asana__task_followers_task_id"], "unique_id": "test.asana.not_null_int_asana__task_followers_task_id.6791bf2573", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "not_null_int_asana__task_followers_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "not_null_int_asana__task_followers_task_id", "alias": "not_null_int_asana__task_followers_task_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_asana__task_followers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/not_null_int_asana__task_followers_task_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.511822, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_asana__task_followers as (\nwith task_follower as (\n    \n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task_follower`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n\n),\n\nagg_followers as (\n\n    select\n        task_follower.task_id,\n        \n    string_agg(asana_user.user_name, ', ')\n\n as followers,\n        count(*) as number_of_followers\n    from task_follower \n    join asana_user \n        on asana_user.user_id = task_follower.user_id\n    group by 1\n    \n)\n\nselect * from agg_followers\n)select task_id\nfrom __dbt__cte__int_asana__task_followers\nwhere task_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.int_asana__task_followers", "sql": " __dbt__cte__int_asana__task_followers as (\nwith task_follower as (\n    \n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task_follower`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n\n),\n\nagg_followers as (\n\n    select\n        task_follower.task_id,\n        \n    string_agg(asana_user.user_name, ', ')\n\n as followers,\n        count(*) as number_of_followers\n    from task_follower \n    join asana_user \n        on asana_user.user_id = task_follower.user_id\n    group by 1\n    \n)\n\nselect * from agg_followers\n)"}], "relation_name": null, "column_name": "task_id", "file_key_name": "models.int_asana__task_followers"}, "test.asana.unique_int_asana__task_open_length_task_id.f26c49b044": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('int_asana__task_open_length')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.asana.int_asana__task_open_length"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana", "intermediate", "unique_int_asana__task_open_length_task_id"], "unique_id": "test.asana.unique_int_asana__task_open_length_task_id.f26c49b044", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "unique_int_asana__task_open_length_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "unique_int_asana__task_open_length_task_id", "alias": "unique_int_asana__task_open_length_task_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_asana__task_open_length"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/unique_int_asana__task_open_length_task_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.512846, "compiled_code": "\n    \n    \n\nwith  __dbt__cte__int_asana__task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n),  __dbt__cte__int_asana__task_open_length as (\nwith task as (\n    \n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task`\n\n),\n\nstory as (\n\n    select * \n    from __dbt__cte__int_asana__task_story\n\n),\n\nassignments as (\n    \n    select \n    target_task_id as task_id,\n    min(created_at) as first_assigned_at,\n    max(created_at) as last_assigned_at -- current assignment\n\n    from story\n    where action_taken = 'assigned'\n\n    group by 1\n\n),\n\n\nopen_assigned_length as (\n\n    \n\n    select\n        task.task_id,\n        task.is_completed,\n        task.completed_at,\n        task.assignee_user_id is not null as is_currently_assigned,\n        assignments.task_id is not null as has_been_assigned,\n        assignments.last_assigned_at as last_assigned_at,\n        assignments.first_assigned_at as first_assigned_at,\n        \n\n    datetime_diff(\n        cast(current_timestamp as datetime),\n        cast(task.created_at as datetime),\n        day\n    )\n\n   as days_open,\n\n        -- if the task is currently assigned, this is the time it has been assigned to this current user.\n        \n\n    datetime_diff(\n        cast(current_timestamp as datetime),\n        cast(assignments.last_assigned_at as datetime),\n        day\n    )\n\n   as days_since_last_assignment,\n\n        \n\n    datetime_diff(\n        cast(current_timestamp as datetime),\n        cast(assignments.first_assigned_at as datetime),\n        day\n    )\n\n   as days_since_first_assignment\n        \n\n    from task\n    left join assignments \n        on task.task_id = assignments.task_id\n\n)\n\n\nselect * from open_assigned_length\n),dbt_test__target as (\n\n  select task_id as unique_field\n  from __dbt__cte__int_asana__task_open_length\n  where task_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.int_asana__task_story", "sql": " __dbt__cte__int_asana__task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n)"}, {"id": "model.asana.int_asana__task_open_length", "sql": " __dbt__cte__int_asana__task_open_length as (\nwith task as (\n    \n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task`\n\n),\n\nstory as (\n\n    select * \n    from __dbt__cte__int_asana__task_story\n\n),\n\nassignments as (\n    \n    select \n    target_task_id as task_id,\n    min(created_at) as first_assigned_at,\n    max(created_at) as last_assigned_at -- current assignment\n\n    from story\n    where action_taken = 'assigned'\n\n    group by 1\n\n),\n\n\nopen_assigned_length as (\n\n    \n\n    select\n        task.task_id,\n        task.is_completed,\n        task.completed_at,\n        task.assignee_user_id is not null as is_currently_assigned,\n        assignments.task_id is not null as has_been_assigned,\n        assignments.last_assigned_at as last_assigned_at,\n        assignments.first_assigned_at as first_assigned_at,\n        \n\n    datetime_diff(\n        cast(current_timestamp as datetime),\n        cast(task.created_at as datetime),\n        day\n    )\n\n   as days_open,\n\n        -- if the task is currently assigned, this is the time it has been assigned to this current user.\n        \n\n    datetime_diff(\n        cast(current_timestamp as datetime),\n        cast(assignments.last_assigned_at as datetime),\n        day\n    )\n\n   as days_since_last_assignment,\n\n        \n\n    datetime_diff(\n        cast(current_timestamp as datetime),\n        cast(assignments.first_assigned_at as datetime),\n        day\n    )\n\n   as days_since_first_assignment\n        \n\n    from task\n    left join assignments \n        on task.task_id = assignments.task_id\n\n)\n\n\nselect * from open_assigned_length\n)"}], "relation_name": null, "column_name": "task_id", "file_key_name": "models.int_asana__task_open_length"}, "test.asana.not_null_int_asana__task_open_length_task_id.23bb23b2e9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('int_asana__task_open_length')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.asana.int_asana__task_open_length"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana", "intermediate", "not_null_int_asana__task_open_length_task_id"], "unique_id": "test.asana.not_null_int_asana__task_open_length_task_id.23bb23b2e9", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "not_null_int_asana__task_open_length_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "not_null_int_asana__task_open_length_task_id", "alias": "not_null_int_asana__task_open_length_task_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_asana__task_open_length"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/not_null_int_asana__task_open_length_task_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.513864, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_asana__task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n),  __dbt__cte__int_asana__task_open_length as (\nwith task as (\n    \n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task`\n\n),\n\nstory as (\n\n    select * \n    from __dbt__cte__int_asana__task_story\n\n),\n\nassignments as (\n    \n    select \n    target_task_id as task_id,\n    min(created_at) as first_assigned_at,\n    max(created_at) as last_assigned_at -- current assignment\n\n    from story\n    where action_taken = 'assigned'\n\n    group by 1\n\n),\n\n\nopen_assigned_length as (\n\n    \n\n    select\n        task.task_id,\n        task.is_completed,\n        task.completed_at,\n        task.assignee_user_id is not null as is_currently_assigned,\n        assignments.task_id is not null as has_been_assigned,\n        assignments.last_assigned_at as last_assigned_at,\n        assignments.first_assigned_at as first_assigned_at,\n        \n\n    datetime_diff(\n        cast(current_timestamp as datetime),\n        cast(task.created_at as datetime),\n        day\n    )\n\n   as days_open,\n\n        -- if the task is currently assigned, this is the time it has been assigned to this current user.\n        \n\n    datetime_diff(\n        cast(current_timestamp as datetime),\n        cast(assignments.last_assigned_at as datetime),\n        day\n    )\n\n   as days_since_last_assignment,\n\n        \n\n    datetime_diff(\n        cast(current_timestamp as datetime),\n        cast(assignments.first_assigned_at as datetime),\n        day\n    )\n\n   as days_since_first_assignment\n        \n\n    from task\n    left join assignments \n        on task.task_id = assignments.task_id\n\n)\n\n\nselect * from open_assigned_length\n)select task_id\nfrom __dbt__cte__int_asana__task_open_length\nwhere task_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.int_asana__task_story", "sql": " __dbt__cte__int_asana__task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n)"}, {"id": "model.asana.int_asana__task_open_length", "sql": " __dbt__cte__int_asana__task_open_length as (\nwith task as (\n    \n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task`\n\n),\n\nstory as (\n\n    select * \n    from __dbt__cte__int_asana__task_story\n\n),\n\nassignments as (\n    \n    select \n    target_task_id as task_id,\n    min(created_at) as first_assigned_at,\n    max(created_at) as last_assigned_at -- current assignment\n\n    from story\n    where action_taken = 'assigned'\n\n    group by 1\n\n),\n\n\nopen_assigned_length as (\n\n    \n\n    select\n        task.task_id,\n        task.is_completed,\n        task.completed_at,\n        task.assignee_user_id is not null as is_currently_assigned,\n        assignments.task_id is not null as has_been_assigned,\n        assignments.last_assigned_at as last_assigned_at,\n        assignments.first_assigned_at as first_assigned_at,\n        \n\n    datetime_diff(\n        cast(current_timestamp as datetime),\n        cast(task.created_at as datetime),\n        day\n    )\n\n   as days_open,\n\n        -- if the task is currently assigned, this is the time it has been assigned to this current user.\n        \n\n    datetime_diff(\n        cast(current_timestamp as datetime),\n        cast(assignments.last_assigned_at as datetime),\n        day\n    )\n\n   as days_since_last_assignment,\n\n        \n\n    datetime_diff(\n        cast(current_timestamp as datetime),\n        cast(assignments.first_assigned_at as datetime),\n        day\n    )\n\n   as days_since_first_assignment\n        \n\n    from task\n    left join assignments \n        on task.task_id = assignments.task_id\n\n)\n\n\nselect * from open_assigned_length\n)"}], "relation_name": null, "column_name": "task_id", "file_key_name": "models.int_asana__task_open_length"}, "test.asana.unique_int_asana__task_projects_task_id.8a6b2f262d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('int_asana__task_projects')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.asana.int_asana__task_projects"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana", "intermediate", "unique_int_asana__task_projects_task_id"], "unique_id": "test.asana.unique_int_asana__task_projects_task_id.8a6b2f262d", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "unique_int_asana__task_projects_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "unique_int_asana__task_projects_task_id", "alias": "unique_int_asana__task_projects_task_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_asana__task_projects"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/unique_int_asana__task_projects_task_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.514862, "compiled_code": "\n    \n    \n\nwith  __dbt__cte__int_asana__task_projects as (\nwith task_project as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project_task`\n\n),\n\nproject as (\n    \n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project`\n),\n\ntask_section as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task_section`\n\n),\n\nsection as (\n    \n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__section`\n\n),\n\ntask_project_section as (\n\n    select \n        task_project.task_id,\n        project.project_name || (case when section.section_name = '(no section)' then ''\n            else ': ' || section.section_name end) as project_section, \n        project.project_id\n    from\n    task_project \n    join project \n        on project.project_id = task_project.project_id\n    join task_section\n        on task_section.task_id = task_project.task_id\n    join section \n        on section.section_id = task_section.section_id \n        and section.project_id = project.project_id\n),\n\nagg_project_sections as (\n    select \n        task_id,\n        \n    string_agg(task_project_section.project_section, ', ')\n\n as projects_sections,\n        count(project_id) as number_of_projects\n\n    from task_project_section \n\n    group by 1\n)\n\nselect * from agg_project_sections\n),dbt_test__target as (\n\n  select task_id as unique_field\n  from __dbt__cte__int_asana__task_projects\n  where task_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.int_asana__task_projects", "sql": " __dbt__cte__int_asana__task_projects as (\nwith task_project as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project_task`\n\n),\n\nproject as (\n    \n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project`\n),\n\ntask_section as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task_section`\n\n),\n\nsection as (\n    \n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__section`\n\n),\n\ntask_project_section as (\n\n    select \n        task_project.task_id,\n        project.project_name || (case when section.section_name = '(no section)' then ''\n            else ': ' || section.section_name end) as project_section, \n        project.project_id\n    from\n    task_project \n    join project \n        on project.project_id = task_project.project_id\n    join task_section\n        on task_section.task_id = task_project.task_id\n    join section \n        on section.section_id = task_section.section_id \n        and section.project_id = project.project_id\n),\n\nagg_project_sections as (\n    select \n        task_id,\n        \n    string_agg(task_project_section.project_section, ', ')\n\n as projects_sections,\n        count(project_id) as number_of_projects\n\n    from task_project_section \n\n    group by 1\n)\n\nselect * from agg_project_sections\n)"}], "relation_name": null, "column_name": "task_id", "file_key_name": "models.int_asana__task_projects"}, "test.asana.not_null_int_asana__task_projects_task_id.322519ee10": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('int_asana__task_projects')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.asana.int_asana__task_projects"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana", "intermediate", "not_null_int_asana__task_projects_task_id"], "unique_id": "test.asana.not_null_int_asana__task_projects_task_id.322519ee10", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "not_null_int_asana__task_projects_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "not_null_int_asana__task_projects_task_id", "alias": "not_null_int_asana__task_projects_task_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_asana__task_projects"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/not_null_int_asana__task_projects_task_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.5160341, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_asana__task_projects as (\nwith task_project as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project_task`\n\n),\n\nproject as (\n    \n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project`\n),\n\ntask_section as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task_section`\n\n),\n\nsection as (\n    \n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__section`\n\n),\n\ntask_project_section as (\n\n    select \n        task_project.task_id,\n        project.project_name || (case when section.section_name = '(no section)' then ''\n            else ': ' || section.section_name end) as project_section, \n        project.project_id\n    from\n    task_project \n    join project \n        on project.project_id = task_project.project_id\n    join task_section\n        on task_section.task_id = task_project.task_id\n    join section \n        on section.section_id = task_section.section_id \n        and section.project_id = project.project_id\n),\n\nagg_project_sections as (\n    select \n        task_id,\n        \n    string_agg(task_project_section.project_section, ', ')\n\n as projects_sections,\n        count(project_id) as number_of_projects\n\n    from task_project_section \n\n    group by 1\n)\n\nselect * from agg_project_sections\n)select task_id\nfrom __dbt__cte__int_asana__task_projects\nwhere task_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.int_asana__task_projects", "sql": " __dbt__cte__int_asana__task_projects as (\nwith task_project as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project_task`\n\n),\n\nproject as (\n    \n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__project`\n),\n\ntask_section as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task_section`\n\n),\n\nsection as (\n    \n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__section`\n\n),\n\ntask_project_section as (\n\n    select \n        task_project.task_id,\n        project.project_name || (case when section.section_name = '(no section)' then ''\n            else ': ' || section.section_name end) as project_section, \n        project.project_id\n    from\n    task_project \n    join project \n        on project.project_id = task_project.project_id\n    join task_section\n        on task_section.task_id = task_project.task_id\n    join section \n        on section.section_id = task_section.section_id \n        and section.project_id = project.project_id\n),\n\nagg_project_sections as (\n    select \n        task_id,\n        \n    string_agg(task_project_section.project_section, ', ')\n\n as projects_sections,\n        count(project_id) as number_of_projects\n\n    from task_project_section \n\n    group by 1\n)\n\nselect * from agg_project_sections\n)"}], "relation_name": null, "column_name": "task_id", "file_key_name": "models.int_asana__task_projects"}, "test.asana.unique_int_asana__task_story_story_id.92d7adbcf6": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "story_id", "model": "{{ get_where_subquery(ref('int_asana__task_story')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.asana.int_asana__task_story"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana", "intermediate", "unique_int_asana__task_story_story_id"], "unique_id": "test.asana.unique_int_asana__task_story_story_id.92d7adbcf6", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "unique_int_asana__task_story_story_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "unique_int_asana__task_story_story_id", "alias": "unique_int_asana__task_story_story_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_asana__task_story"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/unique_int_asana__task_story_story_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.517004, "compiled_code": "\n    \n    \n\nwith  __dbt__cte__int_asana__task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n),dbt_test__target as (\n\n  select story_id as unique_field\n  from __dbt__cte__int_asana__task_story\n  where story_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.int_asana__task_story", "sql": " __dbt__cte__int_asana__task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n)"}], "relation_name": null, "column_name": "story_id", "file_key_name": "models.int_asana__task_story"}, "test.asana.not_null_int_asana__task_story_story_id.1ffdb99927": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "story_id", "model": "{{ get_where_subquery(ref('int_asana__task_story')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.asana.int_asana__task_story"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana", "intermediate", "not_null_int_asana__task_story_story_id"], "unique_id": "test.asana.not_null_int_asana__task_story_story_id.1ffdb99927", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "not_null_int_asana__task_story_story_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "not_null_int_asana__task_story_story_id", "alias": "not_null_int_asana__task_story_story_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_asana__task_story"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/not_null_int_asana__task_story_story_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.518024, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_asana__task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n)select story_id\nfrom __dbt__cte__int_asana__task_story\nwhere story_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.int_asana__task_story", "sql": " __dbt__cte__int_asana__task_story as (\nwith story as (\n    \n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__story`\n\n),\n\nasana_user as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__user`\n),\n\nstory_user as (\n    select \n        story.*,\n        asana_user.user_name as created_by_name\n    from story\n    join asana_user \n        on story.created_by_user_id = asana_user.user_id\n),\n\nsplit_comments as (\n\n    select\n        story_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        target_task_id,\n            \n        case when event_type = 'comment' then story_content \n        else null end as comment_content,\n\n        case when event_type = 'system' then story_content \n        else 'comment' end as action_description\n    \n    from story_user\n\n),\n\n\n-- the next CTE uses this dictionary to parse the type of action out of the event descfription\n\n\nparse_actions as (\n    select\n        story_id,\n        target_task_id,\n        created_at,\n        created_by_user_id,\n        created_by_name,\n        comment_content,\n        case \n        when action_description like 'added the name%' then 'added name' \n        when action_description like 'changed the name%' then 'changed name' \n        when action_description like 'removed the name' then 'removed name' \n        when action_description like 'added the description%' then 'added description' \n        when action_description like 'changed the description%' then 'changed description' \n        when action_description like 'removed the description' then 'removed description' \n        when action_description like 'added to%' then 'added to project' \n        when action_description like 'removed from%' then 'removed from project' \n        when action_description like 'assigned%' then 'assigned' \n        when action_description like 'unassigned%' then 'unassigned' \n        when action_description like 'changed the due date%' then 'changed due date' \n        when action_description like 'changed the start date%due date%' then 'changed due date' \n        when action_description like 'changed the start date%' then 'changed start date' \n        when action_description like 'removed the due date%' then 'removed due date' \n        when action_description like 'removed the date range%' then 'removed due date' \n        when action_description like 'removed the start date' then 'removed start date' \n        when action_description like 'added subtask%' then 'added subtask' \n        when action_description like 'added%collaborator%' then 'added collaborator' \n        when action_description like 'moved%' then 'moved to section' \n        when action_description like 'duplicated task from%' then 'duplicated this from other task' \n        when action_description like 'marked%as a duplicate of this' then 'marked other task as duplicate of this' \n        when action_description like 'marked this a duplicate of%' then 'marked as duplicate' \n        when action_description like 'marked this task complete' then 'completed' \n        when action_description like 'completed this task' then 'completed' \n        when action_description like 'marked incomplete' then 'marked incomplete' \n        when action_description like 'marked this task as a milestone' then 'marked as milestone' \n        when action_description like 'unmarked this task as a milestone' then 'unmarked as milestone' \n        when action_description like 'marked this milestone complete' then 'completed milestone' \n        when action_description like 'completed this milestone' then 'completed milestone' \n        when action_description like 'attached%' then 'attachment' \n        when action_description like 'liked your comment' then 'liked comment' \n        when action_description like 'liked this task' then 'liked task' \n        when action_description like 'liked your attachment' then 'liked attachment' \n        when action_description like 'liked that you completed this task' then 'liked completion' \n        when action_description like 'completed the last task you were waiting on%' then 'completed dependency' \n        when action_description like 'added feedback to%' then 'added feedback' \n        when action_description like 'changed%to%' then 'changed tag' \n        when action_description like 'cleared%' then 'cleared tag' \n        when action_description like 'comment' then 'comment' \n        when action_description like 'have a task due on%' then ''\n        else action_description end as action_taken,\n        action_description\n    \n    from split_comments\n\n),\n\n\nfinal as (\n    \n    select * \n    from parse_actions\n\n    -- remove actions you don't care about (set to null in the actions dictionary above)\n    where action_taken is not null \n\n)\n\n\nselect * from final\n)"}], "relation_name": null, "column_name": "story_id", "file_key_name": "models.int_asana__task_story"}, "test.asana.unique_int_asana__task_tags_task_id.f28aff2685": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('int_asana__task_tags')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.asana.int_asana__task_tags"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana", "intermediate", "unique_int_asana__task_tags_task_id"], "unique_id": "test.asana.unique_int_asana__task_tags_task_id.f28aff2685", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "unique_int_asana__task_tags_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "unique_int_asana__task_tags_task_id", "alias": "unique_int_asana__task_tags_task_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_asana__task_tags"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/unique_int_asana__task_tags_task_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.518971, "compiled_code": "\n    \n    \n\nwith  __dbt__cte__int_asana__task_tags as (\nwith task_tag as (\n    \n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task_tag`\n\n),\n\nasana_tag as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__tag`\n\n),\n\nagg_tags as (\n\n    select\n        task_tag.task_id,\n        \n    string_agg(asana_tag.tag_name, ', ')\n\n as tags,\n        count(*) as number_of_tags\n    from task_tag \n    join asana_tag \n        on asana_tag.tag_id = task_tag.tag_id\n    group by 1\n    \n)\n\nselect * from agg_tags\n),dbt_test__target as (\n\n  select task_id as unique_field\n  from __dbt__cte__int_asana__task_tags\n  where task_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.int_asana__task_tags", "sql": " __dbt__cte__int_asana__task_tags as (\nwith task_tag as (\n    \n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task_tag`\n\n),\n\nasana_tag as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__tag`\n\n),\n\nagg_tags as (\n\n    select\n        task_tag.task_id,\n        \n    string_agg(asana_tag.tag_name, ', ')\n\n as tags,\n        count(*) as number_of_tags\n    from task_tag \n    join asana_tag \n        on asana_tag.tag_id = task_tag.tag_id\n    group by 1\n    \n)\n\nselect * from agg_tags\n)"}], "relation_name": null, "column_name": "task_id", "file_key_name": "models.int_asana__task_tags"}, "test.asana.not_null_int_asana__task_tags_task_id.34eec2b834": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "task_id", "model": "{{ get_where_subquery(ref('int_asana__task_tags')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.asana.int_asana__task_tags"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana", "intermediate", "not_null_int_asana__task_tags_task_id"], "unique_id": "test.asana.not_null_int_asana__task_tags_task_id.34eec2b834", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "not_null_int_asana__task_tags_task_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "not_null_int_asana__task_tags_task_id", "alias": "not_null_int_asana__task_tags_task_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_asana__task_tags"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/not_null_int_asana__task_tags_task_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.5200992, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_asana__task_tags as (\nwith task_tag as (\n    \n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task_tag`\n\n),\n\nasana_tag as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__tag`\n\n),\n\nagg_tags as (\n\n    select\n        task_tag.task_id,\n        \n    string_agg(asana_tag.tag_name, ', ')\n\n as tags,\n        count(*) as number_of_tags\n    from task_tag \n    join asana_tag \n        on asana_tag.tag_id = task_tag.tag_id\n    group by 1\n    \n)\n\nselect * from agg_tags\n)select task_id\nfrom __dbt__cte__int_asana__task_tags\nwhere task_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.int_asana__task_tags", "sql": " __dbt__cte__int_asana__task_tags as (\nwith task_tag as (\n    \n    select *\n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__task_tag`\n\n),\n\nasana_tag as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_stg_asana`.`stg_asana__tag`\n\n),\n\nagg_tags as (\n\n    select\n        task_tag.task_id,\n        \n    string_agg(asana_tag.tag_name, ', ')\n\n as tags,\n        count(*) as number_of_tags\n    from task_tag \n    join asana_tag \n        on asana_tag.tag_id = task_tag.tag_id\n    group by 1\n    \n)\n\nselect * from agg_tags\n)"}], "relation_name": null, "column_name": "task_id", "file_key_name": "models.int_asana__task_tags"}, "test.asana.unique_int_asana__user_task_metrics_user_id.06a6a270b8": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('int_asana__user_task_metrics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.asana.int_asana__user_task_metrics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana", "intermediate", "unique_int_asana__user_task_metrics_user_id"], "unique_id": "test.asana.unique_int_asana__user_task_metrics_user_id.06a6a270b8", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "unique_int_asana__user_task_metrics_user_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "unique_int_asana__user_task_metrics_user_id", "alias": "unique_int_asana__user_task_metrics_user_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_asana__user_task_metrics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/unique_int_asana__user_task_metrics_user_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.521039, "compiled_code": "\n    \n    \n\nwith  __dbt__cte__int_asana__user_task_metrics as (\nwith tasks as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_asana`.`asana__task`\n    where assignee_user_id is not null\n\n), \n\nagg_user_tasks as (\n\n    select \n    assignee_user_id as user_id,\n    sum(case when not is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when is_completed then days_since_last_assignment else 0 end) as days_assigned_this_user -- will divde later for avg\n\n    from  tasks\n\n    group by 1\n\n),\n\nfinal as (\n    select\n        agg_user_tasks.user_id,\n        agg_user_tasks.number_of_open_tasks,\n        agg_user_tasks.number_of_tasks_completed,\n        nullif(agg_user_tasks.days_assigned_this_user, 0) * 1.0 / nullif(agg_user_tasks.number_of_tasks_completed, 0) as avg_close_time_days\n\n    from \n    agg_user_tasks \n)\n\nselect * from final\n),dbt_test__target as (\n\n  select user_id as unique_field\n  from __dbt__cte__int_asana__user_task_metrics\n  where user_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.int_asana__user_task_metrics", "sql": " __dbt__cte__int_asana__user_task_metrics as (\nwith tasks as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_asana`.`asana__task`\n    where assignee_user_id is not null\n\n), \n\nagg_user_tasks as (\n\n    select \n    assignee_user_id as user_id,\n    sum(case when not is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when is_completed then days_since_last_assignment else 0 end) as days_assigned_this_user -- will divde later for avg\n\n    from  tasks\n\n    group by 1\n\n),\n\nfinal as (\n    select\n        agg_user_tasks.user_id,\n        agg_user_tasks.number_of_open_tasks,\n        agg_user_tasks.number_of_tasks_completed,\n        nullif(agg_user_tasks.days_assigned_this_user, 0) * 1.0 / nullif(agg_user_tasks.number_of_tasks_completed, 0) as avg_close_time_days\n\n    from \n    agg_user_tasks \n)\n\nselect * from final\n)"}], "relation_name": null, "column_name": "user_id", "file_key_name": "models.int_asana__user_task_metrics"}, "test.asana.not_null_int_asana__user_task_metrics_user_id.54eae7d721": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('int_asana__user_task_metrics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.asana.int_asana__user_task_metrics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dbt-package-testing", "schema": "asana_integration_tests_dbt_test__audit", "fqn": ["asana", "intermediate", "not_null_int_asana__user_task_metrics_user_id"], "unique_id": "test.asana.not_null_int_asana__user_task_metrics_user_id.54eae7d721", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "asana", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana", "path": "not_null_int_asana__user_task_metrics_user_id.sql", "original_file_path": "models/intermediate/intermediate_asana.yml", "name": "not_null_int_asana__user_task_metrics_user_id", "alias": "not_null_int_asana__user_task_metrics_user_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_asana__user_task_metrics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/asana/models/intermediate/intermediate_asana.yml/not_null_int_asana__user_task_metrics_user_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666801517.522079, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_asana__user_task_metrics as (\nwith tasks as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_asana`.`asana__task`\n    where assignee_user_id is not null\n\n), \n\nagg_user_tasks as (\n\n    select \n    assignee_user_id as user_id,\n    sum(case when not is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when is_completed then days_since_last_assignment else 0 end) as days_assigned_this_user -- will divde later for avg\n\n    from  tasks\n\n    group by 1\n\n),\n\nfinal as (\n    select\n        agg_user_tasks.user_id,\n        agg_user_tasks.number_of_open_tasks,\n        agg_user_tasks.number_of_tasks_completed,\n        nullif(agg_user_tasks.days_assigned_this_user, 0) * 1.0 / nullif(agg_user_tasks.number_of_tasks_completed, 0) as avg_close_time_days\n\n    from \n    agg_user_tasks \n)\n\nselect * from final\n)select user_id\nfrom __dbt__cte__int_asana__user_task_metrics\nwhere user_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.asana.int_asana__user_task_metrics", "sql": " __dbt__cte__int_asana__user_task_metrics as (\nwith tasks as (\n\n    select * \n    from `dbt-package-testing`.`asana_integration_tests_asana`.`asana__task`\n    where assignee_user_id is not null\n\n), \n\nagg_user_tasks as (\n\n    select \n    assignee_user_id as user_id,\n    sum(case when not is_completed then 1 else 0 end) as number_of_open_tasks,\n    sum(case when is_completed then 1 else 0 end) as number_of_tasks_completed,\n    sum(case when is_completed then days_since_last_assignment else 0 end) as days_assigned_this_user -- will divde later for avg\n\n    from  tasks\n\n    group by 1\n\n),\n\nfinal as (\n    select\n        agg_user_tasks.user_id,\n        agg_user_tasks.number_of_open_tasks,\n        agg_user_tasks.number_of_tasks_completed,\n        nullif(agg_user_tasks.days_assigned_this_user, 0) * 1.0 / nullif(agg_user_tasks.number_of_tasks_completed, 0) as avg_close_time_days\n\n    from \n    agg_user_tasks \n)\n\nselect * from final\n)"}], "relation_name": null, "column_name": "user_id", "file_key_name": "models.int_asana__user_task_metrics"}}, "sources": {"source.asana_source.asana.user": {"fqn": ["asana_source", "asana", "user"], "database": "dbt-package-testing", "schema": "asana_integrations_tests", "unique_id": "source.asana_source.asana.user", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "models/src_asana.yml", "original_file_path": "models/src_asana.yml", "name": "user", "source_name": "asana", "source_description": "", "loader": "fivetran", "identifier": "user_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Table of all accounts in the organization", "columns": {"id": {"name": "id", "description": "System generated unique ID for a user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "Email associated with the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Given name for the user as it appears in the UI", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`asana_integrations_tests`.`user_data`", "created_at": 1666801517.522861}, "source.asana_source.asana.task": {"fqn": ["asana_source", "asana", "task"], "database": "dbt-package-testing", "schema": "asana_integrations_tests", "unique_id": "source.asana_source.asana.task", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "models/src_asana.yml", "original_file_path": "models/src_asana.yml", "name": "task", "source_name": "asana", "source_description": "", "loader": "fivetran", "identifier": "task_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing all created tasks", "columns": {"id": {"name": "id", "description": "System generated unique identifier for the task", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assignee_id": {"name": "assignee_id", "description": "Foreign key referencing the USER assigned to this task (note that a task may not have an assignee)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "completed": {"name": "completed", "description": "Boolean that's true if the task is *currently* marked completed. Note that a task can be unmarked complete", "meta": {}, "data_type": null, "quote": null, "tags": []}, "completed_at": {"name": "completed_at", "description": "Timestamp of when the task was completed, if still currently completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "completed_by_id": {"name": "completed_by_id", "description": "Foreign key that references the USER who completed the task, if currently completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the task was first made", "meta": {}, "data_type": null, "quote": null, "tags": []}, "due_on": {"name": "due_on", "description": "The date on which the task is due. Note that not tasks may not have a due date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "due_at": {"name": "due_at", "description": "The date and time at which the task is due, only if a specific time is given.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modified_at": {"name": "modified_at", "description": "The last time the task was updated. Does not include comments nor changes in associations (ie their projects)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The title of the task", "meta": {}, "data_type": null, "quote": null, "tags": []}, "notes": {"name": "notes", "description": "Free-form textual description of the task (as seen in the UI).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "liked": {"name": "liked", "description": "A boolean that's true if the task has been liked.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "num_likes": {"name": "num_likes", "description": "An integer indicating the number of likes on a task.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "The ID of the parent of the task, if it is a subtask. Self-refers to TASK", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_on": {"name": "start_on", "description": "The start date of the task, if given with the due date", "meta": {}, "data_type": null, "quote": null, "tags": []}, "workspace_id": {"name": "workspace_id", "description": "The id of an organization's workspace in asana. Not necessary unless you have access to multiple organization's asanas.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`asana_integrations_tests`.`task_data`", "created_at": 1666801517.5229812}, "source.asana_source.asana.project": {"fqn": ["asana_source", "asana", "project"], "database": "dbt-package-testing", "schema": "asana_integrations_tests", "unique_id": "source.asana_source.asana.project", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "models/src_asana.yml", "original_file_path": "models/src_asana.yml", "name": "project", "source_name": "asana", "source_description": "", "loader": "fivetran", "identifier": "project_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Table containing all projects", "columns": {"id": {"name": "id", "description": "System generated unique ID of the project.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "archived": {"name": "archived", "description": "Boolean representing whether the project has been archived (removed from asana UI).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "color": {"name": "color", "description": "Color of the project as seen in the UI.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the story was made/the action was logged.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_status": {"name": "current_status", "description": "The most recent progress status update for the project. This is sent to all project followers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "The date the project is due.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modified_at": {"name": "modified_at", "description": "The last time the project was updated. Does not include comments nor changes in associations (ie new tasks).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The given name of the project.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "notes": {"name": "notes", "description": "Free-form textual notes associated with the project.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_id": {"name": "owner_id", "description": "Foreign key referencing the USER who owns the project.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "public": {"name": "public", "description": "Boolean that is true if the project is public to the whole organization, false if not.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "team_id": {"name": "team_id", "description": "Foreign key referencing the TEAM that the project is shared with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "workspace_id": {"name": "workspace_id", "description": "The id of an organization's workspace in asana. Not necessary unless you have access to multiple asana workspaces.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`asana_integrations_tests`.`project_data`", "created_at": 1666801517.523067}, "source.asana_source.asana.story": {"fqn": ["asana_source", "asana", "story"], "database": "dbt-package-testing", "schema": "asana_integrations_tests", "unique_id": "source.asana_source.asana.story", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "models/src_asana.yml", "original_file_path": "models/src_asana.yml", "name": "story", "source_name": "asana", "source_description": "", "loader": "fivetran", "identifier": "story_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing all stories -- stories are actions taken on tasks", "columns": {"id": {"name": "id", "description": "System generated unique ID of the story/action taken", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the story was made/the action was logged", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "Foreign key referencing the USER who created the story/took the action on the task (sometimes null)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_id": {"name": "target_id", "description": "Foreign key referencing the TASK that the story is about.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "text": {"name": "text", "description": "Free-form text describing the action that was taken (if type = system), or the content of a comment (if type = comment)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "The origin type of the story - a comment or change to the backend/altering a task", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source": {"name": "source", "description": "Where the story occurred (web, mobile, email, or api)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`asana_integrations_tests`.`story_data`", "created_at": 1666801517.523139}, "source.asana_source.asana.team": {"fqn": ["asana_source", "asana", "team"], "database": "dbt-package-testing", "schema": "asana_integrations_tests", "unique_id": "source.asana_source.asana.team", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "models/src_asana.yml", "original_file_path": "models/src_asana.yml", "name": "team", "source_name": "asana", "source_description": "", "loader": "fivetran", "identifier": "team_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Table of the teams within the organization", "columns": {"id": {"name": "id", "description": "System generated unique ID for each team", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Provided name for each team. There can be duplicates", "meta": {}, "data_type": null, "quote": null, "tags": []}, "organization_id": {"name": "organization_id", "description": "Equivalent to the workspace_id, as organizations are a kind of workspace. Probably not relevant unless working with multiple orgs.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`asana_integrations_tests`.`team_data`", "created_at": 1666801517.523208}, "source.asana_source.asana.tag": {"fqn": ["asana_source", "asana", "tag"], "database": "dbt-package-testing", "schema": "asana_integrations_tests", "unique_id": "source.asana_source.asana.tag", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "models/src_asana.yml", "original_file_path": "models/src_asana.yml", "name": "tag", "source_name": "asana", "source_description": "", "loader": "fivetran", "identifier": "tag_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Table of the custom tags made in the organization", "columns": {"id": {"name": "id", "description": "System generated ID for each tag", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the tag as it appears in the UI. There can be duplicates.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the tag was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "color": {"name": "color", "description": "Chosen color of the tag as it appears in the UI", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`asana_integrations_tests`.`tag_data`", "created_at": 1666801517.523268}, "source.asana_source.asana.section": {"fqn": ["asana_source", "asana", "section"], "database": "dbt-package-testing", "schema": "asana_integrations_tests", "unique_id": "source.asana_source.asana.section", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "models/src_asana.yml", "original_file_path": "models/src_asana.yml", "name": "section", "source_name": "asana", "source_description": "", "loader": "fivetran", "identifier": "section_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Table of all sections within projects. If tasks in a project are not in an explicit user-made section, a default section called \"(no section)\" is created here", "columns": {"id": {"name": "id", "description": "System generated unique ID for each section", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the section was created by a user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The given name of the section as it appears in the UI. Is stored as \"(no section)\" when this is the default bucket for tasks with a section in a project", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_id": {"name": "project_id", "description": "Foreign key referencing the PROJECT that the section lives in", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`asana_integrations_tests`.`section_data`", "created_at": 1666801517.523326}, "source.asana_source.asana.project_task": {"fqn": ["asana_source", "asana", "project_task"], "database": "dbt-package-testing", "schema": "asana_integrations_tests", "unique_id": "source.asana_source.asana.project_task", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "models/src_asana.yml", "original_file_path": "models/src_asana.yml", "name": "project_task", "source_name": "asana", "source_description": "", "loader": "fivetran", "identifier": "project_task_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Table of tasks and the project(s) they each belong to. If a project doesn't have a task, it won't be in here (and vice versa)", "columns": {"project_id": {"name": "project_id", "description": "Foreign key referencing a PROJECT the task belongs to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_id": {"name": "task_id", "description": "Foreign key referencing the TASK in the project", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`asana_integrations_tests`.`project_task_data`", "created_at": 1666801517.523381}, "source.asana_source.asana.task_follower": {"fqn": ["asana_source", "asana", "task_follower"], "database": "dbt-package-testing", "schema": "asana_integrations_tests", "unique_id": "source.asana_source.asana.task_follower", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "models/src_asana.yml", "original_file_path": "models/src_asana.yml", "name": "task_follower", "source_name": "asana", "source_description": "", "loader": "fivetran", "identifier": "task_follower_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Table of tasks with the users that are following them. Tasks without users do not appear here.", "columns": {"task_id": {"name": "task_id", "description": "Foreign key referencing the TASK being followed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "Foreign key referencing the USER that is following the task", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`asana_integrations_tests`.`task_follower_data`", "created_at": 1666801517.523437}, "source.asana_source.asana.task_tag": {"fqn": ["asana_source", "asana", "task_tag"], "database": "dbt-package-testing", "schema": "asana_integrations_tests", "unique_id": "source.asana_source.asana.task_tag", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "models/src_asana.yml", "original_file_path": "models/src_asana.yml", "name": "task_tag", "source_name": "asana", "source_description": "", "loader": "fivetran", "identifier": "task_tag_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Table of tasks with the tags attached to them. Tasks without tags (and vice versa) do not appear here.", "columns": {"task_id": {"name": "task_id", "description": "Foreign key referencing the TASK that is tagged", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tag_id": {"name": "tag_id", "description": "Foreign key referencing the TAG that is applied to the task", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`asana_integrations_tests`.`task_tag_data`", "created_at": 1666801517.523493}, "source.asana_source.asana.task_section": {"fqn": ["asana_source", "asana", "task_section"], "database": "dbt-package-testing", "schema": "asana_integrations_tests", "unique_id": "source.asana_source.asana.task_section", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "models/src_asana.yml", "original_file_path": "models/src_asana.yml", "name": "task_section", "source_name": "asana", "source_description": "", "loader": "fivetran", "identifier": "task_section_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Table of tasks and the section that they live under. Section-less tasks within projects appear here, but project-less tasks do not", "columns": {"section_id": {"name": "section_id", "description": "Foreign key referencing the SECTION that the task lives under.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "task_id": {"name": "task_id", "description": "Foreign key referencing the TASK that lives in a section.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`asana_integrations_tests`.`task_section_data`", "created_at": 1666801517.523548}}, "macros": {"macro.dbt_bigquery.date_sharded_table": {"unique_id": "macro.dbt_bigquery.date_sharded_table", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.519611, "supported_languages": null}, "macro.dbt_bigquery.grant_access_to": {"unique_id": "macro.dbt_bigquery.grant_access_to", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.5198588, "supported_languages": null}, "macro.dbt_bigquery.get_partitions_metadata": {"unique_id": "macro.dbt_bigquery.get_partitions_metadata", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.520145, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog": {"unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.523434, "supported_languages": null}, "macro.dbt_bigquery.partition_by": {"unique_id": "macro.dbt_bigquery.partition_by", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.5273678, "supported_languages": null}, "macro.dbt_bigquery.cluster_by": {"unique_id": "macro.dbt_bigquery.cluster_by", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.527765, "supported_languages": null}, "macro.dbt_bigquery.bigquery_options": {"unique_id": "macro.dbt_bigquery.bigquery_options", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.5281081, "supported_languages": null}, "macro.dbt_bigquery.bigquery_table_options": {"unique_id": "macro.dbt_bigquery.bigquery_table_options", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.528364, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_table_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n    {{ partition_by(partition_config) }}\n    {{ cluster_by(raw_cluster_by) }}\n    {{ bigquery_table_options(config, model, temporary) }}\n    as (\n      {{ compiled_code }}\n    );\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n  {%- else -%}\n    {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options", "macro.dbt_bigquery.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.529332, "supported_languages": null}, "macro.dbt_bigquery.bigquery_view_options": {"unique_id": "macro.dbt_bigquery.bigquery_view_options", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.52957, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_view_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  as {{ sql }};\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.529877, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_schema": {"unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.530001, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_relation": {"unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.530195, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.5303419, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.5305321, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_schemas": {"unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.530727, "supported_languages": null}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.530931, "supported_languages": null}, "macro.dbt_bigquery.bigquery__persist_docs": {"unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.531316, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.531487, "supported_languages": null}, "macro.dbt_bigquery.bigquery__rename_relation": {"unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.531679, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.5321229, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.532566, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_type": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.533277, "supported_languages": null}, "macro.dbt_bigquery.bigquery__test_unique": {"unique_id": "macro.dbt_bigquery.bigquery__test_unique", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.53347, "supported_languages": null}, "macro.dbt_bigquery.bigquery__upload_file": {"unique_id": "macro.dbt_bigquery.bigquery__upload_file", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__upload_file", "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.533841, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.53444, "supported_languages": null}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.534622, "supported_languages": null}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.5352561, "supported_languages": null}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.5359108, "supported_languages": null}, "macro.dbt_bigquery.materialization_view_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.5365708, "supported_languages": ["sql"]}, "macro.dbt_bigquery.materialization_table_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery', supported_languages=['sql', 'python']-%}\n\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.539798, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.py_write_table": {"unique_id": "macro.dbt_bigquery.py_write_table", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\nfrom pyspark.sql import SparkSession\n\nspark = SparkSession.builder.appName('smallTest').getOrCreate()\n\nspark.conf.set(\"viewsEnabled\",\"true\")\nspark.conf.set(\"temporaryGcsBucket\",\"{{target.gcs_bucket}}\")\n\n{{ compiled_code }}\ndbt = dbtObj(spark.read.format(\"bigquery\").load)\ndf = model(dbt, spark)\n\n# COMMAND ----------\n# this is materialization code dbt generated, please do not modify\n\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\ndf.write \\\n  .mode(\"overwrite\") \\\n  .format(\"bigquery\") \\\n  .option(\"writeMethod\", \"direct\").option(\"writeDisposition\", 'WRITE_TRUNCATE') \\\n  .save(\"{{target_relation}}\")\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.5401652, "supported_languages": null}, "macro.dbt_bigquery.materialization_copy_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "name": "materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(*ref_table)) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.541632, "supported_languages": ["sql"]}, "macro.dbt_bigquery.declare_dbt_max_partition": {"unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, complied_code, language='sql') %}\n\n  {#-- TODO: revisit partitioning with python models --#}\n  {%- if '_dbt_max_partition' in complied_code and language == 'sql' -%}\n\n    declare _dbt_max_partition {{ partition_by.data_type }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.544097, "supported_languages": null}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\") or 'merge' -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.544544, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_overwrite": {"unique_id": "macro.dbt_bigquery.bq_insert_overwrite", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "bq_insert_overwrite", "macro_sql": "{% macro bq_insert_overwrite(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n) %}\n\n  {% if partitions is not none and partitions != [] %} {# static #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {{sql}}\n        )\n      {%- endset -%}\n\n      {#-- Because we're putting the model SQL _directly_ into the MERGE statement,\n         we need to prepend the MERGE statement with the user-configured sql_header,\n         which may be needed to resolve that model SQL (e.g. referencing a variable or UDF in the header)\n         in the \"dynamic\" case, we save the model SQL result as a temp table first, wherein the\n         sql_header is included by the create_table_as macro.\n      #}\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=true) }}\n\n  {% else %} {# dynamic #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n        {{ declare_dbt_max_partition(this, partition_by, sql) }}\n\n        -- 1. create a temp table\n        {{ create_table_as(True, tmp_relation, compiled_code) }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              array_agg(distinct {{ partition_by.render() }})\n          from {{ tmp_relation }}\n      );\n\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate]) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.545758, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n    {%- endset %}\n    {% if partition_by is none %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n    {%- set source_sql -%}\n      {%- if tmp_relation_exists -%}\n        (\n          select * from {{ tmp_relation }}\n        )\n      {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n          {{sql}}\n        )\n      {%- endif -%}\n    {%- endset -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.546591, "supported_languages": null}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery', supported_languages=['sql', 'python'] -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] %}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n      {%- call statement('main', language=language) -%}\n        {{ create_table_as(False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {%- call statement('main', language=language) -%}\n        {{ create_table_as(False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {%- call statement('main', language=language) -%}\n        {{ create_table_as(False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% else %}\n    {%- if language == 'python' and strategy == 'insert_overwrite' -%}\n      {#-- This lets us move forward assuming no python will be directly templated into a query --#}\n      {%- set python_unsupported_msg -%}\n        The 'insert_overwrite' strategy is not yet supported for python models.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(python_unsupported_msg) %}\n    {%- endif -%}\n\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' or language == 'python' %}\n      {#-- Check first, since otherwise we may not build a temp table --#}\n      {#-- Python always needs to create a temp table --#}\n      {%- call statement('create_tmp_relation', language=language) -%}\n        {{ declare_dbt_max_partition(this, partition_by, compiled_code, language) +\n           create_table_as(True, tmp_relation, compiled_code, language)\n        }}\n      {%- endcall -%}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, compiled_code, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n    ) %}\n\n    {%- call statement('main') -%}\n      {{ build_sql }}\n    {% endcall %}\n\n    {%- if language == 'python' and tmp_relation -%}\n      {{ adapter.drop_relation(tmp_relation) }}\n    {%- endif -%}\n\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.549991, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.550495, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_columns": {"unique_id": "macro.dbt_bigquery.bigquery__create_columns", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.5507782, "supported_languages": null}, "macro.dbt_bigquery.bigquery__post_snapshot": {"unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.550962, "supported_languages": null}, "macro.dbt_bigquery.bigquery__except": {"unique_id": "macro.dbt_bigquery.bigquery__except", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.551306, "supported_languages": null}, "macro.dbt_bigquery.bigquery__dateadd": {"unique_id": "macro.dbt_bigquery.bigquery__dateadd", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.5516548, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp": {"unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.5519629, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.55219, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp_backcompat": {"unique_id": "macro.dbt_bigquery.bigquery__current_timestamp_backcompat", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "bigquery__current_timestamp_backcompat", "macro_sql": "{% macro bigquery__current_timestamp_backcompat() -%}\n  current_timestamp\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.552282, "supported_languages": null}, "macro.dbt_bigquery.bigquery__intersect": {"unique_id": "macro.dbt_bigquery.bigquery__intersect", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.552491, "supported_languages": null}, "macro.dbt_bigquery.bigquery__escape_single_quotes": {"unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.552779, "supported_languages": null}, "macro.dbt_bigquery.bigquery__right": {"unique_id": "macro.dbt_bigquery.bigquery__right", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.553098, "supported_languages": null}, "macro.dbt_bigquery.bigquery__listagg": {"unique_id": "macro.dbt_bigquery.bigquery__listagg", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.5535932, "supported_languages": null}, "macro.dbt_bigquery.bigquery__datediff": {"unique_id": "macro.dbt_bigquery.bigquery__datediff", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.554188, "supported_languages": null}, "macro.dbt_bigquery.bigquery__safe_cast": {"unique_id": "macro.dbt_bigquery.bigquery__safe_cast", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.554427, "supported_languages": null}, "macro.dbt_bigquery.bigquery__hash": {"unique_id": "macro.dbt_bigquery.bigquery__hash", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.554653, "supported_languages": null}, "macro.dbt_bigquery.bigquery__position": {"unique_id": "macro.dbt_bigquery.bigquery__position", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.5548868, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_concat": {"unique_id": "macro.dbt_bigquery.bigquery__array_concat", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "name": "bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.555107, "supported_languages": null}, "macro.dbt_bigquery.bigquery__bool_or": {"unique_id": "macro.dbt_bigquery.bigquery__bool_or", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.55531, "supported_languages": null}, "macro.dbt_bigquery.bigquery__split_part": {"unique_id": "macro.dbt_bigquery.bigquery__split_part", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.55608, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date_trunc": {"unique_id": "macro.dbt_bigquery.bigquery__date_trunc", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.5563421, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_construct": {"unique_id": "macro.dbt_bigquery.bigquery__array_construct", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    ARRAY<{{data_type}}>[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.55673, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_append": {"unique_id": "macro.dbt_bigquery.bigquery__array_append", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "name": "bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.5570219, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_show_grant_sql": {"unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "bigquery__get_show_grant_sql", "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.557803, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_grant_sql": {"unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "bigquery__get_grant_sql", "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.558042, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_revoke_sql": {"unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql", "package_name": "dbt_bigquery", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "bigquery__get_revoke_sql", "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.5582771, "supported_languages": null}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.559405, "supported_languages": null}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.5595992, "supported_languages": null}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.5597398, "supported_languages": null}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.5598762, "supported_languages": null}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.560011, "supported_languages": null}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.56043, "supported_languages": null}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.560854, "supported_languages": null}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.5612302, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.56195, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.5622551, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.565918, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.566106, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.5663528, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.567067, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.567234, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.567421, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.568952, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.570494, "supported_languages": null}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.574612, "supported_languages": null}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.574892, "supported_languages": null}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.57506, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.575145, "supported_languages": null}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.575286, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.575397, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.575597, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.57644, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.576628, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.576869, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.5773098, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.583554, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.585602, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.586095, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.58639, "supported_languages": null}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.5867991, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.587166, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.5886688, "supported_languages": null}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.589207, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.5898519, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"unique_id": "macro.dbt.get_merge_update_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.59008, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"unique_id": "macro.dbt.default__get_merge_update_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.590771, "supported_languages": null}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.595297, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.597206, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.597518, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.5982988, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.598589, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.599367, "supported_languages": null}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.600333, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"unique_id": "macro.dbt.get_incremental_append_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.601262, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"unique_id": "macro.dbt.default__get_incremental_append_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.60154, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"unique_id": "macro.dbt.get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6017668, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6020741, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"unique_id": "macro.dbt.get_incremental_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6022599, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"unique_id": "macro.dbt.default__get_incremental_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.602533, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.60272, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"predicates\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6029818, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"unique_id": "macro.dbt.get_incremental_default_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6031659, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"unique_id": "macro.dbt.default__get_incremental_default_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.603311, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"unique_id": "macro.dbt.get_insert_into_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.603629, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6087081, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.614261, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6155431, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6167521, "supported_languages": null}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.617684, "supported_languages": null}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.620377, "supported_languages": ["sql"]}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.620943, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.621142, "supported_languages": null}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.62165, "supported_languages": null}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.622101, "supported_languages": null}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6247199, "supported_languages": ["sql"]}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.625099, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.625333, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.626963, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.627435, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.627624, "supported_languages": null}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.627819, "supported_languages": null}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6280918, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.631435, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.636194, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6370938, "supported_languages": null}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.637331, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.637873, "supported_languages": null}, "macro.dbt.get_csv_sql": {"unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.638077, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.638208, "supported_languages": null}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.638363, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6384761, "supported_languages": null}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.638628, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.63874, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.639209, "supported_languages": null}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.639402, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.640783, "supported_languages": null}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.641265, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.641515, "supported_languages": null}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.64213, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.642405, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.642687, "supported_languages": null}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.643147, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6434, "supported_languages": null}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.643868, "supported_languages": null}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.644246, "supported_languages": null}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6445498, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.645152, "supported_languages": null}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.646703, "supported_languages": null}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6473339, "supported_languages": null}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6476831, "supported_languages": null}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.649471, "supported_languages": null}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6507049, "supported_languages": null}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6514711, "supported_languages": null}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6517582, "supported_languages": null}, "macro.dbt.except": {"unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.65208, "supported_languages": null}, "macro.dbt.default__except": {"unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6521568, "supported_languages": null}, "macro.dbt.replace": {"unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.652551, "supported_languages": null}, "macro.dbt.default__replace": {"unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.652709, "supported_languages": null}, "macro.dbt.concat": {"unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.653016, "supported_languages": null}, "macro.dbt.default__concat": {"unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6531441, "supported_languages": null}, "macro.dbt.length": {"unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.653467, "supported_languages": null}, "macro.dbt.default__length": {"unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.653589, "supported_languages": null}, "macro.dbt.dateadd": {"unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.654024, "supported_languages": null}, "macro.dbt.default__dateadd": {"unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.654189, "supported_languages": null}, "macro.dbt.intersect": {"unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.654479, "supported_languages": null}, "macro.dbt.default__intersect": {"unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.654551, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.654866, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.654998, "supported_languages": null}, "macro.dbt.right": {"unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.655344, "supported_languages": null}, "macro.dbt.default__right": {"unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.655603, "supported_languages": null}, "macro.dbt.listagg": {"unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.656333, "supported_languages": null}, "macro.dbt.default__listagg": {"unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6567302, "supported_languages": null}, "macro.dbt.datediff": {"unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.657127, "supported_languages": null}, "macro.dbt.default__datediff": {"unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.657293, "supported_languages": null}, "macro.dbt.safe_cast": {"unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.657699, "supported_languages": null}, "macro.dbt.default__safe_cast": {"unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6578429, "supported_languages": null}, "macro.dbt.hash": {"unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.658171, "supported_languages": null}, "macro.dbt.default__hash": {"unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.658339, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.658637, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6587899, "supported_languages": null}, "macro.dbt.any_value": {"unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6590872, "supported_languages": null}, "macro.dbt.default__any_value": {"unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.659203, "supported_languages": null}, "macro.dbt.position": {"unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.659572, "supported_languages": null}, "macro.dbt.default__position": {"unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.659735, "supported_languages": null}, "macro.dbt.string_literal": {"unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.660046, "supported_languages": null}, "macro.dbt.default__string_literal": {"unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.660154, "supported_languages": null}, "macro.dbt.type_string": {"unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.661181, "supported_languages": null}, "macro.dbt.default__type_string": {"unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.661332, "supported_languages": null}, "macro.dbt.type_timestamp": {"unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6615858, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6617868, "supported_languages": null}, "macro.dbt.type_float": {"unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.661962, "supported_languages": null}, "macro.dbt.default__type_float": {"unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.662124, "supported_languages": null}, "macro.dbt.type_numeric": {"unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.662283, "supported_languages": null}, "macro.dbt.default__type_numeric": {"unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6624708, "supported_languages": null}, "macro.dbt.type_bigint": {"unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.662633, "supported_languages": null}, "macro.dbt.default__type_bigint": {"unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.662791, "supported_languages": null}, "macro.dbt.type_int": {"unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6629581, "supported_languages": null}, "macro.dbt.default__type_int": {"unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.663111, "supported_languages": null}, "macro.dbt.type_boolean": {"unique_id": "macro.dbt.type_boolean", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.663274, "supported_languages": null}, "macro.dbt.default__type_boolean": {"unique_id": "macro.dbt.default__type_boolean", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.663421, "supported_languages": null}, "macro.dbt.array_concat": {"unique_id": "macro.dbt.array_concat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.663855, "supported_languages": null}, "macro.dbt.default__array_concat": {"unique_id": "macro.dbt.default__array_concat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.66399, "supported_languages": null}, "macro.dbt.bool_or": {"unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.664331, "supported_languages": null}, "macro.dbt.default__bool_or": {"unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.664447, "supported_languages": null}, "macro.dbt.last_day": {"unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.664842, "supported_languages": null}, "macro.dbt.default_last_day": {"unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.665112, "supported_languages": null}, "macro.dbt.default__last_day": {"unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.665267, "supported_languages": null}, "macro.dbt.split_part": {"unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6659021, "supported_languages": null}, "macro.dbt.default__split_part": {"unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.666071, "supported_languages": null}, "macro.dbt._split_part_negative": {"unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.666371, "supported_languages": null}, "macro.dbt.date_trunc": {"unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.666709, "supported_languages": null}, "macro.dbt.default__date_trunc": {"unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6668339, "supported_languages": null}, "macro.dbt.array_construct": {"unique_id": "macro.dbt.array_construct", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.667259, "supported_languages": null}, "macro.dbt.default__array_construct": {"unique_id": "macro.dbt.default__array_construct", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.667522, "supported_languages": null}, "macro.dbt.array_append": {"unique_id": "macro.dbt.array_append", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6679099, "supported_languages": null}, "macro.dbt.default__array_append": {"unique_id": "macro.dbt.default__array_append", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.668055, "supported_languages": null}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.668488, "supported_languages": null}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.66867, "supported_languages": null}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.66883, "supported_languages": null}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.66901, "supported_languages": null}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.669535, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.669711, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.669848, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.669947, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"unique_id": "macro.dbt.current_timestamp_backcompat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6701078, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"unique_id": "macro.dbt.default__current_timestamp_backcompat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.67018, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.670354, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.670521, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.671032, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.671229, "supported_languages": null}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.671384, "supported_languages": null}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.671839, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6750379, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.675217, "supported_languages": null}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6754692, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.67581, "supported_languages": null}, "macro.dbt.make_backup_relation": {"unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.676071, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.676376, "supported_languages": null}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.676554, "supported_languages": null}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.67676, "supported_languages": null}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.676946, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.67712, "supported_languages": null}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.677335, "supported_languages": null}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.677717, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.677981, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6785421, "supported_languages": null}, "macro.dbt.load_cached_relation": {"unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6788428, "supported_languages": null}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.678986, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6791942, "supported_languages": null}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.679759, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.680253, "supported_languages": null}, "macro.dbt.copy_grants": {"unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.682178, "supported_languages": null}, "macro.dbt.default__copy_grants": {"unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6823308, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.682504, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.682624, "supported_languages": null}, "macro.dbt.should_revoke": {"unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.682961, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.683147, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.683248, "supported_languages": null}, "macro.dbt.get_grant_sql": {"unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.683466, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.683651, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.683876, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.684063, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.684289, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.684963, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.685216, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.685458, "supported_languages": null}, "macro.dbt.apply_grants": {"unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6858518, "supported_languages": null}, "macro.dbt.default__apply_grants": {"unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.687232, "supported_languages": null}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6881669, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6883461, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.688548, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.688722, "supported_languages": null}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.688983, "supported_languages": null}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6895401, "supported_languages": null}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.691072, "supported_languages": null}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6913369, "supported_languages": null}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.691531, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.691684, "supported_languages": null}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6918762, "supported_languages": null}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.692109, "supported_languages": null}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6923058, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6926038, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.692786, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.692941, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.694678, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6951098, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.695429, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.69562, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.695961, "supported_languages": null}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.696188, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6967628, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.697012, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.697804, "supported_languages": null}, "macro.dbt.build_ref_function": {"unique_id": "macro.dbt.build_ref_function", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.6993222, "supported_languages": null}, "macro.dbt.build_source_function": {"unique_id": "macro.dbt.build_source_function", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.699782, "supported_languages": null}, "macro.dbt.build_config_dict": {"unique_id": "macro.dbt.build_config_dict", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {%- for key in model.config.config_keys_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == 'language' -%}\n          {%- set value = 'python' -%}\n        {%- endif -%}\n        {%- set value = model.config[key] -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7002282, "supported_languages": null}, "macro.dbt.py_script_postfix": {"unique_id": "macro.dbt.py_script_postfix", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = '{{ this.database }}'\n    schema = '{{ this.schema }}'\n    identifier = '{{ this.identifier }}'\n    def __repr__(self):\n        return '{{ this }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.700633, "supported_languages": null}, "macro.dbt.py_script_comment": {"unique_id": "macro.dbt.py_script_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.700703, "supported_languages": null}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7012749, "supported_languages": null}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7015, "supported_languages": null}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.701777, "supported_languages": null}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.702061, "supported_languages": null}, "macro.dbt_utils.xdb_deprecation_warning_without_replacement": {"unique_id": "macro.dbt_utils.xdb_deprecation_warning_without_replacement", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql", "original_file_path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql", "name": "xdb_deprecation_warning_without_replacement", "macro_sql": "{% macro xdb_deprecation_warning_without_replacement(macro, package, model) %}\n    {%- set error_message = \"Warning: the `\" ~ macro ~\"` macro is deprecated and will be removed in a future version of the package, once equivalent functionality is implemented in dbt Core. The \" ~ package ~ \".\" ~ model ~ \" model triggered this warning.\" -%}\n    {%- do exceptions.warn(error_message) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7024431, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.70283, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    split_part(\n        split_part(\n            replace(\n                replace(\n                    replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.703325, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7038221, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        replace(\n            replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ position(\"'/'\", stripped_url) }}, 0),\n            {{ position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        split_part(\n            right(\n                stripped_url,\n                length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ safe_cast(\n        parsed_path,\n        type_string()\n    )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.704393, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7047539, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = split_part(split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.705048, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.706091, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.70708, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.707927, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.708958, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7096379, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7099679, "supported_languages": null}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, group_by_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.710585, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, group_by_columns) %}\n\n{% set threshold = dateadd(datepart, interval * -1, current_timestamp_backcompat()) %}\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      max({{field}}) as most_recent\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7112, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.711676, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.712116, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7127419, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7131991, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7137668, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7142, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.714699, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.71515, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7157938, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.716413, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.716993, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.717311, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.717841, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    {{ column_list }}\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.718217, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.718882, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7196841, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.720566, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ type_timestamp() }})= cast({{ dateadd(datepart, interval, previous_column_name) }} as {{ type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7214239, "supported_languages": null}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7221818, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.723028, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"unique_id": "macro.dbt_utils.test_not_empty_string", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "name": "test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7235699, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"unique_id": "macro.dbt_utils.default__test_not_empty_string", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "name": "default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.723855, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7269912, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.728522, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.728846, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.729007, "supported_languages": null}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.729503, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.729825, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.73002, "supported_languages": null}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.730331, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7305, "supported_languages": null}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7310028, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.731852, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.732558, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7331269, "supported_languages": null}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.733355, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.733692, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.734047, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.734373, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.735056, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.735952, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.736796, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.737217, "supported_languages": null}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.737411, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7379048, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.738595, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.73942, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.739866, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.740146, "supported_languages": null}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.74086, "supported_languages": null}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {%- endif -%}\n\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n    {%- if cols|length <= 0 -%}\n      {{- return('*') -}}\n    {%- else -%}\n        {%- for col in cols %}\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n            {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n        {%- endfor -%}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7417998, "supported_languages": null}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.743076, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.744682, "supported_languages": null}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.747623, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ string_literal(relation) }} as {{ type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7509482, "supported_languages": null}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7513049, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.751552, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.752314, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7525241, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.752717, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.752903, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.75306, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.75322, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.753645, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a variable scoped to the dbt_utils package called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.753878, "supported_languages": null}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.754295, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7548192, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.755213, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.75554, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.757153, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.757505, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.758296, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.758773, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7598872, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.761371, "supported_languages": null}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7624278, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7632298, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7637389, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.764443, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.765836, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.766279, "supported_languages": null}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt.safe_cast(expr, type_numeric() ) }} %\n                {{ dbt.safe_cast(bin_size, type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.766706, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.766887, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.767321, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7679129, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"unique_id": "macro.dbt_utils.generate_surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "name": "generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.768398, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"unique_id": "macro.dbt_utils.default__generate_surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "name": "default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{% if var('surrogate_key_treat_nulls_as_empty_strings', False) %}\n    {% set default_null_value = \"\" %}\n{% else %}\n    {% set default_null_value = '_dbt_utils_surrogate_key_null_'%}\n{% endif %}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ hash(concat(fields)) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7690198, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7694569, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.769591, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.769726, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.770762, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7710989, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.771677, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.772455, "supported_languages": null}, "macro.asana_source.get_story_columns": {"unique_id": "macro.asana_source.get_story_columns", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "macros/get_story_columns.sql", "original_file_path": "macros/get_story_columns.sql", "name": "get_story_columns", "macro_sql": "{% macro get_story_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"created_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"hearted\", \"datatype\": \"boolean\"},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"num_hearts\", \"datatype\": dbt.type_int()},\n    {\"name\": \"source\", \"datatype\": dbt.type_string()},\n    {\"name\": \"target_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"text\", \"datatype\": dbt.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.773642, "supported_languages": null}, "macro.asana_source.get_task_tag_columns": {"unique_id": "macro.asana_source.get_task_tag_columns", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "macros/get_task_tag_columns.sql", "original_file_path": "macros/get_task_tag_columns.sql", "name": "get_task_tag_columns", "macro_sql": "{% macro get_task_tag_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"tag_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"task_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.774184, "supported_languages": null}, "macro.asana_source.get_task_columns": {"unique_id": "macro.asana_source.get_task_columns", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "macros/get_task_columns.sql", "original_file_path": "macros/get_task_columns.sql", "name": "get_task_columns", "macro_sql": "{% macro get_task_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"assignee_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"completed\", \"datatype\": \"boolean\"},\n    {\"name\": \"completed_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"completed_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"due_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"due_on\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"modified_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"notes\", \"datatype\": dbt.type_string()},\n    {\"name\": \"liked\", \"datatype\": \"boolean\"},\n    {\"name\": \"num_likes\", \"datatype\": dbt.type_int()},\n    {\"name\": \"parent_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"start_on\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"workspace_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7760158, "supported_languages": null}, "macro.asana_source.get_task_section_columns": {"unique_id": "macro.asana_source.get_task_section_columns", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "macros/get_task_section_columns.sql", "original_file_path": "macros/get_task_section_columns.sql", "name": "get_task_section_columns", "macro_sql": "{% macro get_task_section_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"section_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"task_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7765398, "supported_languages": null}, "macro.asana_source.get_team_columns": {"unique_id": "macro.asana_source.get_team_columns", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "macros/get_team_columns.sql", "original_file_path": "macros/get_team_columns.sql", "name": "get_team_columns", "macro_sql": "{% macro get_team_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"organization_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.777256, "supported_languages": null}, "macro.asana_source.get_user_columns": {"unique_id": "macro.asana_source.get_user_columns", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "macros/get_user_columns.sql", "original_file_path": "macros/get_user_columns.sql", "name": "get_user_columns", "macro_sql": "{% macro get_user_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.777947, "supported_languages": null}, "macro.asana_source.get_project_columns": {"unique_id": "macro.asana_source.get_project_columns", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "macros/get_project_columns.sql", "original_file_path": "macros/get_project_columns.sql", "name": "get_project_columns", "macro_sql": "{% macro get_project_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"archived\", \"datatype\": \"boolean\"},\n    {\"name\": \"color\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"current_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"due_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"modified_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"notes\", \"datatype\": dbt.type_string()},\n    {\"name\": \"owner_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"public\", \"datatype\": \"boolean\"},\n    {\"name\": \"team_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"workspace_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.779552, "supported_languages": null}, "macro.asana_source.get_task_follower_columns": {"unique_id": "macro.asana_source.get_task_follower_columns", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "macros/get_task_follower_columns.sql", "original_file_path": "macros/get_task_follower_columns.sql", "name": "get_task_follower_columns", "macro_sql": "{% macro get_task_follower_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"task_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"user_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.780088, "supported_languages": null}, "macro.asana_source.get_section_columns": {"unique_id": "macro.asana_source.get_section_columns", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "macros/get_section_columns.sql", "original_file_path": "macros/get_section_columns.sql", "name": "get_section_columns", "macro_sql": "{% macro get_section_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"project_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.780787, "supported_languages": null}, "macro.asana_source.get_project_task_columns": {"unique_id": "macro.asana_source.get_project_task_columns", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "macros/get_project_task_columns.sql", "original_file_path": "macros/get_project_task_columns.sql", "name": "get_project_task_columns", "macro_sql": "{% macro get_project_task_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"project_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"task_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.781325, "supported_languages": null}, "macro.asana_source.get_tag_columns": {"unique_id": "macro.asana_source.get_tag_columns", "package_name": "asana_source", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/asana_source", "path": "macros/get_tag_columns.sql", "original_file_path": "macros/get_tag_columns.sql", "name": "get_tag_columns", "macro_sql": "{% macro get_tag_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"color\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"message\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"notes\", \"datatype\": dbt.type_string()},\n    {\"name\": \"workspace_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.782389, "supported_languages": null}, "macro.dbt_date.get_date_dimension": {"unique_id": "macro.dbt_date.get_date_dimension", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7905102, "supported_languages": null}, "macro.dbt_date.default__get_date_dimension": {"unique_id": "macro.dbt_date.default__get_date_dimension", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.792767, "supported_languages": null}, "macro.dbt_date.postgres__get_date_dimension": {"unique_id": "macro.dbt_date.postgres__get_date_dimension", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# dbt_utils.last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt_utils.dateadd('day', '-1', dbt_utils.dateadd('month', '3', dbt_utils.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.795043, "supported_languages": null}, "macro.dbt_date.get_base_dates": {"unique_id": "macro.dbt_date.get_base_dates", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.796056, "supported_languages": null}, "macro.dbt_date.default__get_base_dates": {"unique_id": "macro.dbt_date.default__get_base_dates", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7967849, "supported_languages": null}, "macro.dbt_date.bigquery__get_base_dates": {"unique_id": "macro.dbt_date.bigquery__get_base_dates", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.797452, "supported_languages": null}, "macro.dbt_date.get_fiscal_year_dates": {"unique_id": "macro.dbt_date.get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "name": "get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.79908, "supported_languages": null}, "macro.dbt_date.default__get_fiscal_year_dates": {"unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "name": "default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt_utils.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt_utils.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt_utils.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.7996569, "supported_languages": null}, "macro.dbt_date.get_fiscal_periods": {"unique_id": "macro.dbt_date.get_fiscal_periods", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_periods.sql", "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql", "name": "get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{# \nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt_utils.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt_utils.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case \n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt_utils.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year, \n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom \n    fscl_periods_quarters \norder by 1,2\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.800582, "supported_languages": null}, "macro.dbt_date.tomorrow": {"unique_id": "macro.dbt_date.tomorrow", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/tomorrow.sql", "original_file_path": "macros/calendar_date/tomorrow.sql", "name": "tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.800858, "supported_languages": null}, "macro.dbt_date.next_week": {"unique_id": "macro.dbt_date.next_week", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/next_week.sql", "original_file_path": "macros/calendar_date/next_week.sql", "name": "next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.801091, "supported_languages": null}, "macro.dbt_date.next_month_name": {"unique_id": "macro.dbt_date.next_month_name", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month_name.sql", "original_file_path": "macros/calendar_date/next_month_name.sql", "name": "next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.8014011, "supported_languages": null}, "macro.dbt_date.next_month": {"unique_id": "macro.dbt_date.next_month", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month.sql", "original_file_path": "macros/calendar_date/next_month.sql", "name": "next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.8016331, "supported_languages": null}, "macro.dbt_date.day_name": {"unique_id": "macro.dbt_date.day_name", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__day_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.802274, "supported_languages": null}, "macro.dbt_date.default__day_name": {"unique_id": "macro.dbt_date.default__day_name", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.802461, "supported_languages": null}, "macro.dbt_date.snowflake__day_name": {"unique_id": "macro.dbt_date.snowflake__day_name", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.802659, "supported_languages": null}, "macro.dbt_date.bigquery__day_name": {"unique_id": "macro.dbt_date.bigquery__day_name", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.802849, "supported_languages": null}, "macro.dbt_date.postgres__day_name": {"unique_id": "macro.dbt_date.postgres__day_name", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.803041, "supported_languages": null}, "macro.dbt_date.to_unixtimestamp": {"unique_id": "macro.dbt_date.to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.803403, "supported_languages": null}, "macro.dbt_date.default__to_unixtimestamp": {"unique_id": "macro.dbt_date.default__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.8035462, "supported_languages": null}, "macro.dbt_date.snowflake__to_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.8036811, "supported_languages": null}, "macro.dbt_date.bigquery__to_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.803782, "supported_languages": null}, "macro.dbt_date.n_days_away": {"unique_id": "macro.dbt_date.n_days_away", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/n_days_away.sql", "original_file_path": "macros/calendar_date/n_days_away.sql", "name": "n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.804138, "supported_languages": null}, "macro.dbt_date.week_start": {"unique_id": "macro.dbt_date.week_start", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.8046389, "supported_languages": null}, "macro.dbt_date.default__week_start": {"unique_id": "macro.dbt_date.default__week_start", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt_utils.date_trunc('week', date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.804784, "supported_languages": null}, "macro.dbt_date.snowflake__week_start": {"unique_id": "macro.dbt_date.snowflake__week_start", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt_utils.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.805069, "supported_languages": null}, "macro.dbt_date.postgres__week_start": {"unique_id": "macro.dbt_date.postgres__week_start", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt_utils.dateadd('day', -1, dbt_utils.date_trunc('week', dbt_utils.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.805333, "supported_languages": null}, "macro.dbt_date.iso_week_start": {"unique_id": "macro.dbt_date.iso_week_start", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.80585, "supported_languages": null}, "macro.dbt_date._iso_week_start": {"unique_id": "macro.dbt_date._iso_week_start", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "_iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt_utils.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.80601, "supported_languages": null}, "macro.dbt_date.default__iso_week_start": {"unique_id": "macro.dbt_date.default__iso_week_start", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.806149, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_start": {"unique_id": "macro.dbt_date.snowflake__iso_week_start", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.8062851, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_start": {"unique_id": "macro.dbt_date.postgres__iso_week_start", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.806419, "supported_languages": null}, "macro.dbt_date.n_days_ago": {"unique_id": "macro.dbt_date.n_days_ago", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/n_days_ago.sql", "original_file_path": "macros/calendar_date/n_days_ago.sql", "name": "n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt_utils.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.806869, "supported_languages": null}, "macro.dbt_date.last_week": {"unique_id": "macro.dbt_date.last_week", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/last_week.sql", "original_file_path": "macros/calendar_date/last_week.sql", "name": "last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.807109, "supported_languages": null}, "macro.dbt_date.now": {"unique_id": "macro.dbt_date.now", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "name": "now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt_utils.current_timestamp(), tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.807368, "supported_languages": null}, "macro.dbt_date.periods_since": {"unique_id": "macro.dbt_date.periods_since", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/periods_since.sql", "original_file_path": "macros/calendar_date/periods_since.sql", "name": "periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt_utils.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.807682, "supported_languages": null}, "macro.dbt_date.today": {"unique_id": "macro.dbt_date.today", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/today.sql", "original_file_path": "macros/calendar_date/today.sql", "name": "today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.807907, "supported_languages": null}, "macro.dbt_date.last_month": {"unique_id": "macro.dbt_date.last_month", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month.sql", "original_file_path": "macros/calendar_date/last_month.sql", "name": "last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.808137, "supported_languages": null}, "macro.dbt_date.day_of_year": {"unique_id": "macro.dbt_date.day_of_year", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.80849, "supported_languages": null}, "macro.dbt_date.default__day_of_year": {"unique_id": "macro.dbt_date.default__day_of_year", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.8086221, "supported_languages": null}, "macro.dbt_date.postgres__day_of_year": {"unique_id": "macro.dbt_date.postgres__day_of_year", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.808755, "supported_languages": null}, "macro.dbt_date.redshift__day_of_year": {"unique_id": "macro.dbt_date.redshift__day_of_year", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.808927, "supported_languages": null}, "macro.dbt_date.from_unixtimestamp": {"unique_id": "macro.dbt_date.from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.810281, "supported_languages": null}, "macro.dbt_date.default__from_unixtimestamp": {"unique_id": "macro.dbt_date.default__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.810534, "supported_languages": null}, "macro.dbt_date.postgres__from_unixtimestamp": {"unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.810784, "supported_languages": null}, "macro.dbt_date.snowflake__from_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.811239, "supported_languages": null}, "macro.dbt_date.bigquery__from_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.8116128, "supported_languages": null}, "macro.dbt_date.n_months_ago": {"unique_id": "macro.dbt_date.n_months_ago", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/n_months_ago.sql", "original_file_path": "macros/calendar_date/n_months_ago.sql", "name": "n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.8120341, "supported_languages": null}, "macro.dbt_date.date_part": {"unique_id": "macro.dbt_date.date_part", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.8123672, "supported_languages": null}, "macro.dbt_date.default__date_part": {"unique_id": "macro.dbt_date.default__date_part", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.812494, "supported_languages": null}, "macro.dbt_date.bigquery__date_part": {"unique_id": "macro.dbt_date.bigquery__date_part", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.812621, "supported_languages": null}, "macro.dbt_date.n_weeks_away": {"unique_id": "macro.dbt_date.n_weeks_away", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/n_weeks_away.sql", "original_file_path": "macros/calendar_date/n_weeks_away.sql", "name": "n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.813011, "supported_languages": null}, "macro.dbt_date.day_of_month": {"unique_id": "macro.dbt_date.day_of_month", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "name": "day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.813283, "supported_languages": null}, "macro.dbt_date.redshift__day_of_month": {"unique_id": "macro.dbt_date.redshift__day_of_month", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "name": "redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.813458, "supported_languages": null}, "macro.dbt_date.yesterday": {"unique_id": "macro.dbt_date.yesterday", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/yesterday.sql", "original_file_path": "macros/calendar_date/yesterday.sql", "name": "yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.813725, "supported_languages": null}, "macro.dbt_date.day_of_week": {"unique_id": "macro.dbt_date.day_of_week", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.815416, "supported_languages": null}, "macro.dbt_date.default__day_of_week": {"unique_id": "macro.dbt_date.default__day_of_week", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.8157089, "supported_languages": null}, "macro.dbt_date.snowflake__day_of_week": {"unique_id": "macro.dbt_date.snowflake__day_of_week", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.816105, "supported_languages": null}, "macro.dbt_date.bigquery__day_of_week": {"unique_id": "macro.dbt_date.bigquery__day_of_week", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.816382, "supported_languages": null}, "macro.dbt_date.postgres__day_of_week": {"unique_id": "macro.dbt_date.postgres__day_of_week", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt_utils.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt_utils.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.8167949, "supported_languages": null}, "macro.dbt_date.redshift__day_of_week": {"unique_id": "macro.dbt_date.redshift__day_of_week", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt_utils.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt_utils.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.817228, "supported_languages": null}, "macro.dbt_date.iso_week_end": {"unique_id": "macro.dbt_date.iso_week_end", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.817717, "supported_languages": null}, "macro.dbt_date._iso_week_end": {"unique_id": "macro.dbt_date._iso_week_end", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "_iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.817924, "supported_languages": null}, "macro.dbt_date.default__iso_week_end": {"unique_id": "macro.dbt_date.default__iso_week_end", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.818069, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_end": {"unique_id": "macro.dbt_date.snowflake__iso_week_end", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.818203, "supported_languages": null}, "macro.dbt_date.n_weeks_ago": {"unique_id": "macro.dbt_date.n_weeks_ago", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/n_weeks_ago.sql", "original_file_path": "macros/calendar_date/n_weeks_ago.sql", "name": "n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.818615, "supported_languages": null}, "macro.dbt_date.month_name": {"unique_id": "macro.dbt_date.month_name", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__month_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.819125, "supported_languages": null}, "macro.dbt_date.default__month_name": {"unique_id": "macro.dbt_date.default__month_name", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.819325, "supported_languages": null}, "macro.dbt_date.bigquery__month_name": {"unique_id": "macro.dbt_date.bigquery__month_name", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.819517, "supported_languages": null}, "macro.dbt_date.snowflake__month_name": {"unique_id": "macro.dbt_date.snowflake__month_name", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.81971, "supported_languages": null}, "macro.dbt_date.postgres__month_name": {"unique_id": "macro.dbt_date.postgres__month_name", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.819914, "supported_languages": null}, "macro.dbt_date.last_month_name": {"unique_id": "macro.dbt_date.last_month_name", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month_name.sql", "original_file_path": "macros/calendar_date/last_month_name.sql", "name": "last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.820218, "supported_languages": null}, "macro.dbt_date.week_of_year": {"unique_id": "macro.dbt_date.week_of_year", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.820666, "supported_languages": null}, "macro.dbt_date.default__week_of_year": {"unique_id": "macro.dbt_date.default__week_of_year", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.820843, "supported_languages": null}, "macro.dbt_date.postgres__week_of_year": {"unique_id": "macro.dbt_date.postgres__week_of_year", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.820983, "supported_languages": null}, "macro.dbt_date.convert_timezone": {"unique_id": "macro.dbt_date.convert_timezone", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.bigquery__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.822154, "supported_languages": null}, "macro.dbt_date.default__convert_timezone": {"unique_id": "macro.dbt_date.default__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\n{%- if not source_tz -%}\ncast(convert_timezone('{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast(convert_timezone('{{ source_tz }}', '{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.822478, "supported_languages": null}, "macro.dbt_date.bigquery__convert_timezone": {"unique_id": "macro.dbt_date.bigquery__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.822624, "supported_languages": null}, "macro.dbt_date.spark__convert_timezone": {"unique_id": "macro.dbt_date.spark__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.822784, "supported_languages": null}, "macro.dbt_date.postgres__convert_timezone": {"unique_id": "macro.dbt_date.postgres__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\n{%- if source_tz -%}\ncast({{ column }} at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast({{ column }} at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.823182, "supported_languages": null}, "macro.dbt_date.redshift__convert_timezone": {"unique_id": "macro.dbt_date.redshift__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.823373, "supported_languages": null}, "macro.dbt_date.n_months_away": {"unique_id": "macro.dbt_date.n_months_away", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/n_months_away.sql", "original_file_path": "macros/calendar_date/n_months_away.sql", "name": "n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.823779, "supported_languages": null}, "macro.dbt_date.iso_week_of_year": {"unique_id": "macro.dbt_date.iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.824338, "supported_languages": null}, "macro.dbt_date._iso_week_of_year": {"unique_id": "macro.dbt_date._iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "_iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.824522, "supported_languages": null}, "macro.dbt_date.default__iso_week_of_year": {"unique_id": "macro.dbt_date.default__iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.824654, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_of_year": {"unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.824786, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_of_year": {"unique_id": "macro.dbt_date.postgres__iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.824928, "supported_languages": null}, "macro.dbt_date.week_end": {"unique_id": "macro.dbt_date.week_end", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.825431, "supported_languages": null}, "macro.dbt_date.default__week_end": {"unique_id": "macro.dbt_date.default__week_end", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ dbt_utils.last_day(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.8255649, "supported_languages": null}, "macro.dbt_date.snowflake__week_end": {"unique_id": "macro.dbt_date.snowflake__week_end", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.825763, "supported_languages": null}, "macro.dbt_date.postgres__week_end": {"unique_id": "macro.dbt_date.postgres__week_end", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.8259609, "supported_languages": null}, "macro.dbt_date.next_month_number": {"unique_id": "macro.dbt_date.next_month_number", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month_number.sql", "original_file_path": "macros/calendar_date/next_month_number.sql", "name": "next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.82625, "supported_languages": null}, "macro.dbt_date.last_month_number": {"unique_id": "macro.dbt_date.last_month_number", "package_name": "dbt_date", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month_number.sql", "original_file_path": "macros/calendar_date/last_month_number.sql", "name": "last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.826528, "supported_languages": null}, "macro.fivetran_utils.enabled_vars": {"unique_id": "macro.fivetran_utils.enabled_vars", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/enabled_vars.sql", "original_file_path": "macros/enabled_vars.sql", "name": "enabled_vars", "macro_sql": "{% macro enabled_vars(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, True) == False %}\n    {{ return(False) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(True) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.82697, "supported_languages": null}, "macro.fivetran_utils.percentile": {"unique_id": "macro.fivetran_utils.percentile", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "percentile", "macro_sql": "{% macro percentile(percentile_field, partition_field, percent) -%}\n\n{{ adapter.dispatch('percentile', 'fivetran_utils') (percentile_field, partition_field, percent) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.bigquery__percentile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.827918, "supported_languages": null}, "macro.fivetran_utils.default__percentile": {"unique_id": "macro.fivetran_utils.default__percentile", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "default__percentile", "macro_sql": "{% macro default__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.828081, "supported_languages": null}, "macro.fivetran_utils.redshift__percentile": {"unique_id": "macro.fivetran_utils.redshift__percentile", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "redshift__percentile", "macro_sql": "{% macro redshift__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.828237, "supported_languages": null}, "macro.fivetran_utils.bigquery__percentile": {"unique_id": "macro.fivetran_utils.bigquery__percentile", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "bigquery__percentile", "macro_sql": "{% macro bigquery__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.828396, "supported_languages": null}, "macro.fivetran_utils.postgres__percentile": {"unique_id": "macro.fivetran_utils.postgres__percentile", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "postgres__percentile", "macro_sql": "{% macro postgres__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n    /* have to group by partition field */\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.828533, "supported_languages": null}, "macro.fivetran_utils.spark__percentile": {"unique_id": "macro.fivetran_utils.spark__percentile", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "spark__percentile", "macro_sql": "{% macro spark__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.828686, "supported_languages": null}, "macro.fivetran_utils.pivot_json_extract": {"unique_id": "macro.fivetran_utils.pivot_json_extract", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/pivot_json_extract.sql", "original_file_path": "macros/pivot_json_extract.sql", "name": "pivot_json_extract", "macro_sql": "{% macro pivot_json_extract(string, list_of_properties) %}\n\n{%- for property in list_of_properties -%}\n\nreplace( {{ fivetran_utils.json_extract(string, property) }}, '\"', '') as {{ property | replace(' ', '_') | lower }}\n\n{%- if not loop.last -%},{%- endif %}\n{% endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.82921, "supported_languages": null}, "macro.fivetran_utils.persist_pass_through_columns": {"unique_id": "macro.fivetran_utils.persist_pass_through_columns", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/persist_pass_through_columns.sql", "original_file_path": "macros/persist_pass_through_columns.sql", "name": "persist_pass_through_columns", "macro_sql": "{% macro persist_pass_through_columns(pass_through_variable, identifier=none, transform='') %}\n\n{% if var(pass_through_variable, none) %}\n    {% for field in var(pass_through_variable) %}\n        , {{ transform ~ '(' ~ (identifier ~ '.' if identifier else '') ~ (field.alias if field.alias else field.name) ~ ')' }} as {{ field.alias if field.alias else field.name }}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.82988, "supported_languages": null}, "macro.fivetran_utils.json_parse": {"unique_id": "macro.fivetran_utils.json_parse", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "json_parse", "macro_sql": "{% macro json_parse(string, string_path) -%}\n\n{{ adapter.dispatch('json_parse', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.bigquery__json_parse"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.8309429, "supported_languages": null}, "macro.fivetran_utils.default__json_parse": {"unique_id": "macro.fivetran_utils.default__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "default__json_parse", "macro_sql": "{% macro default__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.831192, "supported_languages": null}, "macro.fivetran_utils.redshift__json_parse": {"unique_id": "macro.fivetran_utils.redshift__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "redshift__json_parse", "macro_sql": "{% macro redshift__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.8314319, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_parse": {"unique_id": "macro.fivetran_utils.bigquery__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "bigquery__json_parse", "macro_sql": "{% macro bigquery__json_parse(string, string_path) %}\n\n \n  json_extract_scalar({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.8316731, "supported_languages": null}, "macro.fivetran_utils.postgres__json_parse": {"unique_id": "macro.fivetran_utils.postgres__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "postgres__json_parse", "macro_sql": "{% macro postgres__json_parse(string, string_path) %}\n\n  {{string}}::json #>> '{ {%- for s in string_path -%}{{ s }}{%- if not loop.last -%},{%- endif -%}{%- endfor -%} }'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.831913, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_parse": {"unique_id": "macro.fivetran_utils.snowflake__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "snowflake__json_parse", "macro_sql": "{% macro snowflake__json_parse(string, string_path) %}\n\n  parse_json( {{string}} ) {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.83217, "supported_languages": null}, "macro.fivetran_utils.spark__json_parse": {"unique_id": "macro.fivetran_utils.spark__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "spark__json_parse", "macro_sql": "{% macro spark__json_parse(string, string_path) %}\n\n  {{string}} : {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.8324292, "supported_languages": null}, "macro.fivetran_utils.max_bool": {"unique_id": "macro.fivetran_utils.max_bool", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "max_bool", "macro_sql": "{% macro max_bool(boolean_field) -%}\n\n{{ adapter.dispatch('max_bool', 'fivetran_utils') (boolean_field) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.bigquery__max_bool"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.832798, "supported_languages": null}, "macro.fivetran_utils.default__max_bool": {"unique_id": "macro.fivetran_utils.default__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "default__max_bool", "macro_sql": "{% macro default__max_bool(boolean_field)  %}\n\n    bool_or( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.832897, "supported_languages": null}, "macro.fivetran_utils.snowflake__max_bool": {"unique_id": "macro.fivetran_utils.snowflake__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "snowflake__max_bool", "macro_sql": "{% macro snowflake__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.8329961, "supported_languages": null}, "macro.fivetran_utils.bigquery__max_bool": {"unique_id": "macro.fivetran_utils.bigquery__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "bigquery__max_bool", "macro_sql": "{% macro bigquery__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.83309, "supported_languages": null}, "macro.fivetran_utils.calculated_fields": {"unique_id": "macro.fivetran_utils.calculated_fields", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/calculated_fields.sql", "original_file_path": "macros/calculated_fields.sql", "name": "calculated_fields", "macro_sql": "{% macro calculated_fields(variable) -%}\n\n{% if var(variable, none) %}\n    {% for field in var(variable) %}\n        , {{ field.transform_sql }} as {{ field.name }} \n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.833518, "supported_languages": null}, "macro.fivetran_utils.seed_data_helper": {"unique_id": "macro.fivetran_utils.seed_data_helper", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/seed_data_helper.sql", "original_file_path": "macros/seed_data_helper.sql", "name": "seed_data_helper", "macro_sql": "{% macro seed_data_helper(seed_name, warehouses) %}\n\n{% if target.type in warehouses %}\n    {% for w in warehouses %}\n        {% if target.type == w %}\n            {{ return(ref(seed_name ~ \"_\" ~ w ~ \"\")) }}\n        {% endif %}\n    {% endfor %}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.834136, "supported_languages": null}, "macro.fivetran_utils.fill_pass_through_columns": {"unique_id": "macro.fivetran_utils.fill_pass_through_columns", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/fill_pass_through_columns.sql", "original_file_path": "macros/fill_pass_through_columns.sql", "name": "fill_pass_through_columns", "macro_sql": "{% macro fill_pass_through_columns(pass_through_variable) %}\n\n{% if var(pass_through_variable) %}\n    {% for field in var(pass_through_variable) %}\n        {% if field.transform_sql %}\n            , {{ field.transform_sql }} as {{ field.alias if field.alias else field.name }}\n        {% else %}\n            , {{ field.alias if field.alias else field.name }}\n        {% endif %}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.834778, "supported_languages": null}, "macro.fivetran_utils.string_agg": {"unique_id": "macro.fivetran_utils.string_agg", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "string_agg", "macro_sql": "{% macro string_agg(field_to_agg, delimiter) -%}\n\n{{ adapter.dispatch('string_agg', 'fivetran_utils') (field_to_agg, delimiter) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__string_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.835289, "supported_languages": null}, "macro.fivetran_utils.default__string_agg": {"unique_id": "macro.fivetran_utils.default__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "default__string_agg", "macro_sql": "{% macro default__string_agg(field_to_agg, delimiter) %}\n    string_agg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.835414, "supported_languages": null}, "macro.fivetran_utils.snowflake__string_agg": {"unique_id": "macro.fivetran_utils.snowflake__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "snowflake__string_agg", "macro_sql": "{% macro snowflake__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.835535, "supported_languages": null}, "macro.fivetran_utils.redshift__string_agg": {"unique_id": "macro.fivetran_utils.redshift__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "redshift__string_agg", "macro_sql": "{% macro redshift__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.835659, "supported_languages": null}, "macro.fivetran_utils.spark__string_agg": {"unique_id": "macro.fivetran_utils.spark__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "spark__string_agg", "macro_sql": "{% macro spark__string_agg(field_to_agg, delimiter) %}\n    -- collect set will remove duplicates\n    replace(replace(replace(cast( collect_set({{ field_to_agg }}) as string), '[', ''), ']', ''), ', ', {{ delimiter }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.8358521, "supported_languages": null}, "macro.fivetran_utils.timestamp_diff": {"unique_id": "macro.fivetran_utils.timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "timestamp_diff", "macro_sql": "{% macro timestamp_diff(first_date, second_date, datepart) %}\n  {{ adapter.dispatch('timestamp_diff', 'fivetran_utils')(first_date, second_date, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.bigquery__timestamp_diff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.838731, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_diff": {"unique_id": "macro.fivetran_utils.default__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "default__timestamp_diff", "macro_sql": "{% macro default__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.8388941, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_diff": {"unique_id": "macro.fivetran_utils.redshift__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "redshift__timestamp_diff", "macro_sql": "{% macro redshift__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.839046, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_diff": {"unique_id": "macro.fivetran_utils.bigquery__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "bigquery__timestamp_diff", "macro_sql": "{% macro bigquery__timestamp_diff(first_date, second_date, datepart) %}\n\n    timestamp_diff(\n        {{second_date}},\n        {{first_date}},\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.839205, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_diff": {"unique_id": "macro.fivetran_utils.postgres__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "postgres__timestamp_diff", "macro_sql": "{% macro postgres__timestamp_diff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.841025, "supported_languages": null}, "macro.fivetran_utils.try_cast": {"unique_id": "macro.fivetran_utils.try_cast", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "try_cast", "macro_sql": "{% macro try_cast(field, type) %}\n    {{ adapter.dispatch('try_cast', 'fivetran_utils') (field, type) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.bigquery__try_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.84201, "supported_languages": null}, "macro.fivetran_utils.default__safe_cast": {"unique_id": "macro.fivetran_utils.default__safe_cast", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.842149, "supported_languages": null}, "macro.fivetran_utils.redshift__try_cast": {"unique_id": "macro.fivetran_utils.redshift__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "redshift__try_cast", "macro_sql": "{% macro redshift__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when trim({{field}}) ~ '^(0|[1-9][0-9]*)$' then trim({{field}})\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.842425, "supported_languages": null}, "macro.fivetran_utils.postgres__try_cast": {"unique_id": "macro.fivetran_utils.postgres__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "postgres__try_cast", "macro_sql": "{% macro postgres__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar)) ~ '^(0|[1-9][0-9]*)$' \n        then replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar))\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.842706, "supported_languages": null}, "macro.fivetran_utils.snowflake__try_cast": {"unique_id": "macro.fivetran_utils.snowflake__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "snowflake__try_cast", "macro_sql": "{% macro snowflake__try_cast(field, type) %}\n    try_cast(cast({{field}} as varchar) as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.842836, "supported_languages": null}, "macro.fivetran_utils.bigquery__try_cast": {"unique_id": "macro.fivetran_utils.bigquery__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "bigquery__try_cast", "macro_sql": "{% macro bigquery__try_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.84296, "supported_languages": null}, "macro.fivetran_utils.spark__try_cast": {"unique_id": "macro.fivetran_utils.spark__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "spark__try_cast", "macro_sql": "{% macro spark__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.843081, "supported_languages": null}, "macro.fivetran_utils.source_relation": {"unique_id": "macro.fivetran_utils.source_relation", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "name": "source_relation", "macro_sql": "{% macro source_relation(union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('source_relation', 'fivetran_utils') (union_schema_variable, union_database_variable) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__source_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.8437078, "supported_languages": null}, "macro.fivetran_utils.default__source_relation": {"unique_id": "macro.fivetran_utils.default__source_relation", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "name": "default__source_relation", "macro_sql": "{% macro default__source_relation(union_schema_variable, union_database_variable) %}\n\n{% if var(union_schema_variable, none)  %}\n, case\n    {% for schema in var(union_schema_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.{{ schema|lower }}.%' then '{{ schema|lower }}'\n    {% endfor %}\n  end as source_relation\n{% elif var(union_database_variable, none) %}\n, case\n    {% for database in var(union_database_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%{{ database|lower }}.%' then '{{ database|lower }}'\n    {% endfor %}\n  end as source_relation\n{% else %}\n, cast('' as {{ dbt.type_string() }}) as source_relation\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.8442838, "supported_languages": null}, "macro.fivetran_utils.first_value": {"unique_id": "macro.fivetran_utils.first_value", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "first_value", "macro_sql": "{% macro first_value(first_value_field, partition_field, order_by_field, order=\"asc\") -%}\n\n{{ adapter.dispatch('first_value', 'fivetran_utils') (first_value_field, partition_field, order_by_field, order) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__first_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.8448188, "supported_languages": null}, "macro.fivetran_utils.default__first_value": {"unique_id": "macro.fivetran_utils.default__first_value", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "default__first_value", "macro_sql": "{% macro default__first_value(first_value_field, partition_field, order_by_field, order=\"asc\")  %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.8450181, "supported_languages": null}, "macro.fivetran_utils.redshift__first_value": {"unique_id": "macro.fivetran_utils.redshift__first_value", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "redshift__first_value", "macro_sql": "{% macro redshift__first_value(first_value_field, partition_field, order_by_field, order=\"asc\") %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} , {{ partition_field }} rows unbounded preceding )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.84524, "supported_languages": null}, "macro.fivetran_utils.add_dbt_source_relation": {"unique_id": "macro.fivetran_utils.add_dbt_source_relation", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/add_dbt_source_relation.sql", "original_file_path": "macros/add_dbt_source_relation.sql", "name": "add_dbt_source_relation", "macro_sql": "{% macro add_dbt_source_relation() %}\n\n{% if var('union_schemas', none) or var('union_databases', none) %}\n, _dbt_source_relation\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.845572, "supported_languages": null}, "macro.fivetran_utils.add_pass_through_columns": {"unique_id": "macro.fivetran_utils.add_pass_through_columns", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/add_pass_through_columns.sql", "original_file_path": "macros/add_pass_through_columns.sql", "name": "add_pass_through_columns", "macro_sql": "{% macro add_pass_through_columns(base_columns, pass_through_var) %}\n\n  {% if pass_through_var %}\n\n    {% for column in pass_through_var %}\n\n      {% if column.alias %}\n\n      {% do base_columns.append({ \"name\": column.name, \"alias\": column.alias, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n\n      {% else %}\n\n      {% do base_columns.append({ \"name\": column.name, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n        \n      {% endif %}\n\n    {% endfor %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.846617, "supported_languages": null}, "macro.fivetran_utils.union_relations": {"unique_id": "macro.fivetran_utils.union_relations", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, aliases=none, column_override=none, include=[], exclude=[], source_column_name=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n    {%- set source_column_name = source_column_name if source_column_name is not none else '_dbt_source_relation' -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ aliases[loop.index0] if aliases else relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.850676, "supported_languages": null}, "macro.fivetran_utils.union_tables": {"unique_id": "macro.fivetran_utils.union_tables", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "name": "union_tables", "macro_sql": "{%- macro union_tables(tables, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_table') -%}\n\n    {%- do exceptions.warn(\"Warning: the `union_tables` macro is no longer supported and will be deprecated in a future release of dbt-utils. Use the `union_relations` macro instead\") -%}\n\n    {{ return(dbt_utils.union_relations(tables, column_override, include, exclude, source_column_name)) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.8510442, "supported_languages": null}, "macro.fivetran_utils.snowflake_seed_data": {"unique_id": "macro.fivetran_utils.snowflake_seed_data", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/snowflake_seed_data.sql", "original_file_path": "macros/snowflake_seed_data.sql", "name": "snowflake_seed_data", "macro_sql": "{% macro snowflake_seed_data(seed_name) %}\n\n{% if target.type == 'snowflake' %}\n{{ return(ref(seed_name ~ '_snowflake')) }}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.851546, "supported_languages": null}, "macro.fivetran_utils.fill_staging_columns": {"unique_id": "macro.fivetran_utils.fill_staging_columns", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "name": "fill_staging_columns", "macro_sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.quote_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.8531232, "supported_languages": null}, "macro.fivetran_utils.quote_column": {"unique_id": "macro.fivetran_utils.quote_column", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "name": "quote_column", "macro_sql": "{% macro quote_column(column) %}\n    {% if 'quote' in column %}\n        {% if column.quote %}\n            {% if target.type in ('bigquery', 'spark') %}\n            `{{ column.name }}`\n            {% elif target.type == 'snowflake' %}\n            \"{{ column.name | upper }}\"\n            {% else %}\n            \"{{ column.name }}\"\n            {% endif %}\n        {% else %}\n        {{ column.name }}\n        {% endif %}\n    {% else %}\n    {{ column.name }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.853714, "supported_languages": null}, "macro.fivetran_utils.json_extract": {"unique_id": "macro.fivetran_utils.json_extract", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "json_extract", "macro_sql": "{% macro json_extract(string, string_path) -%}\n\n{{ adapter.dispatch('json_extract', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.bigquery__json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.8543591, "supported_languages": null}, "macro.fivetran_utils.default__json_extract": {"unique_id": "macro.fivetran_utils.default__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "default__json_extract", "macro_sql": "{% macro default__json_extract(string, string_path) %}\n\n  json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} )\n \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.8545148, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_extract": {"unique_id": "macro.fivetran_utils.snowflake__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "snowflake__json_extract", "macro_sql": "{% macro snowflake__json_extract(string, string_path) %}\n\n  json_extract_path_text(try_parse_json( {{string}} ), {{ \"'\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.854669, "supported_languages": null}, "macro.fivetran_utils.redshift__json_extract": {"unique_id": "macro.fivetran_utils.redshift__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "redshift__json_extract", "macro_sql": "{% macro redshift__json_extract(string, string_path) %}\n\n  case when is_valid_json( {{string}} ) then json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} ) else null end\n \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.8548338, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_extract": {"unique_id": "macro.fivetran_utils.bigquery__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "bigquery__json_extract", "macro_sql": "{% macro bigquery__json_extract(string, string_path) %}\n\n  json_extract_scalar({{string}}, {{ \"'$.\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.854979, "supported_languages": null}, "macro.fivetran_utils.postgres__json_extract": {"unique_id": "macro.fivetran_utils.postgres__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "postgres__json_extract", "macro_sql": "{% macro postgres__json_extract(string, string_path) %}\n\n  {{string}}::json->>{{\"'\" ~ string_path ~ \"'\" }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.855135, "supported_languages": null}, "macro.fivetran_utils.collect_freshness": {"unique_id": "macro.fivetran_utils.collect_freshness", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.8558688, "supported_languages": null}, "macro.fivetran_utils.default__collect_freshness": {"unique_id": "macro.fivetran_utils.default__collect_freshness", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n\n  {%- set enabled_array = [] -%}\n  {% for node in graph.sources.values() %}\n    {% if node.identifier == source.identifier %}\n      {% if (node.meta['is_enabled'] | default(true)) %}\n        {%- do enabled_array.append(1) -%}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n  {% set is_enabled = (enabled_array != []) %}\n\n    select\n      {% if is_enabled %}\n      max({{ loaded_at_field }})\n      {% else %} \n      {{ current_timestamp() }} {% endif %} as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n\n    {% if is_enabled %}\n    from {{ source }}\n      {% if filter %}\n      where {{ filter }}\n      {% endif %}\n    {% endif %}\n\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.8568509, "supported_languages": null}, "macro.fivetran_utils.timestamp_add": {"unique_id": "macro.fivetran_utils.timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "timestamp_add", "macro_sql": "{% macro timestamp_add(datepart, interval, from_timestamp) -%}\n\n{{ adapter.dispatch('timestamp_add', 'fivetran_utils') (datepart, interval, from_timestamp) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.bigquery__timestamp_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.8576121, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_add": {"unique_id": "macro.fivetran_utils.default__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "default__timestamp_add", "macro_sql": "{% macro default__timestamp_add(datepart, interval, from_timestamp) %}\n\n    timestampadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.857785, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_add": {"unique_id": "macro.fivetran_utils.bigquery__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "bigquery__timestamp_add", "macro_sql": "{% macro bigquery__timestamp_add(datepart, interval, from_timestamp) %}\n\n        timestamp_add({{ from_timestamp }}, interval  {{ interval }} {{ datepart }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.857952, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_add": {"unique_id": "macro.fivetran_utils.redshift__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "redshift__timestamp_add", "macro_sql": "{% macro redshift__timestamp_add(datepart, interval, from_timestamp) %}\n\n        dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.858114, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_add": {"unique_id": "macro.fivetran_utils.postgres__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "postgres__timestamp_add", "macro_sql": "{% macro postgres__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ from_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.858269, "supported_languages": null}, "macro.fivetran_utils.spark__timestamp_add": {"unique_id": "macro.fivetran_utils.spark__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "spark__timestamp_add", "macro_sql": "{% macro spark__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ dbt.dateadd(datepart, interval, from_timestamp) }}\n        \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.85852, "supported_languages": null}, "macro.fivetran_utils.ceiling": {"unique_id": "macro.fivetran_utils.ceiling", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "ceiling", "macro_sql": "{% macro ceiling(num) -%}\n\n{{ adapter.dispatch('ceiling', 'fivetran_utils') (num) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__ceiling"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.858834, "supported_languages": null}, "macro.fivetran_utils.default__ceiling": {"unique_id": "macro.fivetran_utils.default__ceiling", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "default__ceiling", "macro_sql": "{% macro default__ceiling(num) %}\n    ceiling({{ num }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.858933, "supported_languages": null}, "macro.fivetran_utils.snowflake__ceiling": {"unique_id": "macro.fivetran_utils.snowflake__ceiling", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "snowflake__ceiling", "macro_sql": "{% macro snowflake__ceiling(num) %}\n    ceil({{ num }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.8590279, "supported_languages": null}, "macro.fivetran_utils.remove_prefix_from_columns": {"unique_id": "macro.fivetran_utils.remove_prefix_from_columns", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/remove_prefix_from_columns.sql", "original_file_path": "macros/remove_prefix_from_columns.sql", "name": "remove_prefix_from_columns", "macro_sql": "{% macro remove_prefix_from_columns(columns, prefix='', exclude=[]) %}\n\n        {%- for col in columns if col.name not in exclude -%}\n        {%- if col.name[:prefix|length]|lower == prefix -%}\n        {{ col.name }} as {{ col.name[prefix|length:] }}\n        {%- else -%}\n        {{ col.name }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n        {% endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.8597682, "supported_languages": null}, "macro.fivetran_utils.union_data": {"unique_id": "macro.fivetran_utils.union_data", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "name": "union_data", "macro_sql": "{% macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable, union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('union_data', 'fivetran_utils') (\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__union_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.8611772, "supported_languages": null}, "macro.fivetran_utils.default__union_data": {"unique_id": "macro.fivetran_utils.default__union_data", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "name": "default__union_data", "macro_sql": "{% macro default__union_data(\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) %}\n\n{% if var(union_schema_variable, none) %}\n\n    {% set relations = [] %}\n    \n    {% if var(union_schema_variable) is string %}\n    {% set trimmed = var(union_schema_variable)|trim('[')|trim(']') %}\n    {% set schemas = trimmed.split(',')|map('trim',\" \")|map('trim','\"')|map('trim',\"'\") %}\n    {% else %}\n    {% set schemas = var(union_schema_variable) %}\n    {% endif %}\n\n    {% for schema in var(union_schema_variable) %}\n    {% set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else var(database_variable, default_database),\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else schema,\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n    \n    {% set relation_exists=relation is not none %}\n\n    {% if relation_exists %}\n\n    {% do relations.append(relation) %}\n    \n    {% endif %}\n\n    {% endfor %}\n\n    {{ dbt_utils.union_relations(relations) }}\n\n{% elif var(union_database_variable, none) %}\n\n    {% set relations = [] %}\n\n    {% for database in var(union_database_variable) %}\n\n    {% set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else database,\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else var(schema_variable, default_schema),\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n\n    {% set relation_exists=relation is not none %}\n\n    {% if relation_exists %}\n\n    {% do relations.append(relation) %}\n    \n    {% endif %}\n\n    {% endfor %}\n\n    {{ dbt_utils.union_relations(relations) }}\n\n{% else %}\n\n    select * \n    from {{ var(default_variable) }}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.863626, "supported_languages": null}, "macro.fivetran_utils.dummy_coalesce_value": {"unique_id": "macro.fivetran_utils.dummy_coalesce_value", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/dummy_coalesce_value.sql", "original_file_path": "macros/dummy_coalesce_value.sql", "name": "dummy_coalesce_value", "macro_sql": "{% macro dummy_coalesce_value(column) %}\n\n{% set coalesce_value = {\n 'STRING': \"'DUMMY_STRING'\",\n 'BOOLEAN': 'null',\n 'INT': 999999999,\n 'FLOAT': 999999999.99,\n 'TIMESTAMP': 'cast(\"2099-12-31\" as timestamp)',\n 'DATE': 'cast(\"2099-12-31\" as date)',\n} %}\n\n{% if column.is_float() %}\n{{ return(coalesce_value['FLOAT']) }}\n\n{% elif column.is_numeric() %}\n{{ return(coalesce_value['INT']) }}\n\n{% elif column.is_string() %}\n{{ return(coalesce_value['STRING']) }}\n\n{% elif column.data_type|lower == 'boolean' %}\n{{ return(coalesce_value['BOOLEAN']) }}\n\n{% elif 'timestamp' in column.data_type|lower %}\n{{ return(coalesce_value['TIMESTAMP']) }}\n\n{% elif 'date' in column.data_type|lower %}\n{{ return(coalesce_value['DATE']) }}\n\n{% elif 'int' in column.data_type|lower %}\n{{ return(coalesce_value['INT']) }}\n\n{% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.865078, "supported_languages": null}, "macro.fivetran_utils.array_agg": {"unique_id": "macro.fivetran_utils.array_agg", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "array_agg", "macro_sql": "{% macro array_agg(field_to_agg) -%}\n\n{{ adapter.dispatch('array_agg', 'fivetran_utils') (field_to_agg) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__array_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.865416, "supported_languages": null}, "macro.fivetran_utils.default__array_agg": {"unique_id": "macro.fivetran_utils.default__array_agg", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "default__array_agg", "macro_sql": "{% macro default__array_agg(field_to_agg) %}\n    array_agg({{ field_to_agg }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.865537, "supported_languages": null}, "macro.fivetran_utils.redshift__array_agg": {"unique_id": "macro.fivetran_utils.redshift__array_agg", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "redshift__array_agg", "macro_sql": "{% macro redshift__array_agg(field_to_agg) %}\n    listagg({{ field_to_agg }}, ',')\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.865674, "supported_languages": null}, "macro.fivetran_utils.empty_variable_warning": {"unique_id": "macro.fivetran_utils.empty_variable_warning", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/empty_variable_warning.sql", "original_file_path": "macros/empty_variable_warning.sql", "name": "empty_variable_warning", "macro_sql": "{% macro empty_variable_warning(variable, downstream_model) %}\n\n{% if not var(variable) %}\n{{ log(\n    \"\"\"\n    Warning: You have passed an empty list to the \"\"\" ~ variable ~ \"\"\".\n    As a result, you won't see the history of any columns in the \"\"\" ~ downstream_model ~ \"\"\" model.\n    \"\"\",\n    info=True\n) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.866163, "supported_languages": null}, "macro.fivetran_utils.enabled_vars_one_true": {"unique_id": "macro.fivetran_utils.enabled_vars_one_true", "package_name": "fivetran_utils", "root_path": "/Users/catherinefritz/Documents/dbt_packages/asana/dbt_asana/integration_tests/dbt_packages/fivetran_utils", "path": "macros/enabled_vars_one_true.sql", "original_file_path": "macros/enabled_vars_one_true.sql", "name": "enabled_vars_one_true", "macro_sql": "{% macro enabled_vars_one_true(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, False) == True %}\n    {{ return(True) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(False) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1666801516.866635, "supported_languages": null}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-bigquery/1.3.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"seed.asana_integration_tests.project_task_data": [], "seed.asana_integration_tests.story_data": [], "seed.asana_integration_tests.task_tag_data": [], "seed.asana_integration_tests.task_section_data": [], "seed.asana_integration_tests.task_data": [], "seed.asana_integration_tests.task_follower_data": [], "seed.asana_integration_tests.tag_data": [], "seed.asana_integration_tests.project_data": [], "seed.asana_integration_tests.user_data": [], "seed.asana_integration_tests.team_data": [], "seed.asana_integration_tests.section_data": [], "model.asana_source.stg_asana__user": ["model.asana_source.stg_asana__user_tmp", "model.asana_source.stg_asana__user_tmp"], "model.asana_source.stg_asana__task": ["model.asana_source.stg_asana__task_tmp", "model.asana_source.stg_asana__task_tmp"], "model.asana_source.stg_asana__task_section": ["model.asana_source.stg_asana__task_section_tmp", "model.asana_source.stg_asana__task_section_tmp"], "model.asana_source.stg_asana__section": ["model.asana_source.stg_asana__section_tmp", "model.asana_source.stg_asana__section_tmp"], "model.asana_source.stg_asana__team": ["model.asana_source.stg_asana__team_tmp", "model.asana_source.stg_asana__team_tmp"], "model.asana_source.stg_asana__task_tag": ["model.asana_source.stg_asana__task_tag_tmp", "model.asana_source.stg_asana__task_tag_tmp"], "model.asana_source.stg_asana__story": ["model.asana_source.stg_asana__story_tmp", "model.asana_source.stg_asana__story_tmp"], "model.asana_source.stg_asana__tag": ["model.asana_source.stg_asana__tag_tmp", "model.asana_source.stg_asana__tag_tmp"], "model.asana_source.stg_asana__project_task": ["model.asana_source.stg_asana__project_task_tmp", "model.asana_source.stg_asana__project_task_tmp"], "model.asana_source.stg_asana__project": ["model.asana_source.stg_asana__project_tmp", "model.asana_source.stg_asana__project_tmp"], "model.asana_source.stg_asana__task_follower": ["model.asana_source.stg_asana__task_follower_tmp", "model.asana_source.stg_asana__task_follower_tmp"], "model.asana_source.stg_asana__story_tmp": ["source.asana_source.asana.story"], "model.asana_source.stg_asana__team_tmp": ["source.asana_source.asana.team"], "model.asana_source.stg_asana__task_tmp": ["source.asana_source.asana.task"], "model.asana_source.stg_asana__task_follower_tmp": ["source.asana_source.asana.task_follower"], "model.asana_source.stg_asana__tag_tmp": ["source.asana_source.asana.tag"], "model.asana_source.stg_asana__task_section_tmp": ["source.asana_source.asana.task_section"], "model.asana_source.stg_asana__task_tag_tmp": ["source.asana_source.asana.task_tag"], "model.asana_source.stg_asana__user_tmp": ["source.asana_source.asana.user"], "model.asana_source.stg_asana__section_tmp": ["source.asana_source.asana.section"], "model.asana_source.stg_asana__project_tmp": ["source.asana_source.asana.project"], "model.asana_source.stg_asana__project_task_tmp": ["source.asana_source.asana.project_task"], "model.asana.asana__daily_metrics": ["model.asana.asana__task"], "model.asana.asana__user": ["model.asana.int_asana__project_user", "model.asana.int_asana__user_task_metrics", "model.asana_source.stg_asana__user"], "model.asana.asana__task": ["model.asana.int_asana__subtask_parent", "model.asana.int_asana__task_assignee", "model.asana.int_asana__task_comments", "model.asana.int_asana__task_first_modifier", "model.asana.int_asana__task_followers", "model.asana.int_asana__task_open_length", "model.asana.int_asana__task_projects", "model.asana.int_asana__task_tags", "model.asana_source.stg_asana__task"], "model.asana.asana__team": ["model.asana.asana__project", "model.asana_source.stg_asana__team"], "model.asana.asana__project": ["model.asana.int_asana__project_task_metrics", "model.asana.int_asana__project_user", "model.asana_source.stg_asana__project", "model.asana_source.stg_asana__section", "model.asana_source.stg_asana__team", "model.asana_source.stg_asana__user"], "model.asana.asana__tag": ["model.asana.asana__task", "model.asana_source.stg_asana__tag", "model.asana_source.stg_asana__task_tag"], "model.asana.int_asana__task_comments": ["model.asana.int_asana__task_story"], "model.asana.int_asana__project_task_metrics": ["model.asana.asana__task", "model.asana_source.stg_asana__project", "model.asana_source.stg_asana__project_task"], "model.asana.int_asana__user_task_metrics": ["model.asana.asana__task"], "model.asana.int_asana__task_tags": ["model.asana_source.stg_asana__tag", "model.asana_source.stg_asana__task_tag"], "model.asana.int_asana__task_open_length": ["model.asana.int_asana__task_story", "model.asana_source.stg_asana__task"], "model.asana.int_asana__task_followers": ["model.asana_source.stg_asana__task_follower", "model.asana_source.stg_asana__user"], "model.asana.int_asana__project_user": ["model.asana.int_asana__task_assignee", "model.asana_source.stg_asana__project", "model.asana_source.stg_asana__project_task"], "model.asana.int_asana__task_first_modifier": ["model.asana.int_asana__task_story"], "model.asana.int_asana__task_projects": ["model.asana_source.stg_asana__project", "model.asana_source.stg_asana__project_task", "model.asana_source.stg_asana__section", "model.asana_source.stg_asana__task_section"], "model.asana.int_asana__task_assignee": ["model.asana_source.stg_asana__task", "model.asana_source.stg_asana__user"], "model.asana.int_asana__subtask_parent": ["model.asana.int_asana__task_assignee"], "model.asana.int_asana__task_story": ["model.asana_source.stg_asana__story", "model.asana_source.stg_asana__user"], "test.asana_source.unique_stg_asana__project_project_id.67bfab1228": ["model.asana_source.stg_asana__project"], "test.asana_source.not_null_stg_asana__project_project_id.d27dae84fa": ["model.asana_source.stg_asana__project"], "test.asana_source.not_null_stg_asana__project_task_project_id.e2450d16b1": ["model.asana_source.stg_asana__project_task"], "test.asana_source.not_null_stg_asana__project_task_task_id.9479566014": ["model.asana_source.stg_asana__project_task"], "test.asana_source.unique_stg_asana__section_section_id.0495dd3d2f": ["model.asana_source.stg_asana__section"], "test.asana_source.not_null_stg_asana__section_section_id.389ebce958": ["model.asana_source.stg_asana__section"], "test.asana_source.unique_stg_asana__story_story_id.414f25bb84": ["model.asana_source.stg_asana__story"], "test.asana_source.not_null_stg_asana__story_story_id.ca847d0848": ["model.asana_source.stg_asana__story"], "test.asana_source.not_null_stg_asana__story_target_task_id.3f971de06e": ["model.asana_source.stg_asana__story"], "test.asana_source.unique_stg_asana__tag_tag_id.fd78b190c7": ["model.asana_source.stg_asana__tag"], "test.asana_source.not_null_stg_asana__tag_tag_id.c6a8187ca2": ["model.asana_source.stg_asana__tag"], "test.asana_source.unique_stg_asana__task_task_id.a5271275a5": ["model.asana_source.stg_asana__task"], "test.asana_source.not_null_stg_asana__task_task_id.924cc69000": ["model.asana_source.stg_asana__task"], "test.asana_source.not_null_stg_asana__task_follower_task_id.5af35f322c": ["model.asana_source.stg_asana__task_follower"], "test.asana_source.not_null_stg_asana__task_follower_user_id.e0aea0b15e": ["model.asana_source.stg_asana__task_follower"], "test.asana_source.not_null_stg_asana__task_section_task_id.ab81301de8": ["model.asana_source.stg_asana__task_section"], "test.asana_source.not_null_stg_asana__task_section_section_id.b0977a4cfe": ["model.asana_source.stg_asana__task_section"], "test.asana_source.not_null_stg_asana__task_tag_tag_id.d523de41d8": ["model.asana_source.stg_asana__task_tag"], "test.asana_source.not_null_stg_asana__task_tag_task_id.9d27624748": ["model.asana_source.stg_asana__task_tag"], "test.asana_source.unique_stg_asana__team_team_id.111fe15873": ["model.asana_source.stg_asana__team"], "test.asana_source.not_null_stg_asana__team_team_id.e12b563474": ["model.asana_source.stg_asana__team"], "test.asana_source.unique_stg_asana__user_user_id.73808d6267": ["model.asana_source.stg_asana__user"], "test.asana_source.not_null_stg_asana__user_user_id.4e900e8ec6": ["model.asana_source.stg_asana__user"], "test.asana.unique_asana__task_task_id.ebfe331df1": ["model.asana.asana__task"], "test.asana.not_null_asana__task_task_id.6d36eb2cd0": ["model.asana.asana__task"], "test.asana.unique_asana__user_user_id.3c4b63387e": ["model.asana.asana__user"], "test.asana.not_null_asana__user_user_id.eb9cd93a43": ["model.asana.asana__user"], "test.asana.unique_asana__project_project_id.66a76364ef": ["model.asana.asana__project"], "test.asana.not_null_asana__project_project_id.78420e1b45": ["model.asana.asana__project"], "test.asana.unique_asana__team_team_id.ada6b5e093": ["model.asana.asana__team"], "test.asana.not_null_asana__team_team_id.cd6b6c88bf": ["model.asana.asana__team"], "test.asana.unique_asana__tag_tag_id.46c0d2510f": ["model.asana.asana__tag"], "test.asana.not_null_asana__tag_tag_id.593d626953": ["model.asana.asana__tag"], "test.asana.unique_asana__daily_metrics_date_day.e8d67f545d": ["model.asana.asana__daily_metrics"], "test.asana.not_null_asana__daily_metrics_date_day.363a2a09cf": ["model.asana.asana__daily_metrics"], "test.asana.unique_int_asana__project_task_metrics_project_id.049cc9b8a6": ["model.asana.int_asana__project_task_metrics"], "test.asana.not_null_int_asana__project_task_metrics_project_id.804fd1daf3": ["model.asana.int_asana__project_task_metrics"], "test.asana.dbt_utils_unique_combination_of_columns_int_asana__project_user_project_id__user_id__role__currently_working_on.f9493098e0": ["model.asana.int_asana__project_user"], "test.asana.unique_int_asana__subtask_parent_subtask_id.641dfb3c8f": ["model.asana.int_asana__subtask_parent"], "test.asana.not_null_int_asana__subtask_parent_subtask_id.024565c768": ["model.asana.int_asana__subtask_parent"], "test.asana.unique_int_asana__task_assignee_task_id.b4e2ea04e1": ["model.asana.int_asana__task_assignee"], "test.asana.not_null_int_asana__task_assignee_task_id.a9c81bd443": ["model.asana.int_asana__task_assignee"], "test.asana.unique_int_asana__task_comments_task_id.f012fa6a04": ["model.asana.int_asana__task_comments"], "test.asana.not_null_int_asana__task_comments_task_id.6986f1d77f": ["model.asana.int_asana__task_comments"], "test.asana.unique_int_asana__task_first_modifier_task_id.59583c6dc2": ["model.asana.int_asana__task_first_modifier"], "test.asana.not_null_int_asana__task_first_modifier_task_id.495738ff52": ["model.asana.int_asana__task_first_modifier"], "test.asana.unique_int_asana__task_followers_task_id.eeb3667df9": ["model.asana.int_asana__task_followers"], "test.asana.not_null_int_asana__task_followers_task_id.6791bf2573": ["model.asana.int_asana__task_followers"], "test.asana.unique_int_asana__task_open_length_task_id.f26c49b044": ["model.asana.int_asana__task_open_length"], "test.asana.not_null_int_asana__task_open_length_task_id.23bb23b2e9": ["model.asana.int_asana__task_open_length"], "test.asana.unique_int_asana__task_projects_task_id.8a6b2f262d": ["model.asana.int_asana__task_projects"], "test.asana.not_null_int_asana__task_projects_task_id.322519ee10": ["model.asana.int_asana__task_projects"], "test.asana.unique_int_asana__task_story_story_id.92d7adbcf6": ["model.asana.int_asana__task_story"], "test.asana.not_null_int_asana__task_story_story_id.1ffdb99927": ["model.asana.int_asana__task_story"], "test.asana.unique_int_asana__task_tags_task_id.f28aff2685": ["model.asana.int_asana__task_tags"], "test.asana.not_null_int_asana__task_tags_task_id.34eec2b834": ["model.asana.int_asana__task_tags"], "test.asana.unique_int_asana__user_task_metrics_user_id.06a6a270b8": ["model.asana.int_asana__user_task_metrics"], "test.asana.not_null_int_asana__user_task_metrics_user_id.54eae7d721": ["model.asana.int_asana__user_task_metrics"], "source.asana_source.asana.user": [], "source.asana_source.asana.task": [], "source.asana_source.asana.project": [], "source.asana_source.asana.story": [], "source.asana_source.asana.team": [], "source.asana_source.asana.tag": [], "source.asana_source.asana.section": [], "source.asana_source.asana.project_task": [], "source.asana_source.asana.task_follower": [], "source.asana_source.asana.task_tag": [], "source.asana_source.asana.task_section": []}, "child_map": {"seed.asana_integration_tests.project_task_data": [], "seed.asana_integration_tests.story_data": [], "seed.asana_integration_tests.task_tag_data": [], "seed.asana_integration_tests.task_section_data": [], "seed.asana_integration_tests.task_data": [], "seed.asana_integration_tests.task_follower_data": [], "seed.asana_integration_tests.tag_data": [], "seed.asana_integration_tests.project_data": [], "seed.asana_integration_tests.user_data": [], "seed.asana_integration_tests.team_data": [], "seed.asana_integration_tests.section_data": [], "model.asana_source.stg_asana__user": ["model.asana.asana__project", "model.asana.asana__user", "model.asana.int_asana__task_assignee", "model.asana.int_asana__task_followers", "model.asana.int_asana__task_story", "test.asana_source.not_null_stg_asana__user_user_id.4e900e8ec6", "test.asana_source.unique_stg_asana__user_user_id.73808d6267"], "model.asana_source.stg_asana__task": ["model.asana.asana__task", "model.asana.int_asana__task_assignee", "model.asana.int_asana__task_open_length", "test.asana_source.not_null_stg_asana__task_task_id.924cc69000", "test.asana_source.unique_stg_asana__task_task_id.a5271275a5"], "model.asana_source.stg_asana__task_section": ["model.asana.int_asana__task_projects", "test.asana_source.not_null_stg_asana__task_section_section_id.b0977a4cfe", "test.asana_source.not_null_stg_asana__task_section_task_id.ab81301de8"], "model.asana_source.stg_asana__section": ["model.asana.asana__project", "model.asana.int_asana__task_projects", "test.asana_source.not_null_stg_asana__section_section_id.389ebce958", "test.asana_source.unique_stg_asana__section_section_id.0495dd3d2f"], "model.asana_source.stg_asana__team": ["model.asana.asana__project", "model.asana.asana__team", "test.asana_source.not_null_stg_asana__team_team_id.e12b563474", "test.asana_source.unique_stg_asana__team_team_id.111fe15873"], "model.asana_source.stg_asana__task_tag": ["model.asana.asana__tag", "model.asana.int_asana__task_tags", "test.asana_source.not_null_stg_asana__task_tag_tag_id.d523de41d8", "test.asana_source.not_null_stg_asana__task_tag_task_id.9d27624748"], "model.asana_source.stg_asana__story": ["model.asana.int_asana__task_story", "test.asana_source.not_null_stg_asana__story_story_id.ca847d0848", "test.asana_source.not_null_stg_asana__story_target_task_id.3f971de06e", "test.asana_source.unique_stg_asana__story_story_id.414f25bb84"], "model.asana_source.stg_asana__tag": ["model.asana.asana__tag", "model.asana.int_asana__task_tags", "test.asana_source.not_null_stg_asana__tag_tag_id.c6a8187ca2", "test.asana_source.unique_stg_asana__tag_tag_id.fd78b190c7"], "model.asana_source.stg_asana__project_task": ["model.asana.int_asana__project_task_metrics", "model.asana.int_asana__project_user", "model.asana.int_asana__task_projects", "test.asana_source.not_null_stg_asana__project_task_project_id.e2450d16b1", "test.asana_source.not_null_stg_asana__project_task_task_id.9479566014"], "model.asana_source.stg_asana__project": ["model.asana.asana__project", "model.asana.int_asana__project_task_metrics", "model.asana.int_asana__project_user", "model.asana.int_asana__task_projects", "test.asana_source.not_null_stg_asana__project_project_id.d27dae84fa", "test.asana_source.unique_stg_asana__project_project_id.67bfab1228"], "model.asana_source.stg_asana__task_follower": ["model.asana.int_asana__task_followers", "test.asana_source.not_null_stg_asana__task_follower_task_id.5af35f322c", "test.asana_source.not_null_stg_asana__task_follower_user_id.e0aea0b15e"], "model.asana_source.stg_asana__story_tmp": ["model.asana_source.stg_asana__story", "model.asana_source.stg_asana__story"], "model.asana_source.stg_asana__team_tmp": ["model.asana_source.stg_asana__team", "model.asana_source.stg_asana__team"], "model.asana_source.stg_asana__task_tmp": ["model.asana_source.stg_asana__task", "model.asana_source.stg_asana__task"], "model.asana_source.stg_asana__task_follower_tmp": ["model.asana_source.stg_asana__task_follower", "model.asana_source.stg_asana__task_follower"], "model.asana_source.stg_asana__tag_tmp": ["model.asana_source.stg_asana__tag", "model.asana_source.stg_asana__tag"], "model.asana_source.stg_asana__task_section_tmp": ["model.asana_source.stg_asana__task_section", "model.asana_source.stg_asana__task_section"], "model.asana_source.stg_asana__task_tag_tmp": ["model.asana_source.stg_asana__task_tag", "model.asana_source.stg_asana__task_tag"], "model.asana_source.stg_asana__user_tmp": ["model.asana_source.stg_asana__user", "model.asana_source.stg_asana__user"], "model.asana_source.stg_asana__section_tmp": ["model.asana_source.stg_asana__section", "model.asana_source.stg_asana__section"], "model.asana_source.stg_asana__project_tmp": ["model.asana_source.stg_asana__project", "model.asana_source.stg_asana__project"], "model.asana_source.stg_asana__project_task_tmp": ["model.asana_source.stg_asana__project_task", "model.asana_source.stg_asana__project_task"], "model.asana.asana__daily_metrics": ["test.asana.not_null_asana__daily_metrics_date_day.363a2a09cf", "test.asana.unique_asana__daily_metrics_date_day.e8d67f545d"], "model.asana.asana__user": ["test.asana.not_null_asana__user_user_id.eb9cd93a43", "test.asana.unique_asana__user_user_id.3c4b63387e"], "model.asana.asana__task": ["model.asana.asana__daily_metrics", "model.asana.asana__tag", "model.asana.int_asana__project_task_metrics", "model.asana.int_asana__user_task_metrics", "test.asana.not_null_asana__task_task_id.6d36eb2cd0", "test.asana.unique_asana__task_task_id.ebfe331df1"], "model.asana.asana__team": ["test.asana.not_null_asana__team_team_id.cd6b6c88bf", "test.asana.unique_asana__team_team_id.ada6b5e093"], "model.asana.asana__project": ["model.asana.asana__team", "test.asana.not_null_asana__project_project_id.78420e1b45", "test.asana.unique_asana__project_project_id.66a76364ef"], "model.asana.asana__tag": ["test.asana.not_null_asana__tag_tag_id.593d626953", "test.asana.unique_asana__tag_tag_id.46c0d2510f"], "model.asana.int_asana__task_comments": ["model.asana.asana__task", "test.asana.not_null_int_asana__task_comments_task_id.6986f1d77f", "test.asana.unique_int_asana__task_comments_task_id.f012fa6a04"], "model.asana.int_asana__project_task_metrics": ["model.asana.asana__project", "test.asana.not_null_int_asana__project_task_metrics_project_id.804fd1daf3", "test.asana.unique_int_asana__project_task_metrics_project_id.049cc9b8a6"], "model.asana.int_asana__user_task_metrics": ["model.asana.asana__user", "test.asana.not_null_int_asana__user_task_metrics_user_id.54eae7d721", "test.asana.unique_int_asana__user_task_metrics_user_id.06a6a270b8"], "model.asana.int_asana__task_tags": ["model.asana.asana__task", "test.asana.not_null_int_asana__task_tags_task_id.34eec2b834", "test.asana.unique_int_asana__task_tags_task_id.f28aff2685"], "model.asana.int_asana__task_open_length": ["model.asana.asana__task", "test.asana.not_null_int_asana__task_open_length_task_id.23bb23b2e9", "test.asana.unique_int_asana__task_open_length_task_id.f26c49b044"], "model.asana.int_asana__task_followers": ["model.asana.asana__task", "test.asana.not_null_int_asana__task_followers_task_id.6791bf2573", "test.asana.unique_int_asana__task_followers_task_id.eeb3667df9"], "model.asana.int_asana__project_user": ["model.asana.asana__project", "model.asana.asana__user", "test.asana.dbt_utils_unique_combination_of_columns_int_asana__project_user_project_id__user_id__role__currently_working_on.f9493098e0"], "model.asana.int_asana__task_first_modifier": ["model.asana.asana__task", "test.asana.not_null_int_asana__task_first_modifier_task_id.495738ff52", "test.asana.unique_int_asana__task_first_modifier_task_id.59583c6dc2"], "model.asana.int_asana__task_projects": ["model.asana.asana__task", "test.asana.not_null_int_asana__task_projects_task_id.322519ee10", "test.asana.unique_int_asana__task_projects_task_id.8a6b2f262d"], "model.asana.int_asana__task_assignee": ["model.asana.asana__task", "model.asana.int_asana__project_user", "model.asana.int_asana__subtask_parent", "test.asana.not_null_int_asana__task_assignee_task_id.a9c81bd443", "test.asana.unique_int_asana__task_assignee_task_id.b4e2ea04e1"], "model.asana.int_asana__subtask_parent": ["model.asana.asana__task", "test.asana.not_null_int_asana__subtask_parent_subtask_id.024565c768", "test.asana.unique_int_asana__subtask_parent_subtask_id.641dfb3c8f"], "model.asana.int_asana__task_story": ["model.asana.int_asana__task_comments", "model.asana.int_asana__task_first_modifier", "model.asana.int_asana__task_open_length", "test.asana.not_null_int_asana__task_story_story_id.1ffdb99927", "test.asana.unique_int_asana__task_story_story_id.92d7adbcf6"], "test.asana_source.unique_stg_asana__project_project_id.67bfab1228": [], "test.asana_source.not_null_stg_asana__project_project_id.d27dae84fa": [], "test.asana_source.not_null_stg_asana__project_task_project_id.e2450d16b1": [], "test.asana_source.not_null_stg_asana__project_task_task_id.9479566014": [], "test.asana_source.unique_stg_asana__section_section_id.0495dd3d2f": [], "test.asana_source.not_null_stg_asana__section_section_id.389ebce958": [], "test.asana_source.unique_stg_asana__story_story_id.414f25bb84": [], "test.asana_source.not_null_stg_asana__story_story_id.ca847d0848": [], "test.asana_source.not_null_stg_asana__story_target_task_id.3f971de06e": [], "test.asana_source.unique_stg_asana__tag_tag_id.fd78b190c7": [], "test.asana_source.not_null_stg_asana__tag_tag_id.c6a8187ca2": [], "test.asana_source.unique_stg_asana__task_task_id.a5271275a5": [], "test.asana_source.not_null_stg_asana__task_task_id.924cc69000": [], "test.asana_source.not_null_stg_asana__task_follower_task_id.5af35f322c": [], "test.asana_source.not_null_stg_asana__task_follower_user_id.e0aea0b15e": [], "test.asana_source.not_null_stg_asana__task_section_task_id.ab81301de8": [], "test.asana_source.not_null_stg_asana__task_section_section_id.b0977a4cfe": [], "test.asana_source.not_null_stg_asana__task_tag_tag_id.d523de41d8": [], "test.asana_source.not_null_stg_asana__task_tag_task_id.9d27624748": [], "test.asana_source.unique_stg_asana__team_team_id.111fe15873": [], "test.asana_source.not_null_stg_asana__team_team_id.e12b563474": [], "test.asana_source.unique_stg_asana__user_user_id.73808d6267": [], "test.asana_source.not_null_stg_asana__user_user_id.4e900e8ec6": [], "test.asana.unique_asana__task_task_id.ebfe331df1": [], "test.asana.not_null_asana__task_task_id.6d36eb2cd0": [], "test.asana.unique_asana__user_user_id.3c4b63387e": [], "test.asana.not_null_asana__user_user_id.eb9cd93a43": [], "test.asana.unique_asana__project_project_id.66a76364ef": [], "test.asana.not_null_asana__project_project_id.78420e1b45": [], "test.asana.unique_asana__team_team_id.ada6b5e093": [], "test.asana.not_null_asana__team_team_id.cd6b6c88bf": [], "test.asana.unique_asana__tag_tag_id.46c0d2510f": [], "test.asana.not_null_asana__tag_tag_id.593d626953": [], "test.asana.unique_asana__daily_metrics_date_day.e8d67f545d": [], "test.asana.not_null_asana__daily_metrics_date_day.363a2a09cf": [], "test.asana.unique_int_asana__project_task_metrics_project_id.049cc9b8a6": [], "test.asana.not_null_int_asana__project_task_metrics_project_id.804fd1daf3": [], "test.asana.dbt_utils_unique_combination_of_columns_int_asana__project_user_project_id__user_id__role__currently_working_on.f9493098e0": [], "test.asana.unique_int_asana__subtask_parent_subtask_id.641dfb3c8f": [], "test.asana.not_null_int_asana__subtask_parent_subtask_id.024565c768": [], "test.asana.unique_int_asana__task_assignee_task_id.b4e2ea04e1": [], "test.asana.not_null_int_asana__task_assignee_task_id.a9c81bd443": [], "test.asana.unique_int_asana__task_comments_task_id.f012fa6a04": [], "test.asana.not_null_int_asana__task_comments_task_id.6986f1d77f": [], "test.asana.unique_int_asana__task_first_modifier_task_id.59583c6dc2": [], "test.asana.not_null_int_asana__task_first_modifier_task_id.495738ff52": [], "test.asana.unique_int_asana__task_followers_task_id.eeb3667df9": [], "test.asana.not_null_int_asana__task_followers_task_id.6791bf2573": [], "test.asana.unique_int_asana__task_open_length_task_id.f26c49b044": [], "test.asana.not_null_int_asana__task_open_length_task_id.23bb23b2e9": [], "test.asana.unique_int_asana__task_projects_task_id.8a6b2f262d": [], "test.asana.not_null_int_asana__task_projects_task_id.322519ee10": [], "test.asana.unique_int_asana__task_story_story_id.92d7adbcf6": [], "test.asana.not_null_int_asana__task_story_story_id.1ffdb99927": [], "test.asana.unique_int_asana__task_tags_task_id.f28aff2685": [], "test.asana.not_null_int_asana__task_tags_task_id.34eec2b834": [], "test.asana.unique_int_asana__user_task_metrics_user_id.06a6a270b8": [], "test.asana.not_null_int_asana__user_task_metrics_user_id.54eae7d721": [], "source.asana_source.asana.user": ["model.asana_source.stg_asana__user_tmp"], "source.asana_source.asana.task": ["model.asana_source.stg_asana__task_tmp"], "source.asana_source.asana.project": ["model.asana_source.stg_asana__project_tmp"], "source.asana_source.asana.story": ["model.asana_source.stg_asana__story_tmp"], "source.asana_source.asana.team": ["model.asana_source.stg_asana__team_tmp"], "source.asana_source.asana.tag": ["model.asana_source.stg_asana__tag_tmp"], "source.asana_source.asana.section": ["model.asana_source.stg_asana__section_tmp"], "source.asana_source.asana.project_task": ["model.asana_source.stg_asana__project_task_tmp"], "source.asana_source.asana.task_follower": ["model.asana_source.stg_asana__task_follower_tmp"], "source.asana_source.asana.task_tag": ["model.asana_source.stg_asana__task_tag_tmp"], "source.asana_source.asana.task_section": ["model.asana_source.stg_asana__task_section_tmp"]}}